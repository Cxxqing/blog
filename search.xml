<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java开发路线</title>
    <url>/blog/2020/05/09/JAVAdeveloproad/</url>
    <content><![CDATA[<h2 id="编程基础（掌握）"><a href="#编程基础（掌握）" class="headerlink" title="编程基础（掌握）"></a>编程基础（掌握）</h2><h3 id="JAVA语法"><a href="#JAVA语法" class="headerlink" title="JAVA语法"></a>JAVA语法</h3><h4 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h4><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><ul>
<li><p>类加载机制</p>
</li>
<li><p>字节码执行机制</p>
</li>
<li><p>JVM内存模型</p>
</li>
<li><p>GC垃圾回收</p>
</li>
<li><p>VM性能监控与故障定位</p>
</li>
<li><p>JVM调优</p>
</li>
</ul>
<h4 id="并发-多线程"><a href="#并发-多线程" class="headerlink" title="并发/多线程"></a>并发/多线程</h4><ul>
<li><p>并发编程的基础</p>
</li>
<li><p>线程池</p>
</li>
<li><p>锁</p>
</li>
<li><p>并发容器</p>
</li>
<li><p>原子类</p>
</li>
<li><p>JUC并发工具类</p>
</li>
</ul>
<h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul>
<li>字符串</li>
<li>数组</li>
<li>链表</li>
<li>堆、栈、队列</li>
<li>二叉树</li>
<li>哈希</li>
<li>图</li>
</ul>
<h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><ul>
<li>排序</li>
<li>查找</li>
<li>贪心</li>
<li>分治</li>
<li>动态规划</li>
<li>回溯</li>
</ul>
<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><ul>
<li>ARP协议</li>
<li>IP/ ICMP协议</li>
<li>TCP/ UDP协议</li>
<li>DNS/HTTP/ HTTPS协议</li>
<li>Session/ Cookie</li>
</ul>
<h3 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h3><ul>
<li>SQL语句的书写</li>
<li>SQL语句的优化</li>
<li>事务以及隔离级别</li>
<li>索引</li>
<li>锁</li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li>进程/ 线程</li>
<li>并发/ 锁</li>
<li>内存管理和调度</li>
<li>I/ O原理</li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li>单例</li>
<li>工厂</li>
<li>代理</li>
<li>策略</li>
<li>模板方法</li>
<li>观察者</li>
<li>适配器</li>
<li>责任链</li>
<li>建造者</li>
</ul>
<h2 id="研发工具"><a href="#研发工具" class="headerlink" title="研发工具"></a>研发工具</h2><h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><ul>
<li>Eclipse</li>
<li>Intellij IDEA</li>
<li>VS Code</li>
</ul>
<h3 id="Linux系统（了解）"><a href="#Linux系统（了解）" class="headerlink" title="Linux系统（了解）"></a>Linux系统（了解）</h3><ul>
<li>常用命令</li>
<li>Shell脚本</li>
</ul>
<h3 id="项目管理-构建工具（掌握）"><a href="#项目管理-构建工具（掌握）" class="headerlink" title="项目管理/构建工具（掌握）"></a>项目管理/构建工具（掌握）</h3><ul>
<li>Maven</li>
<li>Gradle</li>
</ul>
<h3 id="代码管理工具（了解）"><a href="#代码管理工具（了解）" class="headerlink" title="代码管理工具（了解）"></a>代码管理工具（了解）</h3><ul>
<li>SVN</li>
<li>Git</li>
</ul>
<h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><h4 id="Spring家族框架（掌握-2-3month）"><a href="#Spring家族框架（掌握-2-3month）" class="headerlink" title="Spring家族框架（掌握,2-3month）"></a>Spring家族框架（掌握,2-3month）</h4><ul>
<li><strong>Spring</strong><ul>
<li>IoC</li>
<li>AOP</li>
</ul>
</li>
<li><strong>SpringMVC</strong></li>
<li><strong>Spring Boot</strong><ul>
<li>自动配置、开箱即用</li>
<li>整合Web</li>
<li>整合数据库（事务问题）</li>
<li>整合权限<ul>
<li>Shiro</li>
<li>Spring Security</li>
</ul>
</li>
<li>整合各种中间件<ul>
<li>Redis、 MQ、 RPC框架、NIO框架</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="服务器软件"><a href="#服务器软件" class="headerlink" title="服务器软件"></a>服务器软件</h4><ul>
<li>Web服务器<ul>
<li>Nginx（重要）</li>
</ul>
</li>
<li>应用服务器<ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Undertow（性能较好）</li>
</ul>
</li>
</ul>
<h4 id="中间件（应对高并发、大容量）"><a href="#中间件（应对高并发、大容量）" class="headerlink" title="中间件（应对高并发、大容量）"></a>中间件（应对高并发、大容量）</h4><ul>
<li><p>缓存</p>
<ul>
<li><strong>Redis</strong>（掌握，重要,2week）                                                                        <ul>
<li>书籍：《Redis设计与实践》</li>
<li>5大基础数据类型</li>
<li>事务</li>
<li>消息通知</li>
<li>管道</li>
<li>持久化</li>
<li>集群</li>
</ul>
</li>
<li>memcache</li>
</ul>
</li>
<li><p>消息队列（学一个即可）</p>
<ul>
<li>RocketMQ</li>
<li>RabbitMQ</li>
<li>Kafka（大数据）</li>
</ul>
</li>
<li><p>RPC框架</p>
<ul>
<li>Dubbo</li>
<li>gRPC</li>
<li>Thrift</li>
<li>Spring Cloud</li>
<li>Netty</li>
</ul>
</li>
<li><p>数据库框架</p>
<ul>
<li><strong>ORM层框架</strong>（掌握）<ul>
<li>Mybatis</li>
<li>Hibernate</li>
<li>JPA</li>
</ul>
</li>
<li><strong>连接池</strong>（掌握）<ul>
<li>Druid</li>
<li>HikariCP</li>
<li>C3P0</li>
</ul>
</li>
<li>分库分表<ul>
<li>MyCAT</li>
<li>Sharding-JDBC</li>
<li>Sharding-Sphere</li>
</ul>
</li>
</ul>
</li>
<li><p>搜索引擎（了解）</p>
<ul>
<li>ElasticSearch</li>
<li>Solr</li>
</ul>
</li>
<li><p>分布式/微服务（了解,2-3week）</p>
<ul>
<li><p>服务发现/注册</p>
<ul>
<li>Eureka</li>
<li>Consul</li>
<li>Zookeeper（重要）</li>
<li>Nacos</li>
</ul>
</li>
<li><p>网关</p>
<ul>
<li>Zuul</li>
<li>Gateway</li>
</ul>
</li>
<li><p>服务调用（负载均衡）</p>
<ul>
<li>Ribbon</li>
<li>Feign</li>
</ul>
</li>
<li><p>熔断/降级</p>
<ul>
<li>Hystrix</li>
</ul>
</li>
<li><p>配置中心</p>
<ul>
<li>Config</li>
<li>Apollo</li>
<li>Nacos</li>
</ul>
</li>
<li><p>认证和鉴权（稍微重要些）</p>
<ul>
<li><p>Shiro</p>
</li>
<li><p>Spring Security</p>
</li>
<li><p>OAuth2</p>
</li>
<li><p>SSO单点登录</p>
</li>
</ul>
</li>
<li><p>分布式事务</p>
<ul>
<li>JTA接口——Atomikos组件</li>
<li>2PC、3PC</li>
<li>XA模式</li>
<li>TCC模式——tcc-transaction、ByteTCC、EasyTransaction、SeaTa</li>
<li>SAGA模式——ServiceComb、Seata</li>
<li>LCN模式——tx-Icn</li>
</ul>
</li>
<li><p>任务调度</p>
<ul>
<li>Quartz</li>
<li>Elastic-Job</li>
</ul>
</li>
<li><p>链路追踪和监控</p>
<ul>
<li>Zipkin</li>
<li>Sleuth</li>
<li>Skywalking</li>
</ul>
</li>
<li><p>日志分析与监控——ELK</p>
<ul>
<li>ElasticSearch</li>
<li>Logstash</li>
<li>Kibana</li>
</ul>
</li>
</ul>
</li>
<li><p>虚拟化/容器化</p>
<ul>
<li>容器化——Docker</li>
<li>容器编排技术——Kubernetes、Swarm</li>
</ul>
</li>
</ul>
<h3 id="前端（了解）"><a href="#前端（了解）" class="headerlink" title="前端（了解）"></a>前端（了解）</h3><ul>
<li><p>基础套餐（大致了解，2-3天）</p>
<ul>
<li>三大件<ul>
<li>HTML</li>
<li>JavaScript</li>
<li>CSS</li>
</ul>
</li>
<li>基础库<ul>
<li>jQuery</li>
<li>Ajax</li>
</ul>
</li>
</ul>
</li>
<li><p>模板框架</p>
<ul>
<li>JSP/JSTL（已过时）</li>
<li>Thymeleaf</li>
<li>FreeMarker</li>
</ul>
</li>
<li><p>组件化框架</p>
<ul>
<li><p>Node</p>
</li>
<li><p>Vue</p>
</li>
<li><p>React</p>
</li>
<li><p>Angular</p>
</li>
</ul>
<hr>
</li>
</ul>
<h2 id="运维知识（配置）"><a href="#运维知识（配置）" class="headerlink" title="运维知识（配置）"></a>运维知识（配置）</h2><ul>
<li>Web服务器<ul>
<li>Nginx</li>
</ul>
</li>
<li>应用服务器<ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Undertow</li>
</ul>
</li>
<li>CDN加速</li>
<li>持续集成/持续部署<ul>
<li>Jenkins</li>
</ul>
</li>
<li>代码质量检查<ul>
<li>sonar</li>
</ul>
</li>
<li>日志收集和分析<ul>
<li>ELK</li>
</ul>
</li>
</ul>
<hr>
<h2 id="成神之路"><a href="#成神之路" class="headerlink" title="成神之路"></a>成神之路</h2><ul>
<li>徒手撕源码</li>
<li>光脚造轮子</li>
<li>闭着眼睛深度调优</li>
<li>吊打面试官</li>
</ul>
<h2 id="平稳降落"><a href="#平稳降落" class="headerlink" title="平稳降落"></a>平稳降落</h2><h2 id="路线图"><a href="#路线图" class="headerlink" title="路线图"></a>路线图</h2><p><img src="/blog/2020/05/09/JAVAdeveloproad/C:%5CUsers%5CCarey%5CDesktop%5CJava%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF-%E9%AB%98%E6%B8%85%E7%89%88.jpg" alt="路线图"></p>
]]></content>
  </entry>
  <entry>
    <title>注解</title>
    <url>/blog/2020/05/30/Annotation/</url>
    <content><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="1、注解"><a href="#1、注解" class="headerlink" title="1、注解"></a>1、注解</h3><h4 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h4><p>Annotation是从JDK5.0开始引入的新技术.</p>
<p>Annotation的作用：</p>
<ul>
<li>不是程序本身，可以对程序作出解释.（这一点和注释（comment）没什么区别）</li>
<li>==可以被其他程序（比如：编译器等）读取==</li>
</ul>
<p>Annotation的格式：</p>
<ul>
<li>注解是以“@注释名”在代码中存在的，还可以增加一些参数值，例如：@SuppressWarnings（value=”unchecked”）.</li>
</ul>
<p>Annotation在哪里使用？</p>
<ul>
<li>可以附加在package，class，method，field等上面，相当于给他们增加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</li>
</ul>
<p>2、</p>
]]></content>
  </entry>
  <entry>
    <title>HTML5学习</title>
    <url>/blog/2020/05/26/HTML5-study/</url>
    <content><![CDATA[<h3 id="1、初识HTML"><a href="#1、初识HTML" class="headerlink" title="1、初识HTML"></a>1、初识HTML</h3><p>HTML</p>
<ul>
<li>==H==yper ==T==ext ==M==arkup ==L==anguage(超文本==标记语言==)</li>
</ul>
<p>W3C</p>
<ul>
<li><p>==W==orld ==W==ide ==W==eb ==C==onsortium(万维网联盟)</p>
</li>
<li><p>成立于1994年，Web技术领域最权威和具影响力的国际==中立性技术标准机构==</p>
</li>
<li><p><a href="http://www.w3.org/" target="_blank" rel="noopener">http://www.w3.org/</a></p>
</li>
<li><p><a href="http://www.chinaw3c.org/" target="_blank" rel="noopener">http://www.chinaw3c.org/</a></p>
</li>
</ul>
<p>W3C标准包括</p>
<ul>
<li>==结构==化标准语言(HTML、XML)</li>
<li>==表现==标准语言(CSS)</li>
<li>==行为==标准(DOM、ECMAScript)</li>
</ul>
<p>基本信息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOCTYPE：告诉浏览器，我们要使用什么规范 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- head标签代表网页头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- meta描述性标签，它用来描述我们网站的一些信息--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- meta一般用来做SEO--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"carey的html笔记"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"来这个地方可以查看自己的html笔记"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- title网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- body标签代表网页主体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Hello，World！</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、网页的基本标签"><a href="#2、网页的基本标签" class="headerlink" title="2、网页的基本标签"></a>2、网页的基本标签</h3><p><strong>补充：IDEA中快捷键，标签名+Tab键</strong></p>
<h4 id="2-1、标题标签"><a href="#2-1、标题标签" class="headerlink" title="2.1、标题标签"></a>2.1、标题标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标签<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标签<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2、段落标签"><a href="#2-2、段落标签" class="headerlink" title="2.2、段落标签"></a>2.2、段落标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--段落标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两只老虎，两只老虎，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>跑得快，跑得快，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有耳朵，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>一只没有尾巴，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>真奇怪！真奇怪！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3、水平标签"><a href="#2-3、水平标签" class="headerlink" title="2.3、水平标签"></a>2.3、水平标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--水平线标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4、换行标签"><a href="#2-4、换行标签" class="headerlink" title="2.4、换行标签"></a>2.4、换行标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--换行标签--&gt;</span></span><br><span class="line">两只老虎，两只老虎，<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">跑得快，跑得快，<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">一只没有耳朵，<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">一只没有尾巴，<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">真奇怪！真奇怪！</span><br></pre></td></tr></table></figure>

<h4 id="2-5、粗体，斜体"><a href="#2-5、粗体，斜体" class="headerlink" title="2.5、粗体，斜体"></a>2.5、粗体，斜体</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--粗体，斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>字体样式标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">粗体：<span class="tag">&lt;<span class="name">strong</span>&gt;</span>i love you<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体：<span class="tag">&lt;<span class="name">em</span>&gt;</span>i love you<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-6、特殊符号"><a href="#2-6、特殊符号" class="headerlink" title="2.6、特殊符号"></a>2.6、特殊符号</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--特殊符号--&gt;</span></span><br><span class="line">空       格</span><br><span class="line">空 <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>  格</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">大于号：<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">小于号：<span class="symbol">&amp;lt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商标：<span class="symbol">&amp;copy;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、图像、超链接、网页布局"><a href="#3、图像、超链接、网页布局" class="headerlink" title="3、图像、超链接、网页布局"></a>3、图像、超链接、网页布局</h3><h4 id="3-1、图像标签"><a href="#3-1、图像标签" class="headerlink" title="3.1、图像标签"></a>3.1、图像标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--img学习</span></span><br><span class="line"><span class="comment">src：图片地址     (必填)</span></span><br><span class="line"><span class="comment">    相对地址(推荐使用) ， 绝对地址</span></span><br><span class="line"><span class="comment">    ../    --上一级目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">alt：图片名字(必填)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">title：鼠标悬停时候的文字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Edge的logo"</span> <span class="attr">title</span>=<span class="string">"悬停文字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2、超链接标签及其应用"><a href="#3-2、超链接标签及其应用" class="headerlink" title="3.2、超链接标签及其应用"></a>3.2、超链接标签及其应用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用name作为标记--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"top"</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--a标签</span></span><br><span class="line"><span class="comment">href：必填，表示要跳转到哪个页面</span></span><br><span class="line"><span class="comment">target：表示窗口在哪里打开</span></span><br><span class="line"><span class="comment">    _blank      在新标签中打开</span></span><br><span class="line"><span class="comment">    _self       在自己的网页中打开(默认)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"1.我的第一个网页.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>点击我跳转到页面一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>点击我跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"1.我的第一个网页.html"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Edge的logo"</span> <span class="attr">title</span>=<span class="string">"悬停文字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--锚链接</span></span><br><span class="line"><span class="comment">1.需要一个标记</span></span><br><span class="line"><span class="comment">2.跳转到标记</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"down"</span>&gt;</span>down<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--功能性链接</span></span><br><span class="line"><span class="comment">邮件链接：mailto</span></span><br><span class="line"><span class="comment">QQ链接：可以网上搜索qq推广登录后填写生成得到标签内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:64174@gmail.com"</span>&gt;</span>点击联系我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3、行内元素和块元素"><a href="#3-3、行内元素和块元素" class="headerlink" title="3.3、行内元素和块元素"></a>3.3、行内元素和块元素</h4><ul>
<li>块元素<ul>
<li>无论内容多少，该元素独占一行</li>
<li>(p、h1-h6…)</li>
</ul>
</li>
<li>行内元素<ul>
<li>内容撑开宽度，左右都是行内元素的可以排在一行</li>
<li>(a、strong、em…)</li>
</ul>
</li>
</ul>
<h3 id="4、列表、表单、媒体元素"><a href="#4、列表、表单、媒体元素" class="headerlink" title="4、列表、表单、媒体元素"></a>4、列表、表单、媒体元素</h3><h4 id="4-1、列表标签"><a href="#4-1、列表标签" class="headerlink" title="4.1、列表标签"></a>4.1、列表标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有序列表</span></span><br><span class="line"><span class="comment">应用范围：试卷，问答...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表</span></span><br><span class="line"><span class="comment">应用范围：导航，侧边栏...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>运维<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>C/C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义列表</span></span><br><span class="line"><span class="comment">dl：标签</span></span><br><span class="line"><span class="comment">dt：列表名称</span></span><br><span class="line"><span class="comment">dd：列表内容</span></span><br><span class="line"><span class="comment">应用范围：公司网站底部...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学科<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Linux<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>C<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>位置<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2、表格标签"><a href="#4-2、表格标签" class="headerlink" title="4.2、表格标签"></a>4.2、表格标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表格table</span></span><br><span class="line"><span class="comment">行   tr  rows</span></span><br><span class="line"><span class="comment">列   td</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--colspan 跨列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"4"</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--rowspan 跨行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3-3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-3、媒体元素"><a href="#4-3、媒体元素" class="headerlink" title="4.3、媒体元素"></a>4.3、媒体元素</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--音频和视频</span></span><br><span class="line"><span class="comment">src：资源路径</span></span><br><span class="line"><span class="comment">controls：控制条</span></span><br><span class="line"><span class="comment">autoplay：自动播放</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"../resources/video/IU.mp4"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"../resources/audio/寻.mp3"</span> <span class="attr">controls</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-4、页面结构分析"><a href="#4-4、页面结构分析" class="headerlink" title="4.4、页面结构分析"></a>4.4、页面结构分析</h4><table>
<thead>
<tr>
<th>元素名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>==header==</td>
<td>标题头部区域的内容(用于页面或页面中的一块区域)</td>
</tr>
<tr>
<td>==footer==</td>
<td>标记脚部区域的内容(用于整个页面或页面的一块区域)</td>
</tr>
<tr>
<td>==section==</td>
<td>Web页面中的一块独立区域</td>
</tr>
<tr>
<td>article</td>
<td>独立的文章内容</td>
</tr>
<tr>
<td>aside</td>
<td>相关内容或应用(常用语侧边栏)</td>
</tr>
<tr>
<td>==nav==</td>
<td>导航类辅助内容</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-5、iframe内联框架"><a href="#4-5、iframe内联框架" class="headerlink" title="4.5、iframe内联框架"></a>4.5、iframe内联框架</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--iframe内联框架</span></span><br><span class="line"><span class="comment">src：地址</span></span><br><span class="line"><span class="comment">height：高度</span></span><br><span class="line"><span class="comment">width：宽度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"1000px"</span> <span class="attr">height</span>=<span class="string">"800px"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;iframe src="//player.bilibili.com/player.html?aid=200851300&amp;bvid=BV1fz411v77D&amp;cid=194041796&amp;page=1"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/iframe&gt;--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、表单及其表单应用"><a href="#5、表单及其表单应用" class="headerlink" title="5、表单及其表单应用"></a>5、表单及其表单应用</h3><h4 id="5-1、初识表单post和get提交"><a href="#5-1、初识表单post和get提交" class="headerlink" title="5.1、初识表单post和get提交"></a>5.1、初识表单post和get提交</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action：表单提交的位置，可以是网站，也可以是一个请求处理地址</span></span><br><span class="line"><span class="comment">method：post，get  提交方式</span></span><br><span class="line"><span class="comment">        get：我们可以在url中看到我们提交的信息，不安全，高效。</span></span><br><span class="line"><span class="comment">        post：比较安全，传输大文件。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"1.我的第一个网页.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文本输入框：input type="text"</span></span><br><span class="line"><span class="comment">    value="carey帅"    默认初始值</span></span><br><span class="line"><span class="comment">    maxlength="8"     最长能写几个字符</span></span><br><span class="line"><span class="comment">    size="30"           文本框长度</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--密码框：input type="password"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2、文本框和单选框"><a href="#5-2、文本框和单选框" class="headerlink" title="5.2、文本框和单选框"></a>5.2、文本框和单选框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单选框标签</span></span><br><span class="line"><span class="comment">input type="radio"</span></span><br><span class="line"><span class="comment">value  ：单选框的值</span></span><br><span class="line"><span class="comment">name   ：表示组</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"boy"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"girl"</span> <span class="attr">name</span>=<span class="string">"sex"</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3、按钮和多选框"><a href="#5-3、按钮和多选框" class="headerlink" title="5.3、按钮和多选框"></a>5.3、按钮和多选框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多选框</span></span><br><span class="line"><span class="comment">input type="checkbox"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"sleep"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>睡觉</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"code"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">checked</span>&gt;</span>敲代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"chat"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>聊天</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"game"</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span>游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--按钮</span></span><br><span class="line"><span class="comment">input type="button"     普通按钮</span></span><br><span class="line"><span class="comment">input type="image"      图像按钮</span></span><br><span class="line"><span class="comment">input type="submit"     提交按钮</span></span><br><span class="line"><span class="comment">input type="reset"      重置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按钮：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"点击变长"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"../resources/image/1.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空表单"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-4、列表框文本域和文件域"><a href="#5-4、列表框文本域和文件域" class="headerlink" title="5.4、列表框文本域和文件域"></a>5.4、列表框文本域和文件域</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文本域</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>反馈：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"textarea"</span> <span class="attr">cols</span>=<span class="string">"50"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文件域</span></span><br><span class="line"><span class="comment">input type="file" name="files"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上传"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-5、搜索框滑块和简单验证"><a href="#5-5、搜索框滑块和简单验证" class="headerlink" title="5.5、搜索框滑块和简单验证"></a>5.5、搜索框滑块和简单验证</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮件验证--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--URL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>URL：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>商品数量：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"num"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">step</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--滑块</span></span><br><span class="line"><span class="comment">nput type="range"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>音量：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"voice"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">step</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>搜索：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-6、表单的应用"><a href="#5-6、表单的应用" class="headerlink" title="5.6、表单的应用"></a>5.6、表单的应用</h4><ul>
<li>隐藏域    hidden</li>
<li>只读        readonly</li>
<li>禁用        disabled</li>
</ul>
<h3 id="6、表单的初级验证"><a href="#6、表单的初级验证" class="headerlink" title="6、表单的初级验证"></a>6、表单的初级验证</h3><p>常用方式</p>
<ul>
<li>placeholder    提示信息</li>
<li>required          非空判断</li>
<li>pattern             正则表达式</li>
</ul>
<p>常用正则表达式建议上网查找</p>
<h3 id="7、HTML总结"><a href="#7、HTML总结" class="headerlink" title="7、HTML总结"></a>7、HTML总结</h3><p><img src="/blog/2020/05/26/HTML5-study/HTML%E6%80%BB%E7%BB%93.jpg" alt="HTML总结"></p>
]]></content>
  </entry>
  <entry>
    <title>操作系统5.1</title>
    <url>/blog/2020/05/23/OSfifthone/</url>
    <content><![CDATA[<h2 id="5-1-1、-I-O设备的基本概念与分类"><a href="#5-1-1、-I-O设备的基本概念与分类" class="headerlink" title="5.1.1、 I/O设备的基本概念与分类"></a>5.1.1、 I/O设备的基本概念与分类</h2><h3 id="什么是I-O设备"><a href="#什么是I-O设备" class="headerlink" title="什么是I/O设备"></a>什么是I/O设备</h3><ul>
<li>将数据Input/Output(输入/输出)计算机的外部设备</li>
</ul>
<h3 id="按使用特性分类"><a href="#按使用特性分类" class="headerlink" title="按使用特性分类"></a>按使用特性分类</h3><ul>
<li>人机交互类外部设备</li>
<li>存储设备</li>
<li>网络通信设备</li>
</ul>
<h3 id="按传输速率分类"><a href="#按传输速率分类" class="headerlink" title="按传输速率分类"></a>按传输速率分类</h3><ul>
<li>低速设备</li>
<li>中速设备</li>
<li>高速设备</li>
</ul>
<h3 id="按信息交换的单位分类"><a href="#按信息交换的单位分类" class="headerlink" title="按信息交换的单位分类"></a>按信息交换的单位分类</h3><ul>
<li>块设备（传输快，可寻址）</li>
<li>字符设备（传输满，不可寻址，常采用==中断驱动方式==）</li>
</ul>
<h2 id="5-1-2、I-O控制器"><a href="#5-1-2、I-O控制器" class="headerlink" title="5.1.2、I/O控制器"></a>5.1.2、I/O控制器</h2><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li>接受和识别CPU发出的命令（要有控制寄存器）</li>
<li>向CPU报告设备的状态（要有状态寄存器）</li>
<li>数据交换（要有数据寄存器，暂存输入/输出的数据）</li>
<li>地址识别（由I/O逻辑实现）</li>
</ul>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul>
<li>CPU与控制器之间的接口（实现控制器与CPU之间的通信）</li>
<li>I/O逻辑（负责识别CPU发出的命令，并向设备发出命令）</li>
<li>控制器与设备之间的接口（实现控制器与设备之间的通信）</li>
</ul>
<h3 id="两种寄存器编址方式"><a href="#两种寄存器编址方式" class="headerlink" title="两种寄存器编址方式"></a>两种寄存器编址方式</h3><ul>
<li>内存映射I/O<ul>
<li>控制器中的寄存器与内存统一编制</li>
<li>可以采用对内存进行操作的指令来对控制器进行操作</li>
</ul>
</li>
<li>寄存器独立编制<ul>
<li>控制器中的寄存器独立编制</li>
<li>需要设置专门的指令来操作控制器</li>
</ul>
</li>
</ul>
<h2 id="5-1-3、IO控制方式"><a href="#5-1-3、IO控制方式" class="headerlink" title="5.1.3、IO控制方式"></a>5.1.3、IO控制方式</h2><p><img src="/blog/2020/05/23/OSfifthone/IO%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F.png" alt="image-20200524105920314"></p>
<h2 id="5-1-4、IO软件层次结构"><a href="#5-1-4、IO软件层次结构" class="headerlink" title="5.1.4、IO软件层次结构"></a>5.1.4、IO软件层次结构</h2><p><img src="/blog/2020/05/23/OSfifthone/IO%E8%BD%AF%E4%BB%B6%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="image-20200524110859626"></p>
<p><img src="/blog/2020/05/23/OSfifthone/IO%E8%BD%AF%E4%BB%B6%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E8%A1%A5%E5%85%85.png" alt="image-20200524110932162"></p>
<h2 id="5-1-5、IO核心子系统"><a href="#5-1-5、IO核心子系统" class="headerlink" title="5.1.5、IO核心子系统"></a>5.1.5、IO核心子系统</h2><p><img src="/blog/2020/05/23/OSfifthone/IO%E6%A0%B8%E5%BF%83%E5%AD%90%E7%B3%BB%E7%BB%9F.png" alt="image-20200524111344364"></p>
<h2 id="5-1-6、假脱机技术-SPOOLing技术"><a href="#5-1-6、假脱机技术-SPOOLing技术" class="headerlink" title="5.1.6、假脱机技术/SPOOLing技术"></a>5.1.6、假脱机技术/SPOOLing技术</h2><h3 id="脱机技术"><a href="#脱机技术" class="headerlink" title="脱机技术"></a>脱机技术</h3><ul>
<li>外围控制机+更高速的设备——-磁带</li>
<li>作用：缓解设备与CPU的速度矛盾，实现预输入、缓输出</li>
</ul>
<h3 id="假脱机技术"><a href="#假脱机技术" class="headerlink" title="假脱机技术"></a>假脱机技术</h3><ul>
<li>又叫SPOOLing技术，用软件的方式模拟脱机技术</li>
<li>输入井和输出井—–模拟脱机输入/输出时的磁带</li>
<li>输入进程和输出进程——模拟脱机输入/输出时的外围控制机</li>
<li>输入缓冲区和输出缓冲区——内存中的缓冲区，输入、输出时的“中转站”</li>
</ul>
<h3 id="共享打印机"><a href="#共享打印机" class="headerlink" title="共享打印机"></a>共享打印机</h3><p>用SPOOLing技术将独占式打印机“虚拟”成共享打印机</p>
<h2 id="5-1-7、设备的分配与回收"><a href="#5-1-7、设备的分配与回收" class="headerlink" title="5.1.7、设备的分配与回收"></a>5.1.7、设备的分配与回收</h2><p><img src="/blog/2020/05/23/OSfifthone/%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6.png" alt="image-20200524113435733"></p>
<h2 id="5-1-8、缓冲区管理"><a href="#5-1-8、缓冲区管理" class="headerlink" title="5.1.8、缓冲区管理"></a>5.1.8、缓冲区管理</h2><p><img src="/blog/2020/05/23/OSfifthone/%E7%BC%93%E5%86%B2%E5%8C%BA%E7%AE%A1%E7%90%86.png" alt="image-20200524140636556"></p>
]]></content>
  </entry>
  <entry>
    <title>Linux学习</title>
    <url>/blog/2020/05/09/Linux-study/</url>
    <content><![CDATA[<p>@<a href="Linux系统">TOC</a></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>打开命令行：Ctrl+Alt+T<br>自动补齐：输入前几个字符后+Tab键（只需输入文件或目录名的前几个字符，然后按TAB键，如无相重的，完整的文件名百立即自动在命令行出现；如有相重的，再按一下TAB键，系统会列出当前度目录下所有以这几个字符开头的名字）<br>方向键↑： 取上一个命令<br>方向键↓： 取下一个命令<br>终止命令：Ctirl +C</p>
<h2 id="Linux中文件颜色所代表的属性和颜色"><a href="#Linux中文件颜色所代表的属性和颜色" class="headerlink" title="Linux中文件颜色所代表的属性和颜色"></a>Linux中文件颜色所代表的属性和颜色</h2><p>蓝色：目录<br>白色文件：一般性文件，如文本文件，配置文件，源码文件等 </p>
<h2 id="Linux命令："><a href="#Linux命令：" class="headerlink" title="Linux命令："></a>Linux命令：</h2><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>用于显示工作目录，执行pwd指令可立刻得知您目前所在的工作目录的绝对路径名称。</p>
<h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。<br>ls ：多列显示输出结果；<br>ls -C：多列显示输出结果。这是默认选项；<br>ls -l：与“-C”选项功能相反，所有输出信息用单列格式输出，不输出为多列；   可以用ll进行简单表示，但会多一条本级目录和上级目录<br>ls -a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为影藏，不会列出）；</p>
<h4 id="ls-通配符使用"><a href="#ls-通配符使用" class="headerlink" title="ls 通配符使用"></a>ls 通配符使用</h4><p>*            代表任意个数个字符<br>？          代表1个字符<br>[ ]            表示可以匹配字符组中的任意一个<br>[abc]    匹配a、b、c中的任意一个<br>[a-f]        匹配从a到f范围内的任意一个字符</p>
<h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><p>用于切换当前工作目录至 dirName(目录参数)。                打开文件夹<br>cd ..  返回上一级目录<br>cd .   当前目录<br>cd ~  进入用户主目录<br>cd     进入用户主目录<br>cd -   返回进入此目录之前所在的目录(切换最近的两个目录来回切换)                           </p>
<h3 id="clear命令"><a href="#clear命令" class="headerlink" title="clear命令"></a>clear命令</h3><p>用于清除当前屏幕终端上的任何信息</p>
<h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p>一是用来创建新的空文件；二是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来</p>
<h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><p>用来创建目录</p>
<h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><p>可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。<br>rm -r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；</p>
<h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><p>用来为文件或目录改名、或将文件或目录移入其它位置</p>
<h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><p>主要用于复制文件或目录</p>
<h3 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h3><p>命令 –help       或 man 命令(q退出，b上一页，空格下一页)</p>
<h3 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h3><p>用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。<br>which cd 为空，因为cd是shell内置的命令</p>
<h3 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h3><p>/bin：bin是Binary的缩写, 这个目录存放着最经常使用的命令。<br>/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。<br>/usr/bin：系统用户使用的应用程序。<br>/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。</p>
<h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p>用来在指定目录下查找文件。<br>find 搜索范围 搜索条件<br>示例一：find /home -name 123<br>//精确搜索<br>示例二：find /home -name 123*                 //模糊搜索 其他用法：*123* 123？？<br>示例三：find /home -iname abc               //选项-i 不区分大小写<br>示例四：find /home -size +204800            //根据文件大小搜索，1数据块=512字节Byte=0.5KB(加号表示大于该数据块)<br>                                          -204800        //204800=00MB 100<em>1024KB 100</em>1024<em>2</em>数据块(减号表示小于该数据块)<br>示例五：find /home -user carey             //在home路径下搜索用户名为carey的文件<br>示例六：find /home -mmin -5                //文件内容上次被修改时间在5分钟以内<br>                                                                mmin上次文件内容被修改时间<br>                                                                amin 上次文件被访问时间<br>                                                                cmin 上次文件属性（文件的权限）被修改时间<br>                                                                -5 5分钟以内 +5超过5分钟<br>示例七：find /home -type f                    //-type文件类型  ( f:文件 d:目录（文件夹）l:软链接文件（Link）)<br>                                                                ———-条件链接<br>                                                                -a and同时满足             -o or或者，满足其中一个即可<br>示例八：find /home -name 123 -a -size +5<br>示例九：ls -i                                            //列出带id的文件<br>              find /home -inum 3434              //在home路径下搜索id为3434的文件</p>
<h3 id="locate-slocate命令"><a href="#locate-slocate命令" class="headerlink" title="locate/slocate命令"></a>locate/slocate命令</h3><p>用来查找文件或目录。其实是find -name的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库/var/lib/locatedb，这个数据库中含有本地所有文件信息。<br>优点：查找快<br>缺点：最新文件找不到（需要时间更新索引库）</p>
<h3 id="updatedb命令"><a href="#updatedb命令" class="headerlink" title="updatedb命令"></a>updatedb命令</h3><p>用来创建或更新slocate命令所必需的数据库文件。<br>sudo updatedb                         //updatedb命令前面加sudo表示通过管理员方式运行</p>
<h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><p>用来查看文件内容<br>cat xx.txt             显示所有文件内容<br>cat -b xx.txt           显示行号，对于空白行不编号<br>cat -n xx.txt          显示行号，包含空白行编号</p>
<h3 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h3><p>类似cat，不过分页显示文件内容<br>more xx.txt                                    （下一页（空格） 上一页（b） 下一行（Enter））</p>
<h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p>搜索文件内容<br>grep xx xxx.txt<br>grep -n xx xx.txt         显示包含内容行的行号<br>grep -v xx xx.txt         去掉包含内容的行，显示其他所有内容<br>grep -v # xx.txt         去掉带#的行（去掉带注释的行） ‘#’<br>grep -v ^# xx.txt         去掉只有注释的行               ^x       以x开头的行<br>grep #$ xx.txt                                                          x$   以x结尾的行<br>grep -i xx xx.txt         忽略大小写搜索</p>
<h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p>用于字符串的输出<br>echo xxx<br>echo xxx &gt; xx.txt                 写入（覆盖）<br>echo xxx &gt;&gt; xx.txt                 追加（末尾）</p>
<p>ls &gt; xx.txt                            把ls显示的内容写入(覆盖)到xx.txt中<br>ls &gt;&gt; xx.txt                           把ls显示的内容追加到xx.txt中</p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>把一个命令的输出 通过管道连接 作为另一个命令的输入<br>输出就是命令的结果，输入一般是一个命令的参数，管道连接通过 | 建立。      </p>
<h3 id="文件软链接"><a href="#文件软链接" class="headerlink" title="文件软链接"></a>文件软链接</h3><p>ln -s 源文件 目标文件</p>
<h3 id="用户添加"><a href="#用户添加" class="headerlink" title="用户添加"></a>用户添加</h3><p>第一步：添加用户名<br>useradd xx                (sudo useradd xx)        （-m：创建家目录 和 -g：指定所在的组 选项）<br>第二步：设置密码(不设置用户名的用户是不能使用的)（注意是passwd不是password）<br>passwd xx                （sudo passwd xx）<br>passwd 给自己设置密码</p>
<h3 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h3><p>以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。<br>使用权限：在 /etc/sudoers 中有出现的使用者。用户使用sudo时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。</p>
<h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>每个用户都有一个初始组，可以有零个或者多个附加组。用户组的作用，是为了方便权限控制。（附加组<br>就是为了给用户附加别的权限）<br>当创建用户的时候，系统会创建一个跟用户名同名的组。<br>文件属性：所属用户、所属用户组</p>
<h3 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h3><p>su xx                           用户切换<br>su - xx                     用户切换，并回到家目录<br>切换到root用户:  1、 su       2、  su -<br>使用 su 命令时，有 - 和没有 - 是完全不同的，- 选项表示在切换用户身份的同时，连当前使用的环境变量也切换成指定用户的。我们知道，环境变量是用来定义操作系统环境的，因此如果系统环境没有随用户身份切换，很多命令无法正确执行。<br>exit 退出当前用户，返回上一个用户（从哪个用户切换过来的）如果没有上一个用户，直接退出终端</p>
<h3 id="用户删除"><a href="#用户删除" class="headerlink" title="用户删除"></a>用户删除</h3><p>userdel xx<br>userdel -r xx         删除家目录<br>userdel -f xx        强制删除，即使用户正在登陆系统</p>
<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>groupadd xx                             添加<br>            cat /etc/group 确认组是否被添加成功<br>goupmod -n newxx oldxx            改名<br>groupdel xx                                删除</p>
<h3 id="Linux中的ID"><a href="#Linux中的ID" class="headerlink" title="Linux中的ID"></a>Linux中的ID</h3><p>文件id uid gid<br>ls -i            查看文件id<br>id                查看当前用户的uid和gid<br>id xx            查看xx用户的uid和gid</p>
<h3 id="关于配置文件"><a href="#关于配置文件" class="headerlink" title="关于配置文件"></a>关于配置文件</h3><p>/etc/passwd         配置当前系统有哪些用户，以及用户的密码（密码在影子文件里面，passwd的影子文件）<br>1，用户名<br>2，密码标志<br>3，UID<br>4，GID<br>5，用户全名<br>6，家目录<br>7，使用的shell</p>
<h4 id="什么是shell-（我们的命令-cd-ls-…）"><a href="#什么是shell-（我们的命令-cd-ls-…）" class="headerlink" title="什么是shell?（我们的命令 cd ls …）"></a>什么是shell?（我们的命令 cd ls …）</h4><p>shell是用来解析命令的，它接收用户命令，然后调用相应的程序执行。shell相当于一个翻译，翻译我们的命令，让机器听懂。<br>第一种shell：/bin/bash                    翻译一号<br>第二种shell：/usr/sbin/nologin        翻译二号<br>第三种shell：/bin/sh                        翻译三号（我们创建用户的时候的shell）<br>cat /etc/shells                    查看所有的shell<br>chsh                                更换shell<br>/etc/group                配置当前系统有哪些用户组<br>                                                                                1，组名<br>                                                                                2，组密码标志<br>                                                                                3，GID<br>                                                                                4，组中附加用户<br>which cd？<br>1，为什么没有命令文件<br>因为cd这个命令是放在shell（bash里面的）<br>2，什么是内置命令（cd dirs ls）<br>内置命令在系统启动时就调入内存，是常驻内存的，所以执行效率高。<br>而外部命令是系统的软件功能，用户需要时才从硬盘中读入内存。<br>大部分内置命令都是内置在shell中的，也有一些内置命令有自己单独的文件。<br>系统启动，会把shell中的内置命令，其他其他不在shell中的内置命令加载到内存中。</p>
<h3 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h3><p>id<br>whoami         当前登录用户<br>who                当前所有登录用户罗列出来</p>
<h3 id="修改用户信息（usermod）（某些需要重新登录生效）"><a href="#修改用户信息（usermod）（某些需要重新登录生效）" class="headerlink" title="修改用户信息（usermod）（某些需要重新登录生效）"></a>修改用户信息（usermod）（某些需要重新登录生效）</h3><p>usermod -g xxgroup xxuser                        修改初始组（基本不去修改）<br>usermod -G xxgroup,xxgroup xxuser             修改附加组<br>usermod -s /bin/bash xxuser                        修改shell</p>
<h3 id="用户权限（文件对用户来说的权限，用户操作文件或者文件夹的权限）"><a href="#用户权限（文件对用户来说的权限，用户操作文件或者文件夹的权限）" class="headerlink" title="用户权限（文件对用户来说的权限，用户操作文件或者文件夹的权限）"></a>用户权限（文件对用户来说的权限，用户操作文件或者文件夹的权限）</h3><p>u g o</p>
<hr>
<p>a表示文件类型 -二进制文件（包括不限于文本文件） d目录（文件夹） l（软连接文件）<br>后面表示这个文件的权限<br>u（user）所有者            g（group）所属组         o（other）其他用户<br>r读写 w写 x执行</p>
<h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><p>windows下的是exe（批处理命令或者说批处理脚本），一般用来启动某个应用程序的<br>linux下的shell脚本（或者类型的脚本），一般用来启动某个应用程序或者服务程序</p>
<h3 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h3><p>只有文件所有者和超管可以修改文件的权限<br>chmod change the permissions mode of file<br>格式一<br>            chmod [ugoa][+-=][rwx] 文件或者目录<br>            chmod u+w,g+x xx.txt<br>格式二<br>            用数字表示权限 r=4 w=2 x=1<br>            r–rw-rwx            467<br>            651                rw-r-x–x<br>            chmod 651 xxfile<br>            chmod -R 777 xxfile 修改文件包括文件的所有子文件<br>chmod                                 修改文件权限<br>chown(change owner)            修改拥有者（所属者）<br>chgrp(change group)            修改拥有组（所属组）<br>            文件是所属者和所属组发生改变，用户对文件的权限也发生改变<br>chown newuser 文件/文件夹                        修改文件或者文件夹的拥有者<br>chgrp newgroupname 文件/文件夹                修改文件或者文件夹的所属组<br>-R 递归修改所有子文件</p>
]]></content>
  </entry>
  <entry>
    <title>操作系统概述</title>
    <url>/blog/2020/05/10/OSfirst/</url>
    <content><![CDATA[<h2 id="操作系统的概念（定义）"><a href="#操作系统的概念（定义）" class="headerlink" title="操作系统的概念（定义）"></a>操作系统的概念（定义）</h2><p>操作系统（Operating System， OS）是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配；以提供给用户和其他软件方便的接口和环境；它是计算机系统中最基本的系统软件。</p>
<hr>
<h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><ul>
<li>并发：指两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。<br>易混淆考点–并行：指两个或多个事件在同一时刻同时发生。</li>
<li>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。<ul>
<li>互斥共享方式(如对摄像头设备的共享使用)</li>
<li>同时共享方式(如对磁盘自由的共享使用)</li>
</ul>
</li>
<li>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者）是用户感受到的。<ul>
<li>空分复用技术(如虚拟存储器)</li>
<li>时分复用技术(如虚拟处理器)</li>
</ul>
</li>
<li>异步是指在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</li>
</ul>
<hr>
<h2 id="OS的发展与分类"><a href="#OS的发展与分类" class="headerlink" title="OS的发展与分类"></a>OS的发展与分类</h2><h3 id="手工操作系统"><a href="#手工操作系统" class="headerlink" title="手工操作系统"></a>手工操作系统</h3><h3 id="批处理阶段"><a href="#批处理阶段" class="headerlink" title="批处理阶段"></a>批处理阶段</h3><ul>
<li>单道批处理系统<br>引入脱机输入/输出技术（用外围机+磁带完成），并由监督程序负责控制作业的输入、输出<br>缺点：内存中仅能有一道程序运行, CPU有大量的时间是在空闲等待I/O完成</li>
<li>多道批处理系统(操作系统开始出现)<br>优点：多道程序并发执行，共享计算机资源。资源利用率大幅提升<br>缺点：没有人机交互功能</li>
</ul>
<h3 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h3><p>计算机以时间片为单位轮流为各个用户/作业服务<br>优点：解决了人机交互问题<br>缺点：不能优先处理一些紧急任务</p>
<h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>要在严格的时限内处理完事件，具有及时性和可靠性</p>
<ul>
<li><p>硬实时系统  必须在绝对严格的规定时间内完成处理    如导弹控制系统</p>
</li>
<li><p>软实时系统     能接受偶尔违反时间规定              如12306火车订票系统</p>
</li>
</ul>
<h3 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h3><p>实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信</p>
<h3 id="分布式操作系统"><a href="#分布式操作系统" class="headerlink" title="分布式操作系统"></a>分布式操作系统</h3><p>分布性和并行性<br>任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务</p>
<h3 id="个人计算机操作系统"><a href="#个人计算机操作系统" class="headerlink" title="个人计算机操作系统"></a>个人计算机操作系统</h3><hr>
<h2 id="OS的运行机制和体系结构"><a href="#OS的运行机制和体系结构" class="headerlink" title="OS的运行机制和体系结构"></a>OS的运行机制和体系结构</h2><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><ul>
<li>两种指令<ul>
<li>特权指令                只能在核心态下执行</li>
<li>非特权指令</li>
</ul>
</li>
<li>两种处理器状态                   <ul>
<li>核心态</li>
<li>用户态</li>
</ul>
</li>
<li>两种程序<ul>
<li>内核程序         只能在核心态下执行</li>
<li>应用程序</li>
</ul>
</li>
</ul>
<h3 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h3><ul>
<li>时钟管理</li>
<li>中断处理</li>
<li>原语   —-  是一种特殊的程序，其执行具有原子性</li>
<li>对系统资源进行管理的功能<ul>
<li>进程管理</li>
<li>存储器管理</li>
<li>设备管理</li>
</ul>
</li>
<li>操作系统的体系结构<ul>
<li>大内核<ul>
<li>优点：高性能</li>
<li>缺点：内核代码庞大，结构混乱，难以维护</li>
</ul>
</li>
<li>微内核<ul>
<li>优点：内核功能少，结构清晰，方便维护</li>
<li>缺点：需要频繁地在核心态和用户态之间切换，性能低</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><h3 id="中断机制的诞生"><a href="#中断机制的诞生" class="headerlink" title="中断机制的诞生"></a>中断机制的诞生</h3><p>为了实现多道程序并发执行而引入的技术</p>
<h3 id="中断的概念和作用"><a href="#中断的概念和作用" class="headerlink" title="中断的概念和作用"></a>中断的概念和作用</h3><ul>
<li>发生中断，就意味着需要操作系统介入开展管理工作，CPU会立即进入核心态</li>
<li>“中断”是CPU从用户态进入核心态的唯一途径<br>“用户态-&gt;核心态”是通过中断实现的，并且中断是唯一途径<br>“核心态-&gt;用户态”：执行一条特权指令——修改PSW的标志位为“用户态”</li>
</ul>
<h3 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h3><h4 id="内中断-也称异常、例外、陷入"><a href="#内中断-也称异常、例外、陷入" class="headerlink" title="内中断(也称异常、例外、陷入)"></a>内中断(也称异常、例外、陷入)</h4><ul>
<li>自愿中断—指令中断</li>
<li>强迫中断<ul>
<li>硬件故障</li>
<li>软中断</li>
</ul>
</li>
</ul>
<h4 id="外中断-中断"><a href="#外中断-中断" class="headerlink" title="外中断(中断)"></a>外中断(中断)</h4><ul>
<li>外设请求</li>
<li>人工干预</li>
</ul>
<h4 id="补充：内中断的另一种分类方式"><a href="#补充：内中断的另一种分类方式" class="headerlink" title="补充：内中断的另一种分类方式"></a>补充：内中断的另一种分类方式</h4><ul>
<li>陷阱、陷入(trap)</li>
<li>故障(fault)</li>
<li>终止(abort)</li>
</ul>
<h4 id="外中断的处理过程"><a href="#外中断的处理过程" class="headerlink" title="外中断的处理过程"></a>外中断的处理过程</h4><ul>
<li>每条指令执行结束后，CPU检查是否有外部中断信号</li>
<li>若有外部中断信号，则需要保护被中断进程的CPU环境</li>
<li>根据中断信号类型转入相应的中断处理程序</li>
<li>恢复原进程的CPU环境并退出中断，返回原进程继续往下执行</li>
</ul>
<hr>
<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><h3 id="什么是系统调用，有何作用"><a href="#什么是系统调用，有何作用" class="headerlink" title="什么是系统调用，有何作用"></a>什么是系统调用，有何作用</h3><ul>
<li>操作系统提供给应用程序使用的接口</li>
<li>应用程序通过系统调用来请求获得操作系统的服务</li>
<li>系统调用会使处理器从用户态进入核心态</li>
<li>分类<ul>
<li>设备管理</li>
<li>文件管理</li>
<li>进程控制</li>
<li>进程通信</li>
<li>内存管理</li>
</ul>
</li>
</ul>
<p>凡是与资源有关的操作、会直接影响到其他进程的操作，一定需要操作系统介入，即需要通过系统调用来实现</p>
<h3 id="系统调用和库函数的区别"><a href="#系统调用和库函数的区别" class="headerlink" title="系统调用和库函数的区别"></a>系统调用和库函数的区别</h3><ul>
<li>系统调用是操作系统向上层提供的接口</li>
<li>有的库函数是对系统调用的进一步封装</li>
<li>当今编写的应用程序大多是通过高级语言提供的库函数间接地进行系统调用</li>
</ul>
<h3 id="系统调用背后的过程"><a href="#系统调用背后的过程" class="headerlink" title="系统调用背后的过程"></a>系统调用背后的过程</h3><p>1.传递系统调用参数<br>2.执行陷入指令<br>3.执行系统调用相应服务程序<br>4.返回用户程序</p>
<p>系统调用发送在用户态，对系统调用的处理发送在核心态<br>执行陷入指令会产生内中断，使处理器从用户态进入核心态</p>
]]></content>
  </entry>
  <entry>
    <title>操作系统4.1</title>
    <url>/blog/2020/05/20/OSfourthone/</url>
    <content><![CDATA[<h2 id="4-1-1、初识文件管理"><a href="#4-1-1、初识文件管理" class="headerlink" title="4.1.1、初识文件管理"></a>4.1.1、初识文件管理</h2><ul>
<li>文件的定义：一组有意义的信息的集合</li>
<li>文件的属性：文件名、标识符、类型、位置、大小、保护信息…</li>
<li>文件内部应该如何被组织起来（文件的逻辑结构）</li>
<li>文件之间应该如何被组织起来（目录结构）</li>
<li>操作系统应向上提供哪些功能（create、delete、open、close、read、write系统调用）</li>
<li>文件应如何存放在外存中（文件的物理结构）</li>
<li>操作系统如何管理外存中的空闲块（存储空间的管理）</li>
<li>操作系统需要提供的其他文件管理功能<ul>
<li>文件共享</li>
<li>文件保护</li>
</ul>
</li>
</ul>
<h2 id="4-1-2、文件的逻辑结构"><a href="#4-1-2、文件的逻辑结构" class="headerlink" title="4.1.2、文件的逻辑结构"></a>4.1.2、文件的逻辑结构</h2><h3 id="无结构文件"><a href="#无结构文件" class="headerlink" title="无结构文件"></a>无结构文件</h3><ul>
<li>由二进制流或字符流组成，无明显的逻辑结构</li>
</ul>
<h3 id="有结构文件"><a href="#有结构文件" class="headerlink" title="有结构文件"></a>有结构文件</h3><ul>
<li>由记录组成，分为定长记录、可变长记录</li>
<li>逻辑机构<ul>
<li>顺序文件<ul>
<li>串结构：记录顺序与关键字无关</li>
<li>顺序结构：记录按关键字顺序排列</li>
<li>==可变长记录的顺序文件无法实现随机存取，定长记录可以==</li>
<li>==定长记录、顺序结构的顺序文件可以快速检索（根据关键字快速找到记录）==</li>
<li>最大缺点：不方便添加/删除    记录</li>
</ul>
</li>
<li>索引文件<ul>
<li>建立一张索引表，每个记录对应一个表项。各记录不用保持顺序，方便添加/删除记录</li>
<li>==索引表本身就是定长记录的顺序文件==，一个索引表项就是一条定长记录，因此索引文件可支持随机存取</li>
<li>==若索引表按关键字顺序排列，则可支持快速检索==</li>
<li>解决了顺序文件不方便增/删记录的问题，同时让不定长记录的文件实现了随机存取。但索引表可能占用很多空间</li>
</ul>
</li>
<li>索引顺序文件<ul>
<li>将记录分组，每组对应一个索引表项</li>
<li>检索记录时先顺序查索引表，找到分组，再顺序查找分组</li>
<li>当记录过多时，可建立多级索引表</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-1-3、文件目录"><a href="#4-1-3、文件目录" class="headerlink" title="4.1.3、文件目录"></a>4.1.3、文件目录</h2><h3 id="文件目录的实现"><a href="#文件目录的实现" class="headerlink" title="文件目录的实现"></a>文件目录的实现</h3><ul>
<li>==一个文件对应一个FCB，一个FCB就是一个目录项，多个FCB组成文件目录==</li>
<li>对目录的操作：搜索、创建文件、删除文件、显示文件、修改文件</li>
</ul>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul>
<li>单级目录结构<ul>
<li>一个系统只有一张目录表，==不允许文件重名==</li>
</ul>
</li>
<li>两级目录结构<ul>
<li>不同用户的文件可以重名，但==不能对文件进行分类==</li>
</ul>
</li>
<li>多级（树形）目录结构<ul>
<li>不同目录下的文件可以重名，可以对文件进行分类，==不方便文件共享==</li>
<li>系统根据“文件路径”找到目标文件</li>
<li>从根目录出发的路径是“==绝对路径==”（“/照片/2015-08/自拍.jpg”）</li>
<li>从“==当前目录==”出发的路径是“==相对路径==”（“/照片/2015-08/自拍.jpg”）</li>
</ul>
</li>
<li>无环图目录结构<ul>
<li>在树形目录结构的基础上，增加一些指向同一节点的有向边，使整个目录成为一个有向无环图</li>
<li>为共享节点设置一个共享计数器，==计数器为0时才真正删除该节点==</li>
</ul>
</li>
</ul>
<h3 id="索引结点"><a href="#索引结点" class="headerlink" title="索引结点"></a>索引结点</h3><ul>
<li>除了文件名之外的所有信息都放到索引结点中，每个文件对应一个索引结点</li>
<li>目录项中只包含文件名、索引结点指针，因此每个目录项的长度大幅减小</li>
<li>由于目录项长度减小，因此每个磁盘可以存放更多个目录项，因此检索文件时磁盘I/O的次数就少了很多</li>
</ul>
<h2 id="4-1-4、文件的物理结构"><a href="#4-1-4、文件的物理结构" class="headerlink" title="4.1.4、文件的物理结构"></a>4.1.4、文件的物理结构</h2><table>
<thead>
<tr>
<th></th>
<th></th>
<th>How？</th>
<th>目录项内容</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>顺序分配</td>
<td></td>
<td>为文件分配的必须是连续的磁盘快</td>
<td>起始块号、文件长度</td>
<td>顺序存取速度快，支持随机访问</td>
<td>会产生碎片，不利于文件拓展</td>
</tr>
<tr>
<td>链接分配</td>
<td>隐式链接</td>
<td>除文件的最后一个盘块之外，每个盘块中都存有指向下一个盘块的指针</td>
<td>起始块号、结束块号</td>
<td>可解决碎片问题，外存利用率高，文件拓展实现方便</td>
<td>只能顺序访问，不能随机访问。</td>
</tr>
<tr>
<td></td>
<td>显式链接</td>
<td>建立一张文件分配表(FAT)，显式记录盘块的先后关系（开机后FAT常驻内存）</td>
<td>起始块号</td>
<td>除了拥有隐式链接的优点之外，还可通过查询内存中的FAT实现随机访问</td>
<td>FAT需要占用一定的存储空间</td>
</tr>
<tr>
<td>索引分配</td>
<td></td>
<td>为文件数据块建立索引表。若文件太大，可采用链接方案、多层索引、混合索引</td>
<td>链接方案记录的是第一个索引块的块号，多层/混合索引记录的是顶级索引块的块号</td>
<td>支持随机访问，易于实现文件的拓展</td>
<td>索引表需占用一定的存储空间。访问数据库前需要先读入索引块。若采用链接方案，查找索引块时可能需要很多次读磁盘操作</td>
</tr>
</tbody></table>
<h2 id="4-1-5、文件存储空间管理"><a href="#4-1-5、文件存储空间管理" class="headerlink" title="4.1.5、文件存储空间管理"></a>4.1.5、文件存储空间管理</h2><h3 id="存储空间的划分与初始化"><a href="#存储空间的划分与初始化" class="headerlink" title="存储空间的划分与初始化"></a>存储空间的划分与初始化</h3><ul>
<li>文件卷(逻辑卷)，目录区、文件区的概念</li>
<li>==目录区包含文件目录、空闲表、位示图、超级块等用于文件管理的数据==</li>
</ul>
<h3 id="空闲表法"><a href="#空闲表法" class="headerlink" title="空闲表法"></a>空闲表法</h3><ul>
<li>空闲表中记录每个连续空闲区的起始盘块号、盘块数</li>
<li>分配时可采用==首次适应、最佳适应等策略；回收时注意表项的合并问题==</li>
</ul>
<h3 id="空闲链表法"><a href="#空闲链表法" class="headerlink" title="空闲链表法"></a>空闲链表法</h3><ul>
<li>空闲盘块链<ul>
<li>以==盘块==为单位组成一条空闲链</li>
<li>分配时从链头依次取出空闲块，回收时将空闲块查到链尾</li>
</ul>
</li>
<li>空闲盘区链<ul>
<li>以==盘区==为单位组成一条空闲链</li>
<li>分配时可采用首次适应、最佳适应等策略；回收时注意相邻空闲盘区合并的问题</li>
</ul>
</li>
</ul>
<h3 id="位示图法"><a href="#位示图法" class="headerlink" title="位示图法"></a>位示图法</h3><ul>
<li>一个二进制位对应一个盘块。（字号，位号）或（行号，列号）与盘块号一一对应</li>
<li>==重要考点：==要能够自己退出盘块号-&gt;（字号，位号）之间的相互转换公式</li>
<li>==需要注意的题目条件==<ul>
<li>二进制位0/1到底哪个代表空闲，哪个代表不空闲</li>
<li>字号、位号、盘块号到底是从0开始还是从1开始</li>
</ul>
</li>
</ul>
<h3 id="成组链接法"><a href="#成组链接法" class="headerlink" title="成组链接法"></a>成组链接法</h3><ul>
<li>UNIX采用的策略，适合大型文件系统。理解即可，不方便用文字描述的知识点也很难作为考题</li>
</ul>
<h2 id="4-1-6、文件的基本操作"><a href="#4-1-6、文件的基本操作" class="headerlink" title="4.1.6、文件的基本操作"></a>4.1.6、文件的基本操作</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><ul>
<li>分配外存空间，创建目录项</li>
</ul>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ul>
<li>回收外存空间，删除目录项</li>
</ul>
<h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><ul>
<li>==将目录项中的信息复制到内存中的打开文件表中，并将打开文件表的索引号返回给用户==</li>
<li>打开文件之后，对文件的操作不再需要每次都查询目录，可以根据内存中的打开文件表进行操作</li>
<li>每个进程有自己的打开文件表，系统中也有一张总的打开文件表</li>
<li>进程打开文件表中特有的属性：读写指针、访问权限（只读？读写？）</li>
<li>系统打开文件表中特有的属性：打开计数器（有多少个进程打开了该文件）</li>
</ul>
<h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><ul>
<li>将进程打开文件表中的相应表项删除</li>
<li>系统打开文件表的打开计数器减1，若打开计数器位0，则删除系统表的表项</li>
</ul>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><ul>
<li>根据读指针、读入数据量、内存位置==将文件数据从外存读入内存==</li>
<li>根据写指针、写出数据量、内存位置==将文件数据从内存写出外存==</li>
</ul>
<h2 id="4-1-7、文件共享"><a href="#4-1-7、文件共享" class="headerlink" title="4.1.7、文件共享"></a>4.1.7、文件共享</h2><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><ul>
<li>各个用户的目录项指向同一个索引结点</li>
<li>索引结点中需要有链接计数count</li>
<li>某用户想删除文件时，只是删除该用户的目录项，且count–</li>
<li>只有count == 0时才能真正删除文件数据和索引结点，否则会导致指针悬空</li>
</ul>
<h3 id="软链接（符号链接）"><a href="#软链接（符号链接）" class="headerlink" title="软链接（符号链接）"></a>软链接（符号链接）</h3><ul>
<li>在一个Link型的文件中记录共享文件的存放路径（Windows快捷方式）</li>
<li>操作系统根据路径一层层查找目录，最终找到共享文件</li>
<li>即使软链接指向的共享文件已被删除，Link型文件依然存在，只是通过Link型文件中的路径区查找共享文件会失败（找不到对应目录项）</li>
<li>由于用软链接的方式访问共享文件时要查询多级目录，会有多次磁盘I/O，因此用软链接访问比硬链接慢</li>
</ul>
<h2 id="4-1-8、-文件保护"><a href="#4-1-8、-文件保护" class="headerlink" title="4.1.8、 文件保护"></a>4.1.8、 文件保护</h2><h3 id="口令保护"><a href="#口令保护" class="headerlink" title="口令保护"></a>口令保护</h3><ul>
<li>为文件设置一个“口令”，用户想要访问文件时需要提供口令，由系统验证口令是否正确</li>
<li>实现开销小，但“口令”一般存放在FCB或索引结点中（也就是存放在系统中）因此不太安全</li>
</ul>
<h3 id="加密保护"><a href="#加密保护" class="headerlink" title="加密保护"></a>加密保护</h3><ul>
<li>用一个“密码”对文件加密，用户想要访问文件时，需要提供相同的“密码”才能正确的解密</li>
<li>安全性高，但加密/解密需要耗费一定的时间（Eg:异或加密）</li>
</ul>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><ul>
<li>用一个访问控制表(ACL)记录各个用户（或各组用户）对文件的访问权限</li>
<li>对文件的访问类型可以分为：读/写/执行/删除等</li>
<li>实现灵活，可以实现复杂的文件保护功能</li>
</ul>
<h2 id="4-1-9、文件系统的层次结构"><a href="#4-1-9、文件系统的层次结构" class="headerlink" title="4.1.9、文件系统的层次结构"></a>4.1.9、文件系统的层次结构</h2><p><img src="/blog/2020/05/20/OSfourthone/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="image-20200522204702751"></p>
<p><img src="/blog/2020/05/20/OSfourthone/%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="image-20200522204621132"></p>
]]></content>
  </entry>
  <entry>
    <title>操作系统4.2</title>
    <url>/blog/2020/05/23/OSfourthtwo/</url>
    <content><![CDATA[<h2 id="4-2-1、磁盘的结构"><a href="#4-2-1、磁盘的结构" class="headerlink" title="4.2.1、磁盘的结构"></a>4.2.1、磁盘的结构</h2><h3 id="磁盘、磁道、扇区的概念"><a href="#磁盘、磁道、扇区的概念" class="headerlink" title="磁盘、磁道、扇区的概念"></a>磁盘、磁道、扇区的概念</h3><ul>
<li>磁盘由表面涂有磁性物质的圆形盘片组成</li>
<li>每个盘片被划分为一个个磁道，每个磁道又划分为一个个扇区</li>
</ul>
<h3 id="如何在磁盘中读-写数据"><a href="#如何在磁盘中读-写数据" class="headerlink" title="如何在磁盘中读/写数据"></a>如何在磁盘中读/写数据</h3><ul>
<li>磁头移动到目标位置，盘片旋转，对应扇区划过磁道才能完成读/写</li>
</ul>
<h3 id="盘面、柱面的概念"><a href="#盘面、柱面的概念" class="headerlink" title="盘面、柱面的概念"></a>盘面、柱面的概念</h3><ul>
<li>磁盘有多个盘片“摞”起来，每个盘片有两个盘面</li>
<li>所以盘面中相对位置相同的磁道组成柱面</li>
</ul>
<h3 id="磁盘的物理地址"><a href="#磁盘的物理地址" class="headerlink" title="磁盘的物理地址"></a>磁盘的物理地址</h3><ul>
<li>（柱面号，盘面号，扇区号）</li>
</ul>
<h3 id="磁盘的分类"><a href="#磁盘的分类" class="headerlink" title="磁盘的分类"></a>磁盘的分类</h3><ul>
<li>根据磁头是否可移动<ul>
<li>固定头磁盘（每个磁道有一个磁头）</li>
<li>移动头磁盘（每个盘面只有一个磁头）</li>
</ul>
</li>
<li>根据盘片是否可更换<ul>
<li>固定盘磁盘</li>
<li>可换盘磁盘</li>
</ul>
</li>
</ul>
<h2 id="4-2-2、磁盘调度算法"><a href="#4-2-2、磁盘调度算法" class="headerlink" title="4.2.2、磁盘调度算法"></a>4.2.2、磁盘调度算法</h2><h3 id="一次磁盘读-写操作需要的时间"><a href="#一次磁盘读-写操作需要的时间" class="headerlink" title="一次磁盘读/写操作需要的时间"></a>一次磁盘读/写操作需要的时间</h3><ul>
<li>寻找时间(寻道时间)：启动磁臂，<font color="red">移动磁头所花的时间</font></li>
<li>延迟时间：将目标扇区转到磁头下面所花的时间</li>
<li>传输时间：读/写    数据花费的时间</li>
</ul>
<h3 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h3><ul>
<li>先来先服务(FCFS)<ul>
<li>按访问请求到达的先后顺序进行处理</li>
</ul>
</li>
<li>最短寻找时间优先(SSTF)<ul>
<li>每次都优先响应距离磁头最近的磁道访问请求</li>
<li>贪心算法的思想，能保证眼前最优，但无发生保证总的寻道时间最短</li>
<li>缺点：可能导致饥饿</li>
</ul>
</li>
<li>扫描算法(电梯算法、SCAN)<ul>
<li>只有磁头移动到最边缘的磁道时才可以改变磁头移动方向</li>
<li>缺点：对各个位置磁道的响应频率不平均</li>
</ul>
</li>
<li>循环扫描算法(C-SCAN)<ul>
<li>只有磁头朝某个方向移动时才会响应请求，移动到边缘后立即让磁头返回起点，返回途中不响应任何请求</li>
</ul>
</li>
<li>低频考点<ul>
<li>LOOK算法<ul>
<li>SCAN算法的改进，只要在磁头移动方向上不再有请求，就立即改变磁头方向</li>
</ul>
</li>
<li>C-LOOK算法<ul>
<li>C-SCAN算法的改进，只要在磁头移动方向上不再有请求，就立即让磁头返回</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-2-3、减少延迟时间的方法"><a href="#4-2-3、减少延迟时间的方法" class="headerlink" title="4.2.3、减少延迟时间的方法"></a>4.2.3、减少延迟时间的方法</h2><h3 id="交替编号"><a href="#交替编号" class="headerlink" title="交替编号"></a>交替编号</h3><ul>
<li>具体做法：让编号相邻的扇区在物理上不相邻</li>
<li>原理：读取完一个扇区后需要一段时间处理才可以继续读入下一个扇区</li>
</ul>
<h3 id="错位命名"><a href="#错位命名" class="headerlink" title="错位命名"></a>错位命名</h3><ul>
<li>具体做法：让相邻盘面的扇区编号“错位”</li>
<li>原理：与“交替编号”的原理相同。“错位命名法”可降低延迟时间</li>
</ul>
<h3 id="磁盘地址结构的设计"><a href="#磁盘地址结构的设计" class="headerlink" title="磁盘地址结构的设计"></a>磁盘地址结构的设计</h3><ul>
<li>理解为什么要用（柱面号，盘面号，扇区号）的结构</li>
<li>理解为什么不用（盘面号，柱面号，扇区号）的结构</li>
<li>原因：在读取地址连续的磁盘块时，前者更不需要移动磁头</li>
</ul>
<h2 id="4-2-4、磁盘的管理"><a href="#4-2-4、磁盘的管理" class="headerlink" title="4.2.4、磁盘的管理"></a>4.2.4、磁盘的管理</h2><h3 id="磁盘初始化"><a href="#磁盘初始化" class="headerlink" title="磁盘初始化"></a>磁盘初始化</h3><ul>
<li>低级格式化/物理格式化：划分扇区</li>
<li>磁盘分区（C盘、D盘、E盘）</li>
<li>逻辑格式化：建立文件系统（建立根目录文件、建立用于存储空间管理的数据结构）</li>
</ul>
<h3 id="引导块"><a href="#引导块" class="headerlink" title="引导块"></a>引导块</h3><ul>
<li>计算机启动时需要运行初始化程序（自举程序）来完成初始化</li>
<li>ROM中存放很小的自举装入程序</li>
<li>完整的自举程序存放在初始块(引导块)中</li>
</ul>
<h3 id="坏块的管理"><a href="#坏块的管理" class="headerlink" title="坏块的管理"></a>坏块的管理</h3><ul>
<li>简单的磁盘：逻辑格式化时将坏块标记出来</li>
<li>复杂的磁盘：磁盘控制器维护一个坏块链，并管理备用扇区</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/blog/2020/06/05/MyBatis/</url>
    <content><![CDATA[<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>环境：</p>
<ul>
<li>JDK1.8</li>
<li>MySQL 5.7</li>
<li>Maven 3.6.3</li>
<li>IDEA</li>
</ul>
<p>回顾：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p>SSM框架：配置文件。最好的方式：看官网文档</p>
<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是MyBatis"><a href="#1-1、什么是MyBatis" class="headerlink" title="1.1、什么是MyBatis"></a>1.1、什么是MyBatis</h3><p><img src="/blog/2020/06/05/MyBatis/MyBatis%E7%9A%84logo.png" alt="image-20200605004511293"></p>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持自定义 SQL、存储过程以及高级映射。</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis" target="_blank" rel="noopener">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到Github。</li>
</ul>
<p>获取MyBatis</p>
<ul>
<li>Maven仓库</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Github：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></li>
<li>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></li>
</ul>
<h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p>
<ul>
<li>持久化就是把程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库(jdbc)，io文件持久化</li>
<li>生活：冷藏，罐头。</li>
</ul>
<p><strong>为什么需要持久化？</strong></p>
<ul>
<li>有一些对象，不能让他丢掉</li>
<li>内存太贵了</li>
</ul>
<h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层，Service层，Controller层….</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显。</li>
</ul>
<h3 id="1-4、为什么需要MyBatis？"><a href="#1-4、为什么需要MyBatis？" class="headerlink" title="1.4、为什么需要MyBatis？"></a>1.4、为什么需要MyBatis？</h3><ul>
<li>帮助程序员将数据存入数据库中</li>
<li>方便</li>
<li>传统的JDBC代码太复杂了。简化。框架。自动化。</li>
<li>不用MyBatis也可以。  MyBatis比不用更容易上手。<strong>技术没有高低之分的</strong></li>
<li>优点：<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。 [2]</li>
</ul>
</li>
</ul>
<p><strong>最重要的一点：使用的人多！</strong></p>
<p>Spring     SpringMVC     SpringBoot</p>
<h2 id="2、第一个MyBatis程序"><a href="#2、第一个MyBatis程序" class="headerlink" title="2、第一个MyBatis程序"></a>2、第一个MyBatis程序</h2><p>思路：搭建环境–&gt;导入MyBatis–&gt;编写代码–&gt;测试！</p>
<h3 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h3><p>搭建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`mybatis`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`mybatis`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`pwd`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'特朗普'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'张三'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'李四'</span>,<span class="string">'123890'</span>)</span><br></pre></td></tr></table></figure>

<p>新建项目</p>
<p>​    1.新建一个普通的maven项目</p>
<p>​    2.删除src目录</p>
<p>​    3.导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h3><ul>
<li>编写MyBatis的核心配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写Mybatis工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">//SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">            <span class="string">"id="</span> + id +</span><br><span class="line">            <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">            <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Dao接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口实现类由原来的UserDaoImpl转变为一个Mapper配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.carey.dao.UserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- select查询语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.carey.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p>注意点：org.apache.ibatis.binding.BindingException: Type interface com.carey.dao.UserDao is not known to the MapperRegistry.</p>
<p><strong>MapperRegistry是什么？</strong></p>
<p>核心配置文件中注册mappers</p>
<ul>
<li>junit测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一步：获得SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：getMapper</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补充：如果需要编译src的java目录的xml文件！！！（idea不会编译src的java目录的xml文件）</strong></p>
<p>解决思路就是：将IDEA maven项目中src源代码下的xml等资源文件编译进classes文件夹</p>
<p>具体操作方法就是：配置maven的pom文件配置，在<build>节点下添加<resources>代码：</resources></build></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h3><p>namespace中的包名要和Dao/Mapper接口的包名一致！</p>
<h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询语句;</p>
<ul>
<li>id : 就是对应的namespace中的方法名；</li>
<li>resultType：Sql语句执行的返回值！</li>
<li>parameterType ： 参数类型！</li>
</ul>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询用户</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的mapper中的sql语句</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getUserById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"com.carey.pojo.User"</span>&gt;</span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3、Insert"><a href="#3、Insert" class="headerlink" title="3、Insert"></a>3、Insert</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.carey.pojo.User"</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.carey.pojo.User"</span>&gt;</span></span><br><span class="line">    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id = #&#123;id&#125; ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、Delete"><a href="#5、Delete" class="headerlink" title="5、Delete"></a>5、Delete</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>注意点：</p>
<ul>
<li>增删改需要提交事务！</li>
</ul>
<h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul>
<li>标签不要匹配错</li>
<li>resource 绑定mapper，需要使用路径！</li>
<li>程序配置文件必须符合规范！</li>
<li>NullPointerException，没有注册到资源!</li>
<li>输出的xml文件中存在中文乱码问题！</li>
<li>maven资源没有导出问题！</li>
</ul>
<h3 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来    传递map的key--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, pwd) values (#&#123;userId&#125;,#&#123;passWord&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">"userId"</span>,<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">"passWord"</span>,<span class="string">"2222333"</span>);</span><br><span class="line"></span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p>
<p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p>
<p>多个参数用Map，<strong>或者注解！</strong></p>
<h3 id="8、思考题"><a href="#8、思考题" class="headerlink" title="8、思考题"></a>8、思考题</h3><p>模糊查询怎么写？</p>
<ol>
<li><p>Java代码执行的时候，传递通配符 % %</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">"%李%"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在sql拼接中使用通配符！</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select * from mybatis.user where name like "%"#&#123;value&#125;"%"</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>小心防范sql注入的情况</p>
<h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p>
<h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p>
<p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p>
<p><img src="/blog/2020/06/05/MyBatis/db.properties%E6%96%87%E4%BB%B6%E4%B8%AD%E6%A0%87%E7%AD%BE%E8%A6%81%E6%8C%89%E9%A1%BA%E5%BA%8F%E5%86%99.png" alt="image-20200606112442040"></p>
<p>编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>在核心配置文件中映入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"11111"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一个字段，优先使用外部配置文件的！</li>
</ul>
<h3 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h3><ul>
<li>类型别名是为 Java 类型设置一个短的名字。‘</li>
<li>存在的意义仅在于用来减少类完全限定名的冗余。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.carey.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.carey.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在实体类比较少的时候，使用第一种方式。</p>
<p>如果实体类十分多，建议使用第二种。</p>
<p>第一种可以自定义别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p>
<p><img src="/blog/2020/06/05/MyBatis/logImpl.png" alt="1569657659080"></p>
<p><img src="/blog/2020/06/05/MyBatis/lazyLoadingEnabled.png" alt="1569657672791"></p>
<h3 id="6、其他配置"><a href="#6、其他配置" class="headerlink" title="6、其他配置"></a>6、其他配置</h3><ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" target="_blank" rel="noopener">objectFactory（对象工厂）</a></li>
<li>plugins插件<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p>
<p>方式一： 【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/carey/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二：使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.carey.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>方式三：使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.carey.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p><img src="/blog/2020/06/05/MyBatis/sqlSession%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B.png" alt="1569660357745"></p>
<p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder：</strong></p>
<ul>
<li>一旦创建了 SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><strong>SqlSessionFactory：</strong></p>
<ul>
<li>说白了就是可以想象为 ：数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li>
<li>因此 SqlSessionFactory 的最佳作用域是应用作用域。 </li>
<li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li>连接到连接池的一个请求！</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后需要赶紧关闭，否则资源被占用！</li>
</ul>
<p><img src="/blog/2020/06/05/MyBatis/sqlSession%E5%8E%9F%E7%90%86.png" alt="1569660737088"></p>
<p>这里面的每一个Mapper，就代表一个具体的业务！</p>
<h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="1、-问题"><a href="#1、-问题" class="headerlink" title="1、 问题"></a>1、 问题</h3><p>数据库中的字段</p>
<p><img src="/blog/2020/06/05/MyBatis/mybatis%E7%9A%84user%E8%A1%A8.png" alt="1569660831076"></p>
<p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试出现问题</p>
<p><img src="/blog/2020/06/05/MyBatis/%E6%B5%8B%E8%AF%95%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="image-20200606155641666"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">//类型处理器</span><br><span class="line">//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ul>
<li>起别名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.carey.pojo.User"</span>&gt;</span></span><br><span class="line">    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id   name   pwd</span><br><span class="line">id   name   password</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
<li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li>
</ul>
<h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p>
<p>曾经：sout 、debug</p>
<p>现在：日志工厂！</p>
<p><img src="/blog/2020/06/05/MyBatis/%E6%97%A5%E5%BF%97%E5%B7%A5%E5%8E%82.png" alt="1569892155104"></p>
<ul>
<li>SLF4J </li>
<li>LOG4J  【掌握】</li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>STDOUT_LOGGING   【掌握】</li>
<li>NO_LOGGING</li>
</ul>
<p>在Mybatis中具体使用那个一日志实现，在设置中设定！</p>
<p><strong>STDOUT_LOGGING标准日志输出</strong></p>
<p>在mybatis核心配置文件中，配置我们的日志！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog/2020/06/05/MyBatis/%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF.png" alt="image-20200606165103799"></p>
<h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j？</p>
<ul>
<li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995" target="_blank" rel="noopener">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626" target="_blank" rel="noopener">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI" target="_blank" rel="noopener">GUI</a>组件</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p>先导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置log4j为日志的实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Log4j的使用！，直接测试运行刚才的查询</p>
</li>
</ol>
<p><img src="/blog/2020/06/05/MyBatis/log4j%E6%97%A5%E5%BF%971.png" alt="image-20200607092524719"></p>
<p><img src="/blog/2020/06/05/MyBatis/log4j%E6%97%A5%E5%BF%972.png" alt="image-20200607092624057"></p>
<p><strong>简单使用</strong></p>
<ol>
<li><p>在要使用Log4j 的类中，导入包  import org.apache.log4j.Logger;</p>
</li>
<li><p>日志对象，参数为当前类的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">"info:进入了testLog4j"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug:进入了testLog4j"</span>);</span><br><span class="line">logger.error(<span class="string">"error:进入了testLog4j"</span>);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页？</strong></p>
<ul>
<li>减少数据的处理量</li>
</ul>
<h3 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：<span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">limit</span> startIndex,pageSize;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">limit</span> <span class="number">3</span>;  <span class="comment">#[0,n]</span></span><br></pre></td></tr></table></figure>



<p>使用Mybatis实现分页，核心SQL</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--//分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLimit"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">"startIndex"</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">"pageSize"</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList =  mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByRowBounds"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from  mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//RowBounds实现</span></span><br><span class="line">RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Java代码层面实现分页</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"com.kuang.dao.UserMapper.getUserByRowBounds"</span>,<span class="keyword">null</span>,rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h3><p><img src="/blog/2020/06/05/MyBatis/PageHelper.png" alt="image-20200607154746680"></p>
<p>需要使用的时候再去查文档看看，打好基础为主</p>
<h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h3><p>- 大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程<br>- <strong>根本原因 :  ==解耦== , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong><br>- 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；<br>- 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</p>
<p><strong>关于接口的理解</strong></p>
<p>- 接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。<br>- 接口的本身反映了系统设计人员对系统的抽象理解。<br>- 接口应有两类：<br>  - 第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；<br>  - 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；<br>- 一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p>
<p><strong>三个面向区别</strong></p>
<p>- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .<br>- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .<br>- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p>
<h3 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h3><ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要再核心配置文件中绑定接口！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.carey.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<p>本质：反射机制实现</p>
<p>底层：动态代理！</p>
<p><img src="/blog/2020/06/05/MyBatis/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png" alt="1569898830704"></p>
<p><strong>Mybatis详细的执行流程！</strong></p>
<p><img src="/blog/2020/06/05/MyBatis/mybatis%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="Temp"></p>
<h3 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编写接口，增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法存在多个参数，所有的参数前面必须加上 @Param("id")注解</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserByID</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"uid"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试类</p>
<p>【注意：我们必须要将接口注册绑定到我们的核心配置文件中！】</p>
<p><strong>关于@Param() 注解</strong></p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li>
<li>我们在SQL中引用的就是我们这里的 @Param() 中设定的属性名！</li>
</ul>
<p><strong>#{}     ${} 区别</strong></p>
<p>两者都可以在mybatis中用在输入映射</p>
<p>{}是预编译处理，<br>${}是字符串替换。</p>
<p>mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；<br>mybatis在处理 $ { } 时，就是把 ${ } 替换成变量的值，完成的是简单的字符串拼接。</p>
<p>补充：在mybatis中使用#{}可以防止sql注入，提高系统安全性。</p>
<h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your <span class="class"><span class="keyword">class</span> <span class="title">has</span> <span class="title">a</span> <span class="title">fully</span> <span class="title">featured</span> <span class="title">builder</span>, <span class="title">Automate</span> <span class="title">your</span> <span class="title">logging</span> <span class="title">variables</span>, <span class="title">and</span> <span class="title">much</span> <span class="title">more</span>.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>java library</li>
<li>plugs</li>
<li>build tools</li>
<li>with one annotation your class</li>
</ul>
<p>使用步骤：</p>
<ol>
<li><p>在IDEA中安装Lombok插件！</p>
</li>
<li><p>在项目中导入lombok的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在实体类上加注解即可！</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log</span>4j, <span class="meta">@Log</span>4j2, <span class="meta">@Slf</span>4j, <span class="meta">@XSlf</span>4j, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@With</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@val</span></span><br><span class="line"><span class="meta">@var</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data：无参构造，get、set、tostring、hashcode，equals</span><br><span class="line">@AllArgsConstructor     有参构造</span><br><span class="line">@NoArgsConstructor		无参构造</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">@ToString		toString方法</span><br><span class="line">@Getter      Getter方法</span><br><span class="line">@Setter		Setter方法</span><br></pre></td></tr></table></figure>

<h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p>
<p><img src="/blog/2020/06/05/MyBatis/%E5%A4%9A%E5%AF%B9%E4%B8%80.png" alt="1569909163944"></p>
<ul>
<li>多个学生，对应一个老师</li>
<li>对于学生这边而言，  <strong>关联</strong> ..  多个学生，关联一个老师  【多对一】</li>
<li>对于老师而言， <strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li>
</ul>
<p><img src="/blog/2020/06/05/MyBatis/%E5%AD%A6%E7%94%9F%E8%80%81%E5%B8%88%E8%A1%A8.png" alt="image-20200608163314371"></p>
<p>SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`teacher`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'秦老师'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`tid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`fktid`</span> (<span class="string">`tid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`fktid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`tid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`teacher`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'小明'</span>, <span class="string">'1'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'小红'</span>, <span class="string">'1'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'小张'</span>, <span class="string">'1'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'小李'</span>, <span class="string">'1'</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'小王'</span>, <span class="string">'1'</span>);</span><br></pre></td></tr></table></figure>



<h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol>
<li>导入lombok</li>
<li>新建实体类 Teacher，Student</li>
<li>建立Mapper接口</li>
<li>建立Mapper.XML文件</li>
<li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li>
<li>测试查询是否能够成功！</li>
</ol>
<h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路:</span></span><br><span class="line"><span class="comment">        1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果嵌套处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>回顾Mysql 多对一查询方式：</p>
<ul>
<li>子查询</li>
<li>联表查询</li>
</ul>
<h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如：一个老师拥有多个学生！</p>
<p>对于老师而言，就是一对多的关系!</p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>环境搭建，和多对一的处理一样</li>
</ol>
<p><strong>实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按结果嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname, t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection</span></span><br><span class="line"><span class="comment">    javaType="" 指定属性的类型！</span></span><br><span class="line"><span class="comment">    集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">select</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>关联 - association   【多对一】</li>
<li>集合 - collection   【一对多】</li>
<li>javaType    &amp;   ofType<ol>
<li>JavaType  用来指定实体类中属性的类型</li>
<li>ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题！</li>
<li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li>
</ul>
<p>面试高频</p>
<ul>
<li>Mysql引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化！</li>
</ul>
<h2 id="12、动态-SQL"><a href="#12、动态-SQL" class="headerlink" title="12、动态 SQL"></a>12、动态 SQL</h2><p>==<strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong>==</p>
<p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure>

<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客id'</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客标题'</span>,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客作者'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`views`</span> <span class="built_in">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'浏览量'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<p>创建一个基础工程</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p>
</li>
</ol>
<h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where,set)"></a>trim (where,set)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from mybatis.blog</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>==<strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong>==</p>
<p>if</p>
<p>where ， set  ， choose ，when</p>
<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<ol>
<li><p>使用SQL标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>注意事项：</p>
<ul>
<li>最好基于单表来定义SQL片段！</li>
<li>SQL标签抽取的公共部分不要存在where标签</li>
</ul>
<h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line"></span><br><span class="line">  &lt;foreach item=<span class="string">"id"</span> collection=<span class="string">"ids"</span></span><br><span class="line">      <span class="keyword">open</span>=<span class="string">"("</span> separator=<span class="string">"or"</span> <span class="keyword">close</span>=<span class="string">")"</span>&gt;</span><br><span class="line">        <span class="comment">#&#123;id&#125;</span></span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">2</span> <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/blog/2020/06/05/MyBatis/foreach.png" alt="1569979229205"></p>
<p><img src="/blog/2020/06/05/MyBatis/%E8%A1%A8.png" alt></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        我们现在传递一个万能的map ， 这map中可以存在一个集合！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"and ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span> //注意and和(之间要加空格</span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>==动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了==</p>
<p>建议：</p>
<ul>
<li>现在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可！</li>
</ul>
<h2 id="13、缓存-（了解）"><a href="#13、缓存-（了解）" class="headerlink" title="13、缓存 （了解）"></a>13、缓存 （了解）</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询  ：  连接数据库 ，耗资源！</span><br><span class="line">	一次查询的结果，给他暂存在一个可以直接取到的地方！--&gt; 内存 ： 缓存</span><br><span class="line">	</span><br><span class="line">我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</span><br></pre></td></tr></table></figure>



<ol>
<li><p>什么是缓存 [ Cache ]？</p>
<ul>
<li>存在内存中的临时数据。</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
</li>
<li><p>为什么使用缓存？</p>
<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
</li>
<li><p>什么样的数据能使用缓存？</p>
<ul>
<li>经常查询并且不经常改变的数据。【可以使用缓存】</li>
</ul>
</li>
</ol>
<h3 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h3><ul>
<li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p>
</li>
<li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p>
<ul>
<li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p>
</li>
<li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p>
</li>
<li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p>
</li>
</ul>
</li>
</ul>
<h3 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h3><ul>
<li>一级缓存也叫本地缓存：  SqlSession<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
</li>
</ul>
<p>测试步骤：</p>
<ol>
<li>开启日志！</li>
<li>测试在一个Sesion中查询两次相同记录</li>
<li>查看日志输出</li>
</ol>
<p><img src="/blog/2020/06/05/MyBatis/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%981.png" alt="1569983650437"></p>
<p>缓存失效的情况：</p>
<ol>
<li><p>查询不同的东西</p>
</li>
<li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p>
<p><img src="/blog/2020/06/05/MyBatis/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%982.png" alt="1569983952321"></p>
</li>
<li><p>查询不同的Mapper.xml</p>
</li>
<li><p>手动清理缓存！</p>
<p><img src="/blog/2020/06/05/MyBatis/%E6%89%8B%E5%8A%A8%E6%B8%85%E7%90%86%E7%BC%93%E5%AD%98.png" alt="1569984008824"></p>
</li>
</ol>
<p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p>
<p>一级缓存就是一个Map。</p>
<h3 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h3><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在要使用二级缓存的Mapper中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ol>
<li><p>问题:我们需要将实体类序列化！否则就会报错！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: java.io.NotSerializableException: com.kuang.pojo.User</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中；</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li>
</ul>
<h3 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h3><p><img src="/blog/2020/06/05/MyBatis/%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86.png" alt="1569985541106"></p>
<h3 id="13-6、自定义缓存-ehcache"><a href="#13-6、自定义缓存-ehcache" class="headerlink" title="13.6、自定义缓存-ehcache"></a>13.6、自定义缓存-ehcache</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存</span><br></pre></td></tr></table></figure>

<p>要在程序中使用ehcache，先要导包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在mapper中指定使用我们的ehcache缓存实现！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"./tmpdir/Tmp_EhCache"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"259200"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"cloud_user"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"5000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>Redis数据库来做缓存！  K-V</p>
]]></content>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统2.1</title>
    <url>/blog/2020/05/11/OSsecondone/</url>
    <content><![CDATA[<h2 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h2><p>程序：是静态的，就是个存放在磁盘里的可执行文件，就是一系列的指令集合<br>进程（Process）：是动态的，是程序的一次执行过程</p>
<h2 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h2><p>进程(进程实体)由程序段、数据段、PCB三部分组成</p>
<ul>
<li><p>PCB             —-    进程的管理者(操作系统)所需的数据都在PCB中</p>
<ul>
<li>进程描述信息</li>
<li>进程控制和管理信息</li>
<li>资源分配清单</li>
<li>处理器相关信息</li>
</ul>
</li>
<li><p>程序段        —-    程序本身运行所需的数据</p>
<ul>
<li>存放要执行的代码</li>
</ul>
</li>
<li><p>数据段       —-    程序本身运行所需的数据</p>
<ul>
<li>存放程序运行过程中处理的各种数据</li>
</ul>
</li>
</ul>
<p>总结：PCB 是给操作系统用的。程序段、数据段是给进程自己用的。<br>引入进程实体的概念后，可把进程定义为：<br><strong>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</strong></p>
<h2 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h2><ul>
<li>连接方式<ul>
<li>按照进程状态将PCB分为多个队列</li>
<li>操作系统持有指向各个队列的指针</li>
</ul>
</li>
<li>索引方式<ul>
<li>根据进程状态的不同，建立几张索引表</li>
<li>操作系统持有指向各个索引表的指针</li>
</ul>
</li>
</ul>
<h2 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h2><ul>
<li><p>动态性            —-<strong>动态性是进程最基本的特征</strong></p>
<ul>
<li>进程是程序的一次执行过程，是动态地产生、变化和消亡的</li>
</ul>
</li>
<li><p>并发性</p>
<ul>
<li>内存中有多个进程实体，各进程可并发执行</li>
</ul>
</li>
<li><p>独立性             —–<strong>进程是资源分配、接受调度的基本单位</strong></p>
<ul>
<li>进程是能独立运行、独立获得资源、独立接受调度的基本单位</li>
</ul>
</li>
<li><p>异步性            —–<strong>异步性会导致并发程序执行结果的不确定性</strong></p>
<ul>
<li>各进程按各自独立的、不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题</li>
</ul>
</li>
<li><p>结构性</p>
<ul>
<li>每个进程都会配置一个PCB。结构上看，进程由程序段，数据段和PCB组成</li>
</ul>
</li>
</ul>
<h2 id="进程的状态与转换"><a href="#进程的状态与转换" class="headerlink" title="进程的状态与转换"></a>进程的状态与转换</h2><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><ul>
<li><strong>运行状态</strong><ul>
<li>CPU✔    其他所需资源✔</li>
</ul>
</li>
<li><strong>就绪状态</strong><ul>
<li>CPU❌   其他所需资源✔</li>
</ul>
</li>
<li><strong>阻塞状态</strong><ul>
<li>CPU❌   其他所需资源❌</li>
</ul>
</li>
<li>创建状态<ul>
<li>操作系统为新进程分配资源、创建PCB</li>
</ul>
</li>
<li>终止状态<ul>
<li>操作系统回收进程的资源、撤销PCB</li>
</ul>
</li>
</ul>
<h3 id="进程状态间的转换"><a href="#进程状态间的转换" class="headerlink" title="进程状态间的转换"></a>进程状态间的转换</h3><ul>
<li><strong>就绪态-&gt;运行态</strong><ul>
<li>进程被调度</li>
</ul>
</li>
<li><strong>运行态-&gt;就绪态</strong><ul>
<li>时间片到，或CPU被其他高优先级的进程抢占</li>
</ul>
</li>
<li><strong>运行态-&gt;阻塞态</strong><ul>
<li>等待系统资源分配，或等待某事件发生(主动行为)</li>
</ul>
</li>
<li><strong>阻塞态-&gt;就绪态</strong><ul>
<li>资源分配到位，等待事件的发生(被动行为)</li>
</ul>
</li>
<li>创建态-&gt;就绪态<ul>
<li>系统完成创建进程相关的工作</li>
</ul>
</li>
<li>运行态-&gt;终止态<ul>
<li>进程运行结束，或运行过程中遇到不可修复的错误</li>
</ul>
</li>
</ul>
<h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><p>进程控制就是要实现进程状态的转换</p>
<ul>
<li>进程控制用原语实现<ul>
<li>原语用<strong>关/开中断</strong>来实现</li>
<li>原语是一种特殊的程序</li>
<li>原语的执行<strong>必须一气呵成，不可中断</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="相关原语"><a href="#相关原语" class="headerlink" title="相关原语"></a>相关原语</h3><ul>
<li><p>进程的创建</p>
<ul>
<li>创建原语<pre><code>- 申请空白PCB
- 为新进程分配所需资源
- 初始化PCB
- 将PCB插入就绪队列           **创建态-&gt;就绪态**</code></pre></li>
<li>引起进程创建的事件<ul>
<li>用户登录</li>
<li>作业调度</li>
<li>提供服务</li>
<li>应用请求</li>
</ul>
</li>
</ul>
</li>
<li><p>进程的终止</p>
<ul>
<li>撤销原语              <strong>就绪态/阻塞态/运行态/ —-&gt;终止态-&gt;无</strong><ul>
<li>从PCB集合中找到终止进程的PCB</li>
<li>若进程正在运行，立即剥夺CPU，将CPU分配给其他进程</li>
<li>终止其所有子进程              <strong>进程间的关系是树状结构</strong></li>
<li>将该进程拥有的所有资源归还给父进程或操作系统</li>
<li>删除PCB</li>
</ul>
</li>
<li>引起进程终止的事件<ul>
<li>正常结束</li>
<li>异常结束</li>
<li>外界干预        </li>
</ul>
</li>
</ul>
</li>
<li><p>进程的阻塞                                 <strong>阻塞和唤醒必须成对使用</strong></p>
<ul>
<li>阻塞原语     <strong>运行态-&gt;阻塞态</strong><ul>
<li>找到要阻塞的进程对应的PCB</li>
<li>保护进程运行现场，将PCB状态信息设置为“阻塞态”，暂时停止进程运行</li>
<li>将PCB插入相应事件的等待队列</li>
</ul>
</li>
<li>引起进程阻塞的事件<ul>
<li>需要等待系统分配某种资源</li>
<li>需要等待相互合作的其他进程完成工作            </li>
</ul>
</li>
</ul>
</li>
<li><p>进程的唤醒                 </p>
<ul>
<li>唤醒原语         <strong>阻塞态-&gt;就绪态</strong><ul>
<li>在事件等待队列中找到PCB</li>
<li>将PCB从等待队列移除，设置进程为就绪态</li>
<li>将PCB插入就绪队列，等待被调度</li>
</ul>
</li>
<li>引起进程唤醒的事件<ul>
<li>等待事件发生                <strong>因何事阻塞，就应由何事唤醒</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>进程的切换</p>
<ul>
<li>切换原语           <strong>运行态-&gt;就绪态     或       就绪态-&gt;运行态</strong><pre><code>- 将运行环境信息(进程上下文context)存入PCB
- PCB移入相应队列
- 选择另一个进程执行，并更新其PCB
- 根据PCB恢复新进程所需的运行环境</code></pre></li>
<li>引起进程切换的事件<ul>
<li>当前进程时间片到</li>
<li>有更高优先级的进程到达</li>
<li>当前进程主动阻塞</li>
<li>当前进程终止</li>
</ul>
</li>
</ul>
<p>以上理解能在选择题分析出答案即可，不用背</p>
</li>
</ul>
<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul>
<li>共享存储<ul>
<li>设置一个共享空间</li>
<li>要<strong>互斥地访问</strong>共享空间<ul>
<li>两种方式<ul>
<li>基于数据结构(低级)</li>
<li>基于存储区的共享(高级)</li>
</ul>
</li>
<li>管道通信</li>
<li>设置一个特殊的共享文件(管道)，其实就是一个缓冲区</li>
<li><strong>一个管道只能实现半双工通信</strong></li>
<li>实现双向同时通信要建立两个管道</li>
<li>各进程要互斥访问管道</li>
<li><strong>写满时，不能再写。读空时，不能再读</strong></li>
<li><strong>没写满，不能读。没读空，不能写</strong></li>
<li>消息传递</li>
<li>传递结构化的消息(消息头/消息体)</li>
<li>系统提供“发送/接受原语”</li>
<li>两种方式</li>
<li>直接通信方式</li>
</ul>
</li>
<li>消息直接挂到接收方的消息队列里<ul>
<li>间接(信箱)通信方式</li>
</ul>
</li>
<li>消息先发到中间体(信箱)</li>
</ul>
</li>
</ul>
<h2 id="线程、多线程模型"><a href="#线程、多线程模型" class="headerlink" title="线程、多线程模型"></a>线程、多线程模型</h2><ul>
<li>什么是线程，为什么要引入线程<ul>
<li>可理解为“轻量级进程”</li>
<li>可增加并发度，减少并发带来的开销<ul>
<li>引入进程机制后，有什么变化？(和传统进程机制对比)</li>
<li>资源分配、处理机调度</li>
<li>传统进程机制中，进程是资源分配、调度的基本单位</li>
<li>引入线程后，进程是资源分配的基本单位，线程是调度的基本单位</li>
<li>并发性</li>
<li>传统进程机制中，只能进程间并发</li>
<li>引入进程后，各线程间也能并发，提升了并发度</li>
<li>系统开销</li>
<li>传统的进程间并发，需要切换进程的运行环境，系统开销很大</li>
<li>线程间并发，如果是同一进程内的线程切换，则不需要切换进程环境，系统开销小</li>
<li>引入线程后，并发带来的系统开销减小</li>
<li>线程有哪些重要的属性</li>
<li><strong>线程是处理机调度的单位，进程是资源分配的单位</strong></li>
<li>同一进程的各线程共享进程拥有的资源</li>
<li>同一进程内的线程切换不会导致进程切换</li>
<li>线程的实现方式</li>
<li>用户级线程</li>
<li>从用户视角看的线程</li>
<li>内核级线程</li>
<li>从操作系统视角看的进程(<strong>内核级线程才是处理机分配的单位</strong>)</li>
<li>组合方式</li>
<li>上述两种方式的结合</li>
<li>多线程模型</li>
<li>多对一模型</li>
<li>优：进程管理开销小效率高</li>
<li>缺：<strong>一个线程阻塞会导致整个进程都被阻塞</strong>(并发度低)</li>
<li>一对一模型</li>
<li>优：各个线程可分配到多核处理机并发执行，并发度高</li>
<li>缺：进程管理开销大</li>
<li>多对多模型</li>
<li>集二者多所长</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>操作系统2.4</title>
    <url>/blog/2020/05/16/OSsecondfour/</url>
    <content><![CDATA[<h2 id="2-4-1、死锁的概念"><a href="#2-4-1、死锁的概念" class="headerlink" title="2.4.1、死锁的概念"></a>2.4.1、死锁的概念</h2><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><ul>
<li>各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进</li>
</ul>
<h3 id="死锁、饥饿、死循环的区别"><a href="#死锁、饥饿、死循环的区别" class="headerlink" title="死锁、饥饿、死循环的区别"></a>死锁、饥饿、死循环的区别</h3><ul>
<li>死锁：至少是两个进程一起死锁，死锁进程处于阻塞态</li>
<li>饥饿：可以只有一个进程饥饿，饥饿进程可能阻塞也可能就绪</li>
<li>死循环：可能只有一个进程发生死循环，死循环的进程可上处理机</li>
<li>死锁和饥饿是操作系统要解决的问题，死循环是应用程序员要解决的</li>
</ul>
<h3 id="死锁产生的必要条件"><a href="#死锁产生的必要条件" class="headerlink" title="死锁产生的必要条件"></a>死锁产生的必要条件</h3><ul>
<li><p>互斥条件</p>
<ul>
<li>对必须互斥使用的资源的争抢才会导致死锁</li>
</ul>
</li>
<li><p>不剥夺条件</p>
<ul>
<li>进程保持的资源只能主动释放，不可强行剥夺</li>
</ul>
</li>
<li><p>请求和保持条件</p>
<ul>
<li>保持着某些资源不放的同时，请求别的资源</li>
</ul>
</li>
<li><p>循环等待条件</p>
<ul>
<li>存在一种进程资源的循环等待链</li>
<li>循环等待未必死锁，死锁一定有循环等待</li>
</ul>
</li>
</ul>
<h3 id="什么时候会发生死锁"><a href="#什么时候会发生死锁" class="headerlink" title="什么时候会发生死锁"></a>什么时候会发生死锁</h3><ul>
<li>对不可剥夺资源的不合理分配，可能导致死锁</li>
</ul>
<h3 id="死锁的处理策略"><a href="#死锁的处理策略" class="headerlink" title="死锁的处理策略"></a>死锁的处理策略</h3><ul>
<li><p>预防死锁</p>
<ul>
<li>破坏死锁产生的四个必要条件</li>
</ul>
</li>
<li><p>避免死锁</p>
<ul>
<li>避免系统进入不安全状态(银行家算法)</li>
</ul>
</li>
<li><p>死锁的检测和解除</p>
<ul>
<li>允许死锁发生，系统负责检测出死锁并解除</li>
</ul>
</li>
</ul>
<h2 id="2-4-2、预防死锁"><a href="#2-4-2、预防死锁" class="headerlink" title="2.4.2、预防死锁"></a>2.4.2、预防死锁</h2><h3 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h3><ul>
<li>将临界资源改造为可共享使用的资源(如SPOOLing技术)</li>
<li>缺点：可行性不高，很多时候无法破坏互斥条件</li>
</ul>
<h3 id="破坏不剥夺条件"><a href="#破坏不剥夺条件" class="headerlink" title="破坏不剥夺条件"></a>破坏不剥夺条件</h3><ul>
<li>方案一：申请的资源得不到满足时，立即释放拥有的所有资源</li>
<li>方案二：申请的资源被其他进程占用时，由操作系统协助剥夺(考虑优先级)</li>
<li>缺点：实现复杂；剥夺资源可能导致部分工作失效；反复申请和释放导致系统开销大；可能导致饥饿</li>
</ul>
<h3 id="破坏请求和保持条件"><a href="#破坏请求和保持条件" class="headerlink" title="破坏请求和保持条件"></a>破坏请求和保持条件</h3><ul>
<li>运行前分配好所有需要的资源，之后一直保持</li>
<li>缺点：资源利用率低；可能导致饥饿</li>
</ul>
<h3 id="破坏循环等待条件"><a href="#破坏循环等待条件" class="headerlink" title="破坏循环等待条件"></a>破坏循环等待条件</h3><ul>
<li>给资源编号，必须按编号从小到大的顺序申请资源</li>
<li>缺点：不方便增加新设备；会导致资源浪费；用户编程麻烦</li>
</ul>
<h2 id="2-4-3、避免死锁"><a href="#2-4-3、避免死锁" class="headerlink" title="2.4.3、避免死锁"></a>2.4.3、避免死锁</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li>长度为m的一维数组Available 表示还有多少可用资源</li>
<li>n*m矩阵Max表示各进程对资源的最大需求数</li>
<li>n*m矩阵Allocation表示已经给各进程分配了多少资源</li>
<li>Max - Allocation = Need 矩阵表示各进程最多还需要多少资源</li>
<li>用长度为m的一维数组Request表示进程此次申请的各种资源数</li>
</ul>
<h3 id="银行家算法步骤："><a href="#银行家算法步骤：" class="headerlink" title="银行家算法步骤："></a>银行家算法步骤：</h3><p>① 检查此次申请是否超过了之前声明的最大需求数</p>
<p>② 检查此时系统剩余的可用资源是否还能满足这次请求</p>
<p>③ 试探着分配，更改各数据结构</p>
<p>④ 用安全性算法检查此次分配是否会导致系统进入不安全状态</p>
<h3 id="安全性算法步骤："><a href="#安全性算法步骤：" class="headerlink" title="安全性算法步骤："></a>安全性算法步骤：</h3><ul>
<li>检查当前的剩余可用资源是否能满足某个进程的最大需求，如果可以，就把该进程加入安全序列，并把该进程持有的资源全部回收。</li>
<li>不断重复上述过程，看最终是否能让所有进程都加入安全序列。</li>
</ul>
<p>系统处于不安全状态未必死锁，但死锁时一定处于不安全状态。系统处于安全状态一定不会死锁。</p>
<h2 id="2-4-4、死锁的检测和解除"><a href="#2-4-4、死锁的检测和解除" class="headerlink" title="2.4.4、死锁的检测和解除"></a>2.4.4、死锁的检测和解除</h2><h3 id="如何检测"><a href="#如何检测" class="headerlink" title="如何检测"></a>如何检测</h3><ul>
<li>数据结构：==资源分配图==<ul>
<li>两种结点<ul>
<li>进程结点</li>
<li>资源结点</li>
</ul>
</li>
<li>两种边<ul>
<li>进程结点—&gt;资源结点(请求边)</li>
<li>资源结点—&gt;进程结点(分配边)</li>
</ul>
</li>
</ul>
</li>
<li>==死锁检测算法==<ul>
<li>==依次消除与不阻塞进程相连的边，直到无边可消==</li>
<li>注：所谓不阻塞进程是指其申请的资源数还足够的进程</li>
<li>死锁定理：若资源分配图是不可完全简化的，说明发生了死锁</li>
</ul>
</li>
<li>如何解除<ul>
<li>资源剥夺法</li>
<li>撤销进程法(终止进程法)</li>
<li>进程回退法</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>操作系统2.3</title>
    <url>/blog/2020/05/13/OSsecondthree/</url>
    <content><![CDATA[<h2 id="2-3-1互斥同步"><a href="#2-3-1互斥同步" class="headerlink" title="2.3.1互斥同步"></a>2.3.1互斥同步</h2><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><ul>
<li>并发性带来了异步性，有时需要通过进程同步解决这种异步问题。有的进程之间需要相互配合地完成工作，各进程的工作推进需要遵循一定的先后顺序。</li>
</ul>
<h3 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h3><ul>
<li><p>对临界资源的访问，需要互斥的进行。即同一时间段内只能允许一个进程访问该资源</p>
</li>
<li><p>四个部门</p>
<ul>
<li>进入区<ul>
<li>检查是否可进入临界区，若可进入，需要“上锁”</li>
</ul>
</li>
<li>临界区<ul>
<li>访问邻接资源的那段代码</li>
</ul>
</li>
<li>退出区<ul>
<li>负责“解锁”</li>
</ul>
</li>
<li>剩余区<ul>
<li>其余代码部分</li>
</ul>
</li>
</ul>
</li>
<li><p>需要遵循的原则</p>
<ul>
<li>空闲让进<ul>
<li>临界区空闲时，应允许一个进程访问</li>
</ul>
</li>
<li>忙则等待<ul>
<li>临界区正在被访问时，其他试图访问的进程需要等待</li>
</ul>
</li>
<li>有限等待<ul>
<li>要在有限时间内进入临界区，保证不会饥饿</li>
</ul>
</li>
<li>让权等待<ul>
<li>进不了临界区的进程，需释放处理机，防止忙等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-3-2进程互斥的软件实现方法"><a href="#2-3-2进程互斥的软件实现方法" class="headerlink" title="2.3.2进程互斥的软件实现方法"></a>2.3.2进程互斥的软件实现方法</h2><h3 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h3><ul>
<li>在进入区只做“检查”，不做“上锁”</li>
<li>在退出区把临界区的使用权转交给另一个进程(相当于在退出区既给另一个进程“解锁”，又给自己“上锁”)</li>
<li>主要问题：不遵循“空闲让进”原则</li>
</ul>
<h3 id="双标志先检查"><a href="#双标志先检查" class="headerlink" title="双标志先检查"></a>双标志先检查</h3><ul>
<li>在进入区先“检查”后“上锁”，退出区“解锁”</li>
<li>主要问题：不遵循“忙则等待”原则</li>
</ul>
<h3 id="双标志后检查"><a href="#双标志后检查" class="headerlink" title="双标志后检查"></a>双标志后检查</h3><ul>
<li>在进入区先“加锁”后“检查，退出区“解锁”</li>
<li>主要问题：不遵循“空闲让进，有限等待”原则，可能导致“饥饿”</li>
</ul>
<h3 id="Peterson算法"><a href="#Peterson算法" class="headerlink" title="Peterson算法"></a>Peterson算法</h3><ul>
<li>在进入区“主动争取—主动谦让—检查对方是否相近、己方是否谦让”</li>
<li>主要问题：不遵循“让权等待”原则，会发送“忙等”</li>
</ul>
<h2 id="2-3-3进程互斥的硬件实现方法"><a href="#2-3-3进程互斥的硬件实现方法" class="headerlink" title="2.3.3进程互斥的硬件实现方法"></a>2.3.3进程互斥的硬件实现方法</h2><h3 id="中断屏蔽方法"><a href="#中断屏蔽方法" class="headerlink" title="中断屏蔽方法"></a>中断屏蔽方法</h3><ul>
<li>使用“开/关中断”指令实现</li>
<li>优点：简单高效</li>
<li>缺点：只适用于单片机；只适用于操作系统内核进程</li>
</ul>
<h3 id="TestAndSet-TS指令-TSL指令"><a href="#TestAndSet-TS指令-TSL指令" class="headerlink" title="TestAndSet(TS指令/TSL指令)"></a>TestAndSet(TS指令/TSL指令)</h3><ul>
<li><p>1、old记录是否已被上锁；</p>
<p>2、再将lock设为true；</p>
<p>3、检查临界区是否已被上锁(若以上锁，则循环重复前几步)</p>
</li>
<li><p>优点：实现简单；适用于多处理机环境</p>
</li>
<li><p>缺点：不满足让权等待</p>
</li>
</ul>
<h3 id="Swap指令-XCHG指令"><a href="#Swap指令-XCHG指令" class="headerlink" title="Swap指令(XCHG指令)"></a>Swap指令(XCHG指令)</h3><ul>
<li>逻辑上同TSL</li>
</ul>
<h2 id="2-3-4、信号量机制"><a href="#2-3-4、信号量机制" class="headerlink" title="2.3.4、信号量机制"></a>2.3.4、信号量机制</h2><h3 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h3><ul>
<li>用一个整数型变量作为信号量，数值表示某种资源数</li>
<li>整型信号量与普通整型变量的区别：对信号量只能执行初始化、P、V三种操作</li>
<li>整型信号量==存在的问题：不满足让权等待原则==</li>
</ul>
<h3 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h3><ul>
<li>S.value表示某种资源数，S.L指向等待该资源的队列</li>
<li>P操作中，一定是先S.value–，之后可能需要执行block原语</li>
<li>V操作中，一定是先S.value++，之后可能需要执行wakeup原语</li>
<li>注意：==要能够自己推断在什么条件下需要执行block或wakeup==</li>
<li>可以用记录型信号量实现系统资源的“申请”和“释放”</li>
<li>可以用记录型信号量实现进程互斥、进程同步</li>
</ul>
<p>注：若考试中出现P(S)、V(S)的操作，除非特别说明，否则默认S为记录型信号量</p>
<h2 id="2-3-5、用信号量实现进程互斥、同步、前驱关系"><a href="#2-3-5、用信号量实现进程互斥、同步、前驱关系" class="headerlink" title="2.3.5、用信号量实现进程互斥、同步、前驱关系"></a>2.3.5、用信号量实现进程互斥、同步、前驱关系</h2><h3 id="实现进程互斥"><a href="#实现进程互斥" class="headerlink" title="实现进程互斥"></a>实现进程互斥</h3><ul>
<li>分析问题，确定临界区</li>
<li>设置互斥信号量，初值为1（==互斥问题，信号量初值为1==）</li>
<li>==临界区之前==对信号量执行P操作</li>
<li>==临界区之后==对信号量执行V操作</li>
</ul>
<h3 id="实现进程同步"><a href="#实现进程同步" class="headerlink" title="实现进程同步"></a>实现进程同步</h3><ul>
<li>分析问题，找出哪里需要实现“一前一后”的同步关系</li>
<li>设置同步信号量，初始值为0（==同步问题，信号量初值为0==）</li>
<li>在==“前操作”之后==执行V操作</li>
<li>在==“后操作”之前==执行P操作</li>
</ul>
<h3 id="实现进程的前驱关系"><a href="#实现进程的前驱关系" class="headerlink" title="实现进程的前驱关系"></a>实现进程的前驱关系</h3><ul>
<li>分析问题，画出前驱图，把每一对前驱关系都看成一个同步问题（前驱问题，本质上就是更复杂的同步问题）</li>
<li>为每一对前驱关系设置同步信号量，初值为0</li>
<li>在每一个“前操作”之后执行V操作</li>
<li>在每一个“后操作”之前执行P操作</li>
</ul>
<h2 id="2-3-6、生产者消费者问题"><a href="#2-3-6、生产者消费者问题" class="headerlink" title="2.3.6、生产者消费者问题"></a>2.3.6、生产者消费者问题</h2><p>PV 操作题目的解题思路：</p>
<p>1、关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关闭。        2、整理思路。根据各进程的操作流程确定P、V操作的大致顺序。<br>        3、设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。（互斥信号量初值一般为1，同步信号量的初始值要看对应资源的初始值是多少）。</p>
<p>生产者消费者问题是一个互斥、同步的综合问题。<br>        有时候是消费者需要等待生产者生产，有时候是生产者要等待消费者消费，这是两个不同的“一前一后问题”，因此也需要设置两个同步信号量。</p>
<p><img src="/blog/2020/05/13/OSsecondthree/OSsecondthree%5Cimage-20200515141953621.png" alt="生产者消费者"></p>
<p>==易错点==：实现互斥和实现同步的两个P操作的先后顺序</p>
<h2 id="2-3-7多生产者-多消费者问题"><a href="#2-3-7多生产者-多消费者问题" class="headerlink" title="2.3.7多生产者-多消费者问题"></a>2.3.7多生产者-多消费者问题</h2><p>解决“多生产者-多消费者问题”的关键在于理清复杂的同步关系。</p>
<p>在分析同步问题(一前一后问题)的时候不能从单个进程行为的角度来分析，要把“一前一后”发生的事看做是两种“事件”的前后关系。</p>
<p>比如，如果==从单个进程行为的角度来考虑==的话，我们会有以下结论：</p>
<p>==如果盘子里装有苹果，那么一定要女儿取走苹果后父亲或母亲才能再放入水果==</p>
<p>==如果盘子里装有橘子，那么一定要有儿子取走橘子后父亲或母亲才能再放入水果==</p>
<p>这么看是否就意味着要设置四个同步信号量分别实现这四个“一前一后”的关系了？</p>
<p>正确的分析方法应该==从“事件”的角度来考虑==，我们可以把上述四对“进程行为的前后关系”抽象为一对“事件的前后关系”</p>
<p>盘子变空事件-&gt;放入水果事件。“盘子变空事件”即可由儿子引发，也可由女儿引发；“放水果事件”既可能是父亲执行，也可能是母亲执行。这样的话，就可以用一个同步信号量解决问题了。</p>
<h2 id="2-3-8吸烟者问题"><a href="#2-3-8吸烟者问题" class="headerlink" title="2.3.8吸烟者问题"></a>2.3.8吸烟者问题</h2><p>吸烟者问题可以为我们解决“可以生产多个产品的单生产者”问题提供一个思路</p>
<p>值得吸取精华是：“轮流让各个吸烟者吸烟”必然需要“轮流的在桌上放上组合一、二、三”，注意体会我们是如何用一个整型变量i实现这个“轮流”过程的</p>
<p>如果题目改为“每次随机地让一个吸烟者吸烟”，我们又应该如何用代码写出这个逻辑？</p>
<p>若一个生产者要生产多种产品(或者说会引发多种前驱事件)，那么各个V操作应该放在各自对应“事件”发生之后的位置</p>
<h2 id="2-3-9读者-写者问题"><a href="#2-3-9读者-写者问题" class="headerlink" title="2.3.9读者-写者问题"></a>2.3.9读者-写者问题</h2><p>读者-写者问题为我们解决复杂的互斥问题提供了一个参考思路。</p>
<p>其==核心思想==在于设置了一个==计数器count==用来记录当前正在访问共享文件的读进程数。我们可以用count的值来判断当前进入的进程是否是第一个/最后一个读进程，从而做出不同的处理。</p>
<p>另外，对count变量的检查和赋值不能一气呵成导致了一些错误，如果==需要实现“一气呵成”，自然应该想到用互斥信号量。==</p>
<p>最后，还要体会我们是如何解决“写进程饥饿”问题的</p>
<h2 id="2-3-10哲学家进餐问题"><a href="#2-3-10哲学家进餐问题" class="headerlink" title="2.3.10哲学家进餐问题"></a>2.3.10哲学家进餐问题</h2><p>哲学家进餐问题的关键在于解决进程死锁。</p>
<p>这些内存之间只存在互斥关系，但是与之前接触到的互斥关系不同的是，每个进程都需要同时持有两个临界资源，因此就有“死锁”问题的隐患。</p>
<p>如果在考试中遇到了一个进程需要同时持有多个临界资源的情况，应该参考哲学家问题的思想，分析题中给出的进程之间是否会发送循环等待，是否会发生死锁</p>
<p>可以参考哲学家就餐问题解决死锁的三种思路</p>
<h2 id="2-3-11管程"><a href="#2-3-11管程" class="headerlink" title="2.3.11管程"></a>2.3.11管程</h2><ul>
<li>为什么要引入管程<ul>
<li>解决信号量机制编程麻烦、易出错的问题</li>
</ul>
</li>
<li>组成<ul>
<li>共享数据结构</li>
<li>对数据结构初始化的语句</li>
<li>一组用来访问数据结构的过程（函数）</li>
</ul>
</li>
<li>基本特征<ul>
<li>==各外部进程/线程只能通过管程提供的特定“入口”才能访问共享数据==</li>
<li>==每次仅允许一个进程在管程内执行某个内部过程==</li>
</ul>
</li>
<li>补充<ul>
<li>各进程必须互斥访问管程的特性是由编译器实现的</li>
<li>可在管程中设置条件变量及等待/唤醒操作以解决同步问题</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>操作系统3.1</title>
    <url>/blog/2020/05/16/OSthirdone/</url>
    <content><![CDATA[<h2 id="3-1-1、内存的基础知识"><a href="#3-1-1、内存的基础知识" class="headerlink" title="3.1.1、内存的基础知识"></a>3.1.1、内存的基础知识</h2><h3 id="什么是内存，有何作用"><a href="#什么是内存，有何作用" class="headerlink" title="==什么是内存，有何作用=="></a>==什么是内存，有何作用==</h3><ul>
<li>存储单元、内存地址的概念和联系</li>
<li>按字节编址 VS 按字编址</li>
</ul>
<h3 id="进程运行的基本原理"><a href="#进程运行的基本原理" class="headerlink" title="进程运行的基本原理"></a>进程运行的基本原理</h3><ul>
<li>指令的工作原理<ul>
<li>操作码+若干参数（可能包含地址参数）</li>
</ul>
</li>
<li>==逻辑地址（相对地址） vs 物理地址（绝对地址）==</li>
<li>==从写程序到程序运行==<ul>
<li>编辑源代码文件</li>
<li>编译<ul>
<li>由源代码文件生成目标模块(高级语言“翻译为”机器语言)</li>
</ul>
</li>
<li>链接<ul>
<li>由目标模块生成装入模块，链接后形成完整的逻辑地址</li>
</ul>
</li>
<li>装入<ul>
<li>将装入模块装入内存，装入后形成物理地址</li>
</ul>
</li>
</ul>
</li>
<li>三种链接方式<ul>
<li>静态链接<ul>
<li>装入前链接成一个完整装入模块</li>
</ul>
</li>
<li>装入时动态链接<ul>
<li>运行前面边装入边链接</li>
</ul>
</li>
<li>运行时动态链接<ul>
<li>运行时需要目标模块才装入并链接</li>
</ul>
</li>
</ul>
</li>
<li>==三种装入方式==<ul>
<li>绝对装入<ul>
<li>编译时产生绝对地址</li>
</ul>
</li>
<li>可重定位装入<ul>
<li>装入时将逻辑地址转换为物理地址</li>
</ul>
</li>
<li>==动态运行时装入==<ul>
<li>运行时将逻辑地址转换为物理地址，需设置重定位寄存器</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-1-2、内存管理的概念"><a href="#3-1-2、内存管理的概念" class="headerlink" title="3.1.2、内存管理的概念"></a>3.1.2、内存管理的概念</h2><h3 id="内存空间的分配与回收"><a href="#内存空间的分配与回收" class="headerlink" title="内存空间的分配与回收"></a>内存空间的分配与回收</h3><h3 id="内存空间的扩充（实现虚拟性）"><a href="#内存空间的扩充（实现虚拟性）" class="headerlink" title="内存空间的扩充（实现虚拟性）"></a>内存空间的扩充（实现虚拟性）</h3><h3 id="地址转换"><a href="#地址转换" class="headerlink" title="地址转换"></a>地址转换</h3><ul>
<li>操作系统负责实现逻辑地址到物理地址的转换</li>
<li>三种方式<ul>
<li>绝对装入：编译器负责地址转换（单道程序阶段，无操作系统）</li>
<li>==可重定位装入：装入程序负责地址转换（早期多道批处理阶段）==</li>
<li>==动态运行时装入：运行时才进行地址转换（现代操作系统）==</li>
</ul>
</li>
</ul>
<h3 id="存储保护"><a href="#存储保护" class="headerlink" title="存储保护"></a>存储保护</h3><ul>
<li>保障各进程在自己的内存空间内运行，不会越界访问</li>
<li>两种方式<ul>
<li>设置上下限寄存器</li>
<li>利用重定位寄存器、界地址寄存器进行判断</li>
</ul>
</li>
</ul>
<h2 id="3-1-3、覆盖与交换"><a href="#3-1-3、覆盖与交换" class="headerlink" title="3.1.3、覆盖与交换"></a>3.1.3、覆盖与交换</h2><h3 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h3><ul>
<li>一个固定区<ul>
<li>存放最活跃的程序段</li>
<li>==固定区中的程序段再运行过程中不会调入调出==</li>
</ul>
</li>
<li>若干覆盖区<ul>
<li>不可能同时被访问程序段可共享一个覆盖区</li>
<li>==覆盖区中的程序段在运行过程中会根据需要调入调出==</li>
<li>必须由程序员声明覆盖结构，操作系统完成自动覆盖</li>
<li>==缺点：对用户不透明，==增加了用户编程负担</li>
</ul>
</li>
<li>交换技术<ul>
<li>内存紧张时，换出某些进程以腾出内存空间，再换入某些进程</li>
<li>磁盘分为文件区和对换区，换出的进程放在对换区</li>
</ul>
</li>
<li>覆盖与交换的区别<ul>
<li>覆盖是在同一个程序或进程中的</li>
<li>交换是在不同进程（或作业）之间的</li>
</ul>
</li>
</ul>
<h2 id="3-1-4、连续分配管理"><a href="#3-1-4、连续分配管理" class="headerlink" title="3.1.4、连续分配管理"></a>3.1.4、连续分配管理</h2><h3 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h3><ul>
<li>只支持单道程序，内存分为系统区和用户区，用户程序放在用户区</li>
<li>==无外部碎片，有内部碎片==</li>
</ul>
<h3 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h3><ul>
<li>支持多道程序，内存用户空间分为若干个固定大小的分区，每个分区只能装一道作业</li>
<li>==无外部碎片，有内部碎片==</li>
<li>两种分区方式<ul>
<li>分区大小相等</li>
<li>分区大小不等</li>
</ul>
</li>
<li>动态分区分配<ul>
<li>支持多道程序，在进程装入内存时，根据进程的大小动态地建立分区</li>
<li>==无内部碎片，有外部碎片==</li>
<li>外部碎片可用“紧凑”技术来解决</li>
<li>回收内存分区时，可能遇到四种情况<ul>
<li>回收区之后有相邻的空闲分区</li>
<li>回收区之前有相邻的空闲分区</li>
<li>回收区前、后都有相邻的空闲分区</li>
<li>回收区前、后都没有相邻的空闲分区</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-1-5、动态分区分配算法"><a href="#3-1-5、动态分区分配算法" class="headerlink" title="3.1.5、动态分区分配算法"></a>3.1.5、动态分区分配算法</h2><table>
<thead>
<tr>
<th>算法</th>
<th>==算法思想==</th>
<th>分区排列顺序</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>首次适应</td>
<td>==从头到尾找适合的==</td>
<td>空闲分区以地址递增次序排列</td>
<td>综合看性能最好。<strong>算法开销小</strong>，回收分区后一般不需要对空闲分区队列重新排序</td>
<td></td>
</tr>
<tr>
<td>最佳适应</td>
<td>==优先使用更小的分区，以保留更多大分区==</td>
<td>空闲分区以容量递增次序排列</td>
<td>会有更多的大分区被保留下来，更能满足大进程需求</td>
<td>会产生很多太小的，难以利用的碎片；<strong>算法开销大</strong>，回收分区后可能需要对空闲分区队列重新排序</td>
</tr>
<tr>
<td>最坏适应</td>
<td>==优先使用更大的分区，以防止产生太小的不可用的碎片==</td>
<td>空闲分区以容量递减次序排列</td>
<td>可以减少难以利用的小碎片</td>
<td>大分区容易被用完，不利于大进程；<strong>算法开销大</strong>（原因同上）</td>
</tr>
<tr>
<td>邻近适应</td>
<td>==由首次适应演变而来，每次从上次查找结束位置开始查找==</td>
<td>空闲分区以地址递增次序排列（可排列成循环链表）</td>
<td>不用每次都从低地址的小分区开始检索。<strong>算法开销小</strong>（原因同首次适应算法）</td>
<td>会使高地址的大分区也被用完</td>
</tr>
</tbody></table>
<h2 id="3-1-6、基本分页存储管理的基本概念"><a href="#3-1-6、基本分页存储管理的基本概念" class="headerlink" title="3.1.6、基本分页存储管理的基本概念"></a>3.1.6、基本分页存储管理的基本概念</h2><h3 id="基本分页存储管理的思想：把进程分页，各个页面可离散地放到各个的内存块中"><a href="#基本分页存储管理的思想：把进程分页，各个页面可离散地放到各个的内存块中" class="headerlink" title="基本分页存储管理的思想：把进程分页，各个页面可离散地放到各个的内存块中"></a>基本分页存储管理的思想：把进程分页，各个页面可离散地放到各个的内存块中</h3><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="==重要概念=="></a>==重要概念==</h3><ul>
<li>“页框、页帧、内存块、物理块” VS “页、页面”</li>
<li>“页框号、页帧号、内存块号、物理块号” VS “页号、页面号”</li>
</ul>
<h3 id="如何实现地址转换"><a href="#如何实现地址转换" class="headerlink" title="如何实现地址转换"></a>如何实现地址转换</h3><p>1、计算出逻辑地址对应的页号</p>
<p>2、找到对应页面在内存中的存放位置</p>
<p>3、算出逻辑地址对应的页内偏移量</p>
<p>4、物理地址 = 页面始址 + 页内偏移量</p>
<h3 id="页号、页内偏移量的计算"><a href="#页号、页内偏移量的计算" class="headerlink" title="==页号、页内偏移量的计算=="></a>==页号、页内偏移量的计算==</h3><ul>
<li>页号 = 逻辑地址/页面大小；页内偏移量 = 逻辑地址%页面大小</li>
<li>或根据逻辑地址结构计算，逻辑地址=【页号P，页内偏移量W】</li>
</ul>
<h3 id="页表"><a href="#页表" class="headerlink" title="==页表=="></a>==页表==</h3><ul>
<li>页表记录进程页面和实际存放的内存块之间的对应关系</li>
<li>一个进程对应一张页表，进程的每一页对应一个页表项，每个页表项由“页号”和“块号”组成</li>
<li>每个页表项的长度是相同的，页号是“隐含”的</li>
</ul>
<h2 id="3-1-7、基本地址变换机构"><a href="#3-1-7、基本地址变换机构" class="headerlink" title="3.1.7、基本地址变换机构"></a>3.1.7、基本地址变换机构</h2><h3 id="页表寄存器的作用"><a href="#页表寄存器的作用" class="headerlink" title="页表寄存器的作用"></a>页表寄存器的作用</h3><ul>
<li>存放页表起始地址</li>
<li>存放页表长度</li>
</ul>
<h3 id="地址变换过程"><a href="#地址变换过程" class="headerlink" title="==地址变换过程=="></a>==地址变换过程==</h3><ul>
<li>1.根据逻辑地址算出页号、页内偏移量</li>
<li>2.页号的合法性检查（与页表长度对比）</li>
<li>3.若页号合法，再根据页表起始地址、页号找到对应页表项（第一次访问内存：查页表）</li>
<li>4.根据页表项中记录的内存块号、页内偏移量得到最终的物理地址</li>
<li>5.访问物理内存对应的内存单元（第二次访问内存：访问目标内存单元）</li>
</ul>
<h3 id="其他小细节"><a href="#其他小细节" class="headerlink" title="其他小细节"></a>其他小细节</h3><ul>
<li>==页内偏移量位数与页面大小之间的关系（要能用其中一个条件推出另一个条件）==</li>
<li>==页式管理中地址是一维的==</li>
<li>实际应用中，通常使一个页框恰好能放入整数个页表项</li>
<li>为了方便找到页表项，页表一般是放在连续的内存块中的</li>
</ul>
<h2 id="3-1-8、具有快表的地址变换机构"><a href="#3-1-8、具有快表的地址变换机构" class="headerlink" title="3.1.8、具有快表的地址变换机构"></a>3.1.8、具有快表的地址变换机构</h2><table>
<thead>
<tr>
<th></th>
<th>地址变换过程</th>
<th>访问一个逻辑地址的访存次数</th>
</tr>
</thead>
<tbody><tr>
<td>基本地址变换机构</td>
<td>①算页号、页内偏移量②检查页号合法性③查页表，找到页面存放的内存块号④根据内存块号与页内偏移量得到物理地址⑤访问目标内存单元</td>
<td>==两次访存==</td>
</tr>
<tr>
<td>具有快表的地址变换机构</td>
<td>①算页号、页内偏移量②检查页号合法性③==查快表==。若未命中，即可知道页面存放的内存块号，可直接进行⑤；若未命中则进行④；④查页表，找到页面存放的内存块号，==并且将页表项复制到快表中==⑤根据内存块号与页内偏移量得到物理地址⑥访问目标内存单元</td>
<td>快表==命中==，只需==一次访存；==快表==未命中==，需要==两次访存==</td>
</tr>
</tbody></table>
<h2 id="3-1-9、两级页表"><a href="#3-1-9、两级页表" class="headerlink" title="3.1.9、两级页表"></a>3.1.9、两级页表</h2><h3 id="单级页表存在的问题"><a href="#单级页表存在的问题" class="headerlink" title="单级页表存在的问题"></a>单级页表存在的问题</h3><ul>
<li>所以页表项必须连续存放，页表过大时需要很大的连续空间</li>
<li>在一段时间内并非所有页面都用得到，因此没必要让整个页表常驻内存</li>
</ul>
<h3 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h3><ul>
<li>将长长的页表再分页</li>
<li>==逻辑地址结构：（一级页号，二级页号，页内偏移量）==</li>
<li>==注意几个术语：页目录表/外层页表/顶级页表==</li>
</ul>
<h3 id="如何实现地址变换"><a href="#如何实现地址变换" class="headerlink" title="如何实现地址变换"></a>如何实现地址变换</h3><p>①按照地址结构将逻辑地址拆分成三部分</p>
<p>②从PCB中读出页目录表始址，根据一级页号查页目录表，找到下一级页表在内存中的存放位置</p>
<p>③根据二级页号查表，找到最终想访问的内存块号</p>
<p>④结合页内偏移量得到物理地址</p>
<h3 id="几个细节"><a href="#几个细节" class="headerlink" title="几个细节"></a>几个细节</h3><ul>
<li>==多级页表中，各级页表的大小不能超过一个页面。若两级页表不够，可以分更多级==</li>
<li>==多级页表的访存次数（假设没有快表机构）——N级页表访问一个逻辑地址需要N+1次访存==</li>
</ul>
<h2 id="3-1-10、-基本分段存储管理"><a href="#3-1-10、-基本分段存储管理" class="headerlink" title="3.1.10、 基本分段存储管理"></a>3.1.10、 基本分段存储管理</h2><h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><ul>
<li>将地址空间按照程序自身的逻辑关系划分为若干个段，每段从0开始编址</li>
<li>每个段在内存中占据连续空间，但各段之间可以不相邻</li>
<li>逻辑地址结构：（段号，段内地址）</li>
</ul>
<h3 id="段表"><a href="#段表" class="headerlink" title="段表"></a>段表</h3><ul>
<li>记录逻辑段到实际存储地址的映射关系</li>
<li>每个段对应一个段表项。各段表项长度相同，由段号（隐含）、==段长==、基址组成</li>
</ul>
<h3 id="地址变换"><a href="#地址变换" class="headerlink" title="地址变换"></a>地址变换</h3><p>1.由逻辑地址得到段号、段内地址</p>
<p>2.段号与段表寄存器中的段长度比较，检查是否越界</p>
<p>3.由段表始址、段号找到对应段表项</p>
<p>==4、根据段表中记录的段长，检查段内地址是否越界==</p>
<p>5.由段表中的“基址+段内地址”得到最终的物理地址</p>
<p>6.访问目标单元</p>
<h3 id="分段-VS-分页"><a href="#分段-VS-分页" class="headerlink" title="分段 VS 分页"></a>分段 VS 分页</h3><ul>
<li>分页对用户不可见，分段对用户可见</li>
<li>分页的地址空间是一维的，分段的地址空间是二维的</li>
<li>分段更容易实现信息的共享和保护（纯代码/可重入代码可以共享）</li>
<li>分页（单级页表）、分段访问一个逻辑地址都需要两次访存，分段存储中也可以引入快表机构</li>
</ul>
<h2 id="3-1-11、段页式管理"><a href="#3-1-11、段页式管理" class="headerlink" title="3.1.11、段页式管理"></a>3.1.11、段页式管理</h2><h3 id="分段-分页"><a href="#分段-分页" class="headerlink" title="分段+分页"></a>分段+分页</h3><ul>
<li>将地址空间按照程序自身的逻辑关系划分为若干个段，再将各段分为大小相等的页面</li>
<li>将内存空间分为与页面大小相等的一个个内存块，系统以块为单位为进程分配内存</li>
<li>逻辑地址结构：（段号，页号，页内偏移量）</li>
</ul>
<h3 id="段表、页表"><a href="#段表、页表" class="headerlink" title="段表、页表"></a>段表、页表</h3><ul>
<li>每一个段对应一个段表项。各段表项长度相同，由段号（隐含）、==页表长度、页表存放地址==组成</li>
<li>每个页对应一个页表项。各页表项长度相同，由页号（隐含）、页面存放的内存块号组成</li>
</ul>
<h3 id="地址变换-1"><a href="#地址变换-1" class="headerlink" title="地址变换"></a>地址变换</h3><p>1.由逻辑地址得到段号、页号、页内偏移量</p>
<p>2.段号与段表寄存器中的段长度比较，检查是否越界</p>
<p>3.有段表始址、段号找到对应段表项</p>
<p>==4.根据段表中记录的页表长度，检查页号是否越界==</p>
<p>5.由段表中的页表地址、页号得到查询页表，找到相应页表项</p>
<p>6.由页面存放的内存块号、页内偏移量得到最终的物理地址</p>
<p>7.访问目标单元</p>
<h3 id="访问一个逻辑地址所需访存次数"><a href="#访问一个逻辑地址所需访存次数" class="headerlink" title="访问一个逻辑地址所需访存次数"></a>访问一个逻辑地址所需访存次数</h3><ul>
<li>第一次——-查段表、第二次——-查页表、第三次——–访问目标单元</li>
<li>可引入快表机构，以段号和页号为关键字查询快表，即可直接找到最终的目标页面存放位置。引入快表后仅需一次访存</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>操作系统2.2</title>
    <url>/blog/2020/05/12/OSsecondtwo/</url>
    <content><![CDATA[<h2 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>按某种算法选择一个进程将处理机分配给它</li>
</ul>
<h3 id="三个层次"><a href="#三个层次" class="headerlink" title="三个层次"></a>三个层次</h3><ul>
<li><p>高级调度<strong>(作业调度)</strong></p>
<ul>
<li>按照某种规则，从后备队列中选择合适的作业将其调入内存，并为其创建进程</li>
</ul>
</li>
<li><p>中级调度<strong>(内存调度)</strong></p>
<ul>
<li>按照某种规则，从挂起队列中选择合适的进程将其数据调回内存</li>
</ul>
</li>
<li><p>低级调度(进程调度)</p>
<ul>
<li>按照某种规则，从就绪队列中选择一个进程为其分配处理机</li>
</ul>
</li>
</ul>
<h3 id="三层调度的联系、对比"><a href="#三层调度的联系、对比" class="headerlink" title="三层调度的联系、对比"></a>三层调度的联系、对比</h3><ul>
<li>高级调度<ul>
<li>外存-&gt;内存(面向作业)</li>
<li>发生频率：最低</li>
</ul>
</li>
<li>中级调度<ul>
<li>外存-&gt;内存(面向进程)</li>
<li>发送频率：中等</li>
</ul>
</li>
<li>低级调度<ul>
<li>内存-&gt;CPU</li>
<li>发生频率：最高</li>
</ul>
</li>
</ul>
<h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><ul>
<li><p>为减轻系统负载，提供资源利用率，暂时不执行的进程会被调到外存从而变为“挂起态”</p>
</li>
<li><p>七状态模型：在五状态模型的基础上加入了“就绪挂起”和“阻塞挂起”两种状态</p>
</li>
</ul>
<h2 id="进程调度的时机、切换与过程、调度方式"><a href="#进程调度的时机、切换与过程、调度方式" class="headerlink" title="进程调度的时机、切换与过程、调度方式"></a>进程调度的时机、切换与过程、调度方式</h2><h3 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h3><ul>
<li>什么时候需要进程调度？<ul>
<li>主动放弃<ul>
<li>进程正常终止</li>
<li>运行过程中发生异常而终止</li>
<li>主动阻塞(如等待I/O)</li>
</ul>
</li>
<li>被动放弃<ul>
<li>分给进程的时间片用完</li>
<li>有更紧急的事情需要处理(如I/O中断)</li>
<li>有更高优先级的进程进入就绪队列</li>
</ul>
</li>
</ul>
</li>
<li>什么时候不能进行进程调度<ul>
<li>在处理中断的过程中</li>
<li>进程在操作系统内核程序临界区中</li>
<li>原子操作过程中(原语)</li>
</ul>
</li>
</ul>
<h3 id="切换与过程"><a href="#切换与过程" class="headerlink" title="切换与过程"></a>切换与过程</h3><ul>
<li>切换过程<ul>
<li>对原来运行进程各种数据的保存</li>
<li>对新的进程各种数据的恢复</li>
</ul>
</li>
<li>重要结论：<strong>进程调度、切换是有代价的</strong>，并不是调度越频繁，并发度越高</li>
</ul>
<h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ul>
<li>非剥夺调度方式(非抢占式)<ul>
<li>只能由当前运行的进程主动放弃CPU</li>
</ul>
</li>
<li>剥夺调度方式(抢占式)<ul>
<li>可由操作系统剥夺当前进程的CPU使用权</li>
</ul>
</li>
</ul>
<h2 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h2><h3 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h3><ul>
<li>$$<br>利用率 = 忙碌的时间/总时间<br>$$</li>
</ul>
<h3 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h3><ul>
<li>$$<br>系统吞吐量 = 总共完成了多少道作业/总共花了多少时间<br>$$</li>
</ul>
<h3 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h3><ul>
<li><p>$$<br>周转时间 = 作业完成时间-作业到达时间<br>$$</p>
</li>
<li><p>$$<br>平均周转时间 = 各作业周转时间之和/作业数<br>$$</p>
</li>
<li><p>$$<br>带权周转时间 = 作业周转时间 / 作业实际运行的时间<br>$$</p>
</li>
<li><p>$$<br>平均带权周转时间 = 各作业带权周转时间之和 / 作业数<br>$$</p>
</li>
</ul>
<h3 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h3><ul>
<li>//进程/作业                等待被服务的时间之和</li>
<li>周转时间-运行时间-(I/O操作的时间)</li>
<li>平均等待时间即   各个进程/作业等待时间的平均值</li>
</ul>
<h3 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h3><ul>
<li>从用户提交请求到首次产生响应所用的时间</li>
</ul>
<h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><h3 id="先来先服务-FCFS"><a href="#先来先服务-FCFS" class="headerlink" title="先来先服务(FCFS)"></a>先来先服务(FCFS)</h3><ul>
<li>思想&amp;&amp;规则<ul>
<li>按照到达的先后顺序调度，事实上就是等待时间越久越优先得到服务</li>
</ul>
</li>
<li>可抢占？<ul>
<li>非抢占式</li>
</ul>
</li>
<li>优点<ul>
<li>公平：实现简单</li>
</ul>
</li>
<li>缺点<ul>
<li>对短作业不利</li>
</ul>
</li>
<li>考虑到等待时间&amp;运行时间？<ul>
<li>等待时间√    </li>
<li>运行时间×</li>
</ul>
</li>
<li>会导致饥饿？<ul>
<li>不会</li>
</ul>
</li>
</ul>
<h3 id="短作业优先-SJF-SPF"><a href="#短作业优先-SJF-SPF" class="headerlink" title="短作业优先(SJF/SPF)"></a>短作业优先(SJF/SPF)</h3><ul>
<li>思想&amp;规则<ul>
<li>每次调度时选择当前已到达且运行时间最短的作业/进程</li>
</ul>
</li>
<li>可抢占？<ul>
<li>默认为非抢占式，也有SJF的抢占式，版本最短剩余时间优先算法(SRTN)</li>
</ul>
</li>
<li>优点<ul>
<li>“最短的”平均等待/周转时间</li>
</ul>
</li>
<li>缺点<ul>
<li>对长作业不利，可能导致饥饿；难以做到真正的短作业优先</li>
</ul>
</li>
<li>考虑到等待时间&amp;运行时间<ul>
<li>等待时间×</li>
<li>运行时间√</li>
</ul>
</li>
<li>会导致饥饿？<ul>
<li>会</li>
</ul>
</li>
</ul>
<h3 id="高响应比优先-HRRN"><a href="#高响应比优先-HRRN" class="headerlink" title="高响应比优先(HRRN)"></a>高响应比优先(HRRN)</h3><ul>
<li><p>$$<br>响应比 = (等待时间+要求服务的时间)/要求服务的时间<br>$$</p>
</li>
<li><p>思想&amp;规则</p>
<ul>
<li>非抢占式的调度算法，只有当前运行的进程主动放弃CPU时（正常/异常完成，或主动阻塞），才需要进行调度，调度时计算所有就绪进程的响应比，选响应比最高的进程上处理机</li>
</ul>
</li>
<li><p>可抢占式？</p>
<ul>
<li>非抢占式</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>上述两种算法的权衡折中，综合考虑的等待时间和运行时间</li>
</ul>
</li>
<li><p>缺点</p>
</li>
<li><p>考虑到等待时间&amp;运行时间？</p>
<ul>
<li>等待时间√</li>
<li>运行时间√</li>
</ul>
</li>
<li><p>会导致饥饿？</p>
<ul>
<li>不会</li>
</ul>
</li>
</ul>
<h3 id="时间片轮转-RR"><a href="#时间片轮转-RR" class="headerlink" title="时间片轮转(RR)"></a>时间片轮转(RR)</h3><ul>
<li>思想&amp;规则</li>
<li>可抢占？<ul>
<li>抢占式</li>
</ul>
</li>
<li>优点<ul>
<li>公平，适用于分时系统</li>
</ul>
</li>
<li>缺点<ul>
<li>频繁切换有开销，不区分优先级</li>
</ul>
</li>
<li>会导致饥饿？<ul>
<li>不会</li>
</ul>
</li>
<li>补充<ul>
<li>时间片太大或太小有何影响？</li>
</ul>
</li>
</ul>
<h3 id="优先级调度"><a href="#优先级调度" class="headerlink" title="优先级调度"></a>优先级调度</h3><ul>
<li>思想&amp;规则</li>
<li>可抢占？<ul>
<li>有抢占式的，也有非抢占式的。注意做题时的区别</li>
</ul>
</li>
<li>优点<ul>
<li>区分优先级，适用于实时系统</li>
</ul>
</li>
<li>缺点<ul>
<li>可能导致饥饿</li>
</ul>
</li>
<li>会导致饥饿？<ul>
<li>会</li>
</ul>
</li>
<li>补充<ul>
<li>动态/静态优先级。</li>
<li>各类型进程如何设置优先级？</li>
<li>如何调整优先级？</li>
</ul>
</li>
</ul>
<h3 id="多级反馈队列"><a href="#多级反馈队列" class="headerlink" title="多级反馈队列"></a>多级反馈队列</h3><ul>
<li>思想&amp;规则<ul>
<li>较复杂，注意理解</li>
</ul>
</li>
<li>可抢占？<ul>
<li>抢占式</li>
</ul>
</li>
<li>优点<ul>
<li>平衡优秀</li>
</ul>
</li>
<li>缺点<ul>
<li>一般不说它有缺点，不过可能导致饥饿</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>操作系统3.2</title>
    <url>/blog/2020/05/19/OSthirdtwo/</url>
    <content><![CDATA[<h2 id="3-2-1、虚拟内存的基本概念"><a href="#3-2-1、虚拟内存的基本概念" class="headerlink" title="3.2.1、虚拟内存的基本概念"></a>3.2.1、虚拟内存的基本概念</h2><h3 id="传统存储管理方式的特征、缺点"><a href="#传统存储管理方式的特征、缺点" class="headerlink" title="传统存储管理方式的特征、缺点"></a>传统存储管理方式的特征、缺点</h3><ul>
<li>一次性：作业数据必须一次全部调入内存</li>
<li>驻留性：作业数据在整个运行期间都会常驻内存</li>
</ul>
<h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><ul>
<li>时间局部性：现在访问的指令、数据在不久后很可能会被再次访问</li>
<li>空间局部性：现在访问的内存单元周围的内存空间，很可能在不久后会被访问</li>
<li>高速缓存技术：使用频繁的数据放到更高速的存储器中</li>
</ul>
<h3 id="虚拟内存的定义和特征"><a href="#虚拟内存的定义和特征" class="headerlink" title="虚拟内存的定义和特征"></a>虚拟内存的定义和特征</h3><ul>
<li><p>程序不需全部装入即可运行，运行时根据需要动态调入数据，若内存不够，还需换出一些数据</p>
</li>
<li><p>特征</p>
<ul>
<li>多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调入内存。</li>
<li>对换性：无需在作业运行时一直常驻内存，而是允许在作业运行过程中，将作业换入、换出。</li>
<li>虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量。</li>
</ul>
</li>
</ul>
<h3 id="如何实现虚拟内存技术"><a href="#如何实现虚拟内存技术" class="headerlink" title="如何实现虚拟内存技术"></a>如何实现虚拟内存技术</h3><ul>
<li>访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存==（请求调页功能）==</li>
<li>内存空间不够时，将内存中暂时用不到的信息换出到外存==（页面置换功能）==</li>
<li>虚拟内存的实现<ul>
<li>==请求分页存储管理==</li>
<li>请求分段存储管理</li>
<li>请求段页式存储管理</li>
</ul>
</li>
</ul>
<h2 id="3-2-2、请求分页管理方式"><a href="#3-2-2、请求分页管理方式" class="headerlink" title="3.2.2、请求分页管理方式"></a>3.2.2、请求分页管理方式</h2><h3 id="页表机制"><a href="#页表机制" class="headerlink" title="页表机制"></a>页表机制</h3><ul>
<li>在基本分页的基础上增加了几个表项</li>
<li>状态位：表示页面是否已在内存中</li>
<li>访问字段：记录最近被访问过几次，或记录上次访问的及时，供置换算法选择换出页面时参考</li>
<li>修改位：表示页面调入内存后是否被修改过，只有修改过的页面才需在置换时写回外存</li>
<li>外存地址：页面在外存中存放的位置</li>
</ul>
<h3 id="缺页中断机构"><a href="#缺页中断机构" class="headerlink" title="缺页中断机构"></a>缺页中断机构</h3><ul>
<li>找到页表项后检查是否已在内存，若没在内存，产生缺页中断</li>
<li>缺页中断处理中，需要讲目标页面调入内存，有必要时还要换出页面</li>
<li>缺页中断属于内中断，属于内中断中的“故障”，即可能被系统修复的异常</li>
<li>一条指令在执行过程中可能产生多次缺页中断</li>
</ul>
<h3 id="地址变换机构（重点关注与基本分页不同的地方）"><a href="#地址变换机构（重点关注与基本分页不同的地方）" class="headerlink" title="地址变换机构（重点关注与基本分页不同的地方）"></a>地址变换机构（重点关注与基本分页不同的地方）</h3><ul>
<li>找到页表项是需要检查页面是否在内存中</li>
<li>若页面不在内存中，需要请求调页</li>
<li>若内存空间不够，还需要调出页面</li>
<li>页面调入内存后，需要修改相应页表项</li>
</ul>
<h2 id="3-2-3、页面置换算法"><a href="#3-2-3、页面置换算法" class="headerlink" title="3.2.3、页面置换算法"></a>3.2.3、页面置换算法</h2><table>
<thead>
<tr>
<th></th>
<th>算法规则</th>
<th>优缺点</th>
</tr>
</thead>
<tbody><tr>
<td>最佳置换算法（OPT）</td>
<td>优先淘汰最长时间内不会被访问的页面</td>
<td>缺页率最小，性能最好；但无法实现</td>
</tr>
<tr>
<td>先进先出置换算法（FIFO）</td>
<td>优先淘汰最先进入内存的页面</td>
<td>实现简单；但性能很差，可能出现Belady异常</td>
</tr>
<tr>
<td>最近最久未使用置换算法（LRU）</td>
<td>优先淘汰最近最久没访问的页面</td>
<td>性能很好；但需要硬件支持，算法开销大</td>
</tr>
<tr>
<td>时钟置换算法CLOCK（NRU）</td>
<td>循环扫描个页面<br>第一轮淘汰访问位=0的，并将扫描过的页面访问位改为1。若第一轮没选中，则进行第二轮扫描</td>
<td>实现简单，算法开销小；但未考虑页面是否被修改过</td>
</tr>
<tr>
<td>改进型时钟置换算法CLOCK（改进型NRU）</td>
<td>若用（访问位，修改位）的形式表述，则<br>第一轮：淘汰(0,0)<br>第二轮：淘汰(0,1)，并将扫描过的页面访问位都置为0<br>第三轮：淘汰(0,0)<br>第四轮：淘汰(0,1)</td>
<td>算法开销较小，性能也不错</td>
</tr>
</tbody></table>
<h2 id="3-2-4、页面分配策略"><a href="#3-2-4、页面分配策略" class="headerlink" title="3.2.4、页面分配策略"></a>3.2.4、页面分配策略</h2><h3 id="驻留集"><a href="#驻留集" class="headerlink" title="==驻留集=="></a>==驻留集==</h3><ul>
<li>指请求分页存储管理中给进程分配的内存块的集合</li>
</ul>
<h3 id="页面分配、置换策略"><a href="#页面分配、置换策略" class="headerlink" title="页面分配、置换策略"></a>页面分配、置换策略</h3><ul>
<li>固定分配 VS 可变分配：区别在于进程运行期间驻留集大小是否可变</li>
<li>局部置换 VS 全局置换：区别在于发生缺页时是否只能从进程自己的页面中选择一个换出</li>
<li>==固定分配局部置换：==进程运行前就分配一定数量物理块，缺页时只能换出进程自己的某一页</li>
<li>==可变分配全局置换：==只要缺页就分配新物理块，可能来自空闲物理块，也可能需换出别的进程页面</li>
<li>==可变分配局部置换：==频繁缺页的进程，多分配一些物理块；缺页率很低的进程，回收一些物理块。知道缺页率合适</li>
</ul>
<h3 id="何时调入页面"><a href="#何时调入页面" class="headerlink" title="何时调入页面"></a>何时调入页面</h3><ul>
<li>预调页策略：一般用于进程运行前</li>
<li>请求调页策略：进程运行时，发现缺页再调页</li>
</ul>
<h3 id="从何处调页"><a href="#从何处调页" class="headerlink" title="从何处调页"></a>从何处调页</h3><ul>
<li>对换区——采用连续存储方式，速度更快;文件去——采用离散存储方式，速度更慢。</li>
<li>兑换区足够大：运行将数据从文件去复制到对换区，之后所以的页面调入、调出都是在内存与对换区之间进行</li>
<li>对换区不够大：不会修改的数据每次都从文件区调入；会修改的数据调出到对换区，需要时再从对换区调入</li>
<li>UNIX方法：第一次使用的页面都从文件区调入；调出的页面都写回对换区，再次使用时从对换区调入</li>
</ul>
<h3 id="抖动-颠簸-现象"><a href="#抖动-颠簸-现象" class="headerlink" title="==抖动(颠簸)现象=="></a>==抖动(颠簸)现象==</h3><ul>
<li>页面频繁换入换出的现象。==主要原因是分配给进程的物理块不够==</li>
</ul>
<h3 id="工作集"><a href="#工作集" class="headerlink" title="工作集"></a>工作集</h3><ul>
<li>在某段时间间隔里，进程实际访问页面的集合。驻留集大小一般不能小于工作集大小</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>命令行操作符</title>
    <url>/blog/2020/05/10/command-operatekey/</url>
    <content><![CDATA[<p>命令提示符（cmd）</p>
<p>启动：        开始+R，输入cmd<br>切换盘符：    盘符名称<br>进入文件夹：    cd 文件夹名称<br>进入多级文件夹：    cd 文件夹 1\文件夹 2\文件夹 3<br>回到上一级：    cd ..<br>回到盘符根路径：    cd <br>查看内容：    dir<br>清屏：        cls<br>退出：        exit</p>
]]></content>
  </entry>
  <entry>
    <title>css3</title>
    <url>/blog/2020/06/06/css3/</url>
    <content><![CDATA[<h2 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h2><p>学习内容</p>
<p>1.CSS是什么</p>
<p>2.CSS怎么用（快速入门）</p>
<p>3.<strong>CSS选择器（重点+难点）</strong></p>
<p>4.美化网页（文字，阴影，超链接，列表，渐变…）</p>
<p>5.盒子模型</p>
<p>6.浮动</p>
<p>7.定位</p>
<p>8.网页动画（特效效果）</p>
<h3 id="1-1、CSS是什么"><a href="#1-1、CSS是什么" class="headerlink" title="1.1、CSS是什么"></a>1.1、CSS是什么</h3><p>Cascading Style Sheet 层叠级联样式表</p>
<p>CSS：表现（美化网页）</p>
<p>字体，颜色，边距，高度，宽度，背景图片，网页定位，网页浮动…</p>
<h3 id="1-2、发展史"><a href="#1-2、发展史" class="headerlink" title="1.2、发展史"></a>1.2、发展史</h3><p>CSS1.0</p>
<p>CSS2.0   DIV （块）+ CSS ，HTML与CSS结构分离的思想，网页变得简单，SEO</p>
<p>CSS2.1   浮动，定位</p>
<p>CSS3.0    圆角，阴影，动画… 浏览器兼容性~</p>
<h3 id="1-3、快速入门"><a href="#1-3、快速入门" class="headerlink" title="1.3、快速入门"></a>1.3、快速入门</h3><p>style</p>
<p><strong>基本入门</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 规范：&lt;style&gt; 可以编写css的代码，每一个声明，最好使用分号结尾 </span></span><br><span class="line"><span class="comment">    语法：</span></span><br><span class="line"><span class="comment">      选择器&#123;</span></span><br><span class="line"><span class="comment">          声明1;</span></span><br><span class="line"><span class="comment">          声明2;</span></span><br><span class="line"><span class="comment">          声明3;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1&#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>建议使用下面这种规范：</p>
<p><img src="/blog/2020/06/06/css3/image-20200606222451319.png" alt="image-20200606222451319"></p>
<p>css的优势：</p>
<p>1、内容和表现分离</p>
<p>2、网页结构表现统一，可以实现复用</p>
<p>3、样式十分的丰富</p>
<p>4、建立使用独立于html的css文件</p>
<p>5、利用SEO，容易被搜索引擎收录！</p>
<h3 id="1-4、CSS的3种导入方式"><a href="#1-4、CSS的3种导入方式" class="headerlink" title="1.4、CSS的3种导入方式"></a>1.4、CSS的3种导入方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 内部样式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1&#123;</span><br><span class="line">      color: green;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 外部样式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 优先级：就近原则 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 行内样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>拓展：外部样式两种写法</p>
<ul>
<li>链接式：</li>
</ul>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span><span class="attr">href</span>=<span class="string">"css/style.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>导入式</li>
</ul>
<p>@import 是css2.1特有 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 导入式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url(<span class="string">"css/style.css"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Spring5</title>
    <url>/blog/2020/06/15/Spring-5/</url>
    <content><![CDATA[<h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><ul>
<li>Spring : 春天 —&gt;给软件行业带来了春天</li>
<li>2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。</li>
<li>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</li>
<li>Rod Johnson，Spring Framework创始人，著名作者。很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</li>
<li>Spring理念 : 使现有技术更加实用 , 本身就是一个大杂烩 , 整合现有的框架技术</li>
</ul>
<ul>
<li>SSH：Struct2 + Spring + Hibernate</li>
<li>SSM：SpringMVC + Spring + MyBatis</li>
</ul>
<p>官网 : <a href="http://spring.io/" target="_blank" rel="noopener">http://spring.io/</a></p>
<p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p>
<p>GitHub : <a href="https://github.com/spring-projects" target="_blank" rel="noopener">https://github.com/spring-projects</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul>
<li>Spring是一个开源免费的框架（容器）</li>
<li>Spring是一个轻量级的框架 , 非侵入式的</li>
<li><strong>控制反转( IoC)  , 面向切面编程 (Aop)</strong></li>
<li>对事务的处理 , 对框架整合的支持</li>
</ul>
<p><strong>总结一句话：Spring是一个轻量级的控制反转(IoC)和面向切面编程(AOP)的容器（框架）。</strong></p>
<h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p><img src="/blog/2020/06/15/Spring-5/%E4%B8%83%E5%A4%A7%E6%A8%A1%E5%9D%97.png" alt="img"></p>
<h3 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h3><p>现代化Java开发，即基于Spring的开发！</p>
<p><img src="/blog/2020/06/15/Spring-5/%E7%8E%B0%E4%BB%A3%E5%8C%96Java%E5%BC%80%E5%8F%91.png" alt="现代化java开发"></p>
<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架。</li>
<li>基于Spring Boot 快速开发单个微服务</li>
<li>约定大于配置！</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>SpringCloud是基于SpringBoot实现的</li>
</ul>
</li>
</ul>
<p>学习SpringBoot的前提是需要完全掌握Spring和SpringMVC，承上启下的作用！</p>
<p><strong>弊端：发展了太久之后，违背了原来的理念，配置十分繁琐，人称：”配置地域“！</strong></p>
<h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><p>1.UserDao 接口</p>
<p>2.UserDaoImpl 实现类</p>
<p>3.UserService 业务接口</p>
<p>4.UserServiceImpl 业务实现类</p>
<p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果代码量十分大，修改一次的成本代价十分昂贵！</p>
<p>我们使用一个Set接口实现.已经发生了革命性的变化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用set进行动态实现值的注入！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>之前，程序是主动创建对象！控制权在程序猿手上！</li>
<li>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象！</li>
</ul>
<p>这种思想，从本质上解决了问题，我们程序猿不用再去管理对象的创建了。系统的耦合性大大降低，可能更加专注在业务的实现上！这是IOC的原型！</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/blog/2020/05/09/idea-confidentkey/</url>
    <content><![CDATA[<p><strong>main方法：  main  /   psvm</strong></p>
<p><strong>for方法：    for + i  + Tab</strong></p>
<p><strong>不知道方法该填写什么参数的话，可以把光标放到待填方法内容中： Ctrl + P</strong></p>
<p><strong>复制当前行：Ctrl + D</strong></p>
<p><strong>格式化代码（变整洁）：Ctrl + Alt + L</strong></p>
<p><strong>选中替换：Ctrl + R</strong></p>
<p><strong>插入方法：Alt + Insert</strong></p>
<p><strong>Translation： 选中单词或者段落ctrl+shift+y翻译，ctrl+shift+s切换翻译源</strong></p>
<p><strong>上下移动代码：Ctrl+Shift+上下键</strong></p>
]]></content>
  </entry>
  <entry>
    <title>eclipse快捷键</title>
    <url>/blog/2020/05/10/eclipse-convenientkey/</url>
    <content><![CDATA[<p>常用的快捷键：</p>
<p>添加单行注释： Ctrl + /        取消：Ctrl + /<br>添加多行注释：Ctrl + Shift + /        取消：Ctrl + Shift + <br>向下复制一行：Ctrl + Alt + 向下<br>向上复制一行：Ctrl + Alt + 向上<br>向上移动代码：Alt + 向上<br>向下移动代码：Alt + 向下<br>删除当前行：Ctrl + D<br>格式化：Ctrl + Shift + F<br>智能提示：Alt + /<br>更改变量名称：Alt + Shift + R<br>弹出源代码的相关选项： Alt+Shift+S</p>
]]></content>
  </entry>
  <entry>
    <title>嵌入式学习</title>
    <url>/blog/2020/05/09/qianrushi-study/</url>
    <content><![CDATA[<p><strong>CISC(复杂指令集）与RISC（精简指令集）的区别</strong><br>![CISC(复杂指令集）与RISC（精简指令集）的区别](<a href="https://img-blog.csdnimg.cn/20200503155704487.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcxNzI4NA==,size_16,color_FFFFFF,t_70#pic_left" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20200503155704487.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcxNzI4NA==,size_16,color_FFFFFF,t_70#pic_left</a> =600x400)<br> <strong>CISC：复杂指令集(Complex Instruction Set Computer)</strong><br>①具有大量的指令和寻址方式<br>②8/2原则：80%的程序只使用20%的指令<br>③大多数程序只使用少量的指令就能够运行。<br><strong>RISC：精简指令集(Reduced Instruction Set Computer)</strong><br>①在通道中只包含最有用的指令<br>②确保数据通道快速执行每一条指令<br>③使CPU硬件结构设计变得更为简单</p>
<p>（Random Access Memory）RAM，随机存取存储器，具有随机访问的特性，是非易失性存储器。<br>SRAM 是“staticRAM（静态随机存储器）”的简称，之所以这样命名是因为当数据被存入其中后只要不掉电，不会消失。<br>①DRAM：它的基本原件是小电容，电容可以在两个极板上保留电荷，但是需要<strong>定期的充电（刷新）</strong>，否则数据会丢失。缺点：由于要定期刷新存储介质，存取速度较慢。<br>②SRAM：它是一种具有静止存取功能的内存，不需要定期刷新电路就能保存它内部存储的数据。其优点：存取速度快; 但是缺点是：功耗大，成本高。常用作存储容量<br>③SDRAM(Synchronous Dynamic Random Access Memory):同步动态随机存储器.是RAM中最快的一种。</p>
<p>NOR Flash芯片其内部结构是采用并行方式工作的，内部的地址线和数据线是分开的。其特点可以按字节随机读取任意单元的内容。NOR <strong>Flash可以直接运行启动代码。</strong><br>而NAND型Flash的基本工作方式是按顺序串行读取，一个区块写入或读出结束再进行下一个操作，采用的是串行方式工作。<br>因为作为ARM处理器内存空间必须要具备随机读写特性，所以只有NOR Flash才能挂在内存空间。</p>
<p><strong>硬件抽象层：</strong><br>①是一种软件。<br>②将操作系统与硬件平台隔开。<br>③有利于系统的模块化设计。</p>
<p><strong>在ARM系统中，MMU(存储管理单元)主要完成的工作：</strong><br>1.虚拟存储空间到物理存储空间的映射。(页式虚拟存储管理)<br>2.存储器访问权限的控制。<br>3.设置虚拟存储空间的缓冲特性。</p>
<p>TCB：任务控制块<br>MMU：存储管理单元<br>CACHE：高速缓存<br>DMA：直接存储器访问</p>
<p>总线带宽 ＝ 总线位宽×总线频率/8<br>例题：<br>某总线有 104 根信号线，其中数据总线32 根，若总线工作频率为 33MHz，则其理论最大传输率为 (C ) 。(注：本题答案中的 B 表示 Byte)<br> A.33 MB/s<br> B.64MB/s<br> C.132 MB/s<br> D.164 MB/s<br>总线带宽 ＝ 总线位宽×总线频率/8=32*33/8＝132MB/s         （数据总线32根说明了总线位宽是32位）</p>
<p><strong>可重入函数和不可重入函数：</strong><br>可重入函数：主要用于多任务环境中，一个可重入函数简单来说就是可以被中断的函数，也就是说，可以在这个函数执行的任何时刻中断它，转入OS调度下去执行另外一段代码，而返回控制时不会出现什么错误；<br>不可重入函数：由于使用了一些系统资源（全局变量区，中断向量表等），所以它如果被中断的话，可能会出现问题，这类函数是不能运行在多任务环境下的。</p>
<p><strong>三级流水线结构的<br>指令执行顺序：取值→译码→执行</strong><br>例题1：<br>执行指令    ADD PC，PC，#4后，PC的值为多少？<br>地址                         指令<br>0x7000             ADD PC，PC，#4<br>0x7004 ……<br>0x7008 ……<br>0x700C ……</p>
<p>（ARM长度时，每条指令为4字节长，所以<br><strong>取值在0X7000</strong>   <strong>译码在0X7004</strong>    <strong>执行在0X7008</strong>,人们习惯性约定将正在执行的指令作为参考点，<br>则PC值=当前程序执行位置+8，所以本题PC=0X7008开始算）<br>指令    ADD PC，PC，#4 是一条ARM指令，意思是 PC = PC + 4 = 0X7008 + 4 = 0X700C.</p>
<p>例题2：<br>若每一条指令都可以分解为取指、分析和执行三步。已知取指时间t取指＝4△t，分析时间 t分析＝3△t，执行时间 t 执行＝5△t。如果按串行方式执行完100条指令需要(C)△t。如果按照流水线方式执行，执行完100条指令需要(F)△t。<br>A.1190    B.1195    C.1200    D.1205    E.504    F.507    G.508    H.510</p>
<p>按串行方式，执行完一条指令才能执行下一条指令，那么执行完 100 条指令的时间为：（4＋3＋5）×100＝1200 ；<br>按流水线方式可以同时执行多条指令，（当第一条指令开始分析时，第二条指令开始取指；当第一条指令执行时，第二条指令分析，第三条指令取指；当第二条指令执行时，第三条指令分析，第四条指令取指……..以此类推，当第一条指令完成之后，每一个“执行”的周期就可以完成一条指令）<br>计算的时候，第一条指令必须算全过程时间，后面的指令计算执行时间即可。<br>如果流水线的子过程所用时间不一样长，则吞吐率应以最长子过程来计算。因此，我们可以计算得 100 条指令的执行时间为：（4＋3＋5）＋（100－1）×5＝507。</p>
<p><strong>staic的三种使用方法：</strong><br>1)在函数体内，一个被声明为静态的变量在这一函数被调用过程中维持其值不变。<br>2)在文件域内(但在函数体外)，一个被声明为静态的变量可以被文件域内所有函数访问，但不能被文件域外其它函数访问。它是一个本地的全局变量。<br>3)在文件域内，一个被声明为静态的函数只可被这一文件域内的其它函数调用。那就是，这个函数被限制在声明它的文件的本地范围内使用。</p>
<p><strong>位运算</strong><br>位逻辑运算<br>~  按位取反：    单目右结合<br>&amp;  按位与：        全1取1，否则取0   （有0取0）<br>^  按位异或：    相同取0，不同取1<br>|  按位或：        全0取0，否则取1    （有1取1）</p>
<p>移位运算<br>    &lt;&lt;    对操作数左移给出的位数        (左移一位相当于*2)<br>    &gt;&gt;    对操作数右移给出的位数        (右移一位相当于/2)</p>
<p>例子：<br>00111010  &lt;&lt; 3   =  (左移三位空出位补0)   11010000<br>00111010  &gt;&gt; 3      =   (右移三位,按右移后的最高位的值进行填补) 00000111<br>11011010  &gt;&gt;3    =    11101101<br>注意：<br>①位运算是对二进制的位进行运算<br>②只能对int型，char型和long型进行位运算</p>
<p>位运算的技巧：<br>采用位运算交换两个变量的值：<br>      a = a^b;<br>      b = a^b;<br>      a = a^b;  </p>
]]></content>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/blog/2020/05/10/markdownlanguage/</url>
    <content><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>不要使用一级标题</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>总结：标题使用#号表示，一个#代表1级标题，一共有6个级别，他们的大小依次变小</p>
<hr>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>第一个段落在这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里    </p>
<p>第二个段落这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里这里</p>
<p>总结：空格两个以上并且按下回车键（换行）就是下一个段落，没有的话这段文字就自成一段在Typora里面只需要回车换行</p>
<hr>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><em>两端一个星号斜体</em></p>
<p><strong>两端两个星号粗体</strong></p>
<p><strong><em>两端三个星号斜粗体</em></strong></p>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分隔线在一行中，使用三个以上的星号、减号、下划线来建立(可以隔开)</p>
<hr>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>两端两个波浪线</del></p>
<hr>
<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>markdown无下划线语法，但可以利用html语法<u></u></p>
<p><u>这是下划线</u></p>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用星号*、加号 +、减号 -其中之一来表示即可，注意需要和符号之间保持一个空格</p>
<ul>
<li><p>第一项</p>
</li>
<li><p>第二项</p>
</li>
<li><p>第三项</p>
</li>
</ul>
<hr>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>数字加上.             文本使用空格隔开</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<hr>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>有序和无序可以一起使用，只需要在子列表的选项前面添加四个空格</p>
<ol>
<li><p>第一项：  </p>
<ul>
<li>子列表1</li>
<li>子列表2</li>
<li>子列表3</li>
</ul>
</li>
<li><p>第二项：</p>
<ul>
<li>子列表1</li>
<li>子列表2</li>
<li>子列表3</li>
</ul>
</li>
</ol>
<hr>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块是用来引用的，比如链接或者一段文本</p>
<p>在段落的开头使用&gt;符号，使用空格，隔开文本</p>
<blockquote>
<p>引用的内容1</p>
<p>第二段引用的内容</p>
</blockquote>
<blockquote>
<p>引用的内容2</p>
</blockquote>
<blockquote>
<p>第二段引用的内容</p>
</blockquote>
<p>在引用里面也是分段落的，我们不是使用回车，而是使用&gt;成单个一行,即在段落1和段落2中间一行添加一个&gt;单独一行，使得区块没有断开</p>
<hr>
<h2 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h2><blockquote>
<p>引用</p>
<blockquote>
<p>2</p>
<blockquote>
<p>3</p>
</blockquote>
</blockquote>
</blockquote>
<p>越多&gt;表示区块越小</p>
<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>上下使用三个点进行包裹，最顶上的三个点后面可以写上代码的类型使得代码高亮</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'RUNOOB'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>插入链接有两种方式：</p>
<p>第一种：直接插入<br><a href="https://cxxqing.github.io/blog/" target="_blank" rel="noopener">https://cxxqing.github.io/blog/</a></p>
<p>这种方式适用于短的链接，但是过长的链接可能会看起来不得当</p>
<p>第二种：使用markdown语法插入<br>其实就是让一段文本，拥有跳转功能</p>
<p><a href="用一对小括号填写链接地址">用一对中括号填写链接名称</a>    一对小括号填写链接地址</p>
<p>第一种无法识别的话用一对尖括号&lt;链接地址&gt;百分百表示链接地址</p>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>![图片描述]()      </p>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<p> |    表头    |    表头    |</p>
<p>|    —-        |     —-    |</p>
<p>|    单元格    |    单元格|</p>
<p>|    单元格    |    单元格|</p>
<hr>
<h3 id="让表格自动对其方式"><a href="#让表格自动对其方式" class="headerlink" title="让表格自动对其方式"></a>让表格自动对其方式</h3><p>居右 -:</p>
<p>居左 :-</p>
<p>居中 :-:</p>
<p> |    左对齐    |    右对齐    |   居中对齐    |</p>
<p>|    :—-        |     —-:    |    :——:      |</p>
<p>|    单元格    |    单元格|    单元格  |    </p>
<p>|    单元格    |    单元格|    单元格  |    </p>
<hr>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>\   反斜杠        加上需要的符号就可以正常显示了</p>
<h2 id="代码中内容整体移动"><a href="#代码中内容整体移动" class="headerlink" title="代码中内容整体移动"></a>代码中内容整体移动</h2><p>选中内容全部左移：Ctrl +【</p>
<p>选中内容全部右移：Ctrl + 】</p>
]]></content>
  </entry>
  <entry>
    <title>Javaweb学习</title>
    <url>/blog/2020/05/14/javaweb/</url>
    <content><![CDATA[<h2 id="Javaweb"><a href="#Javaweb" class="headerlink" title="Javaweb"></a>Javaweb</h2><p>学习自：<a href="https://www.bilibili.com/video/BV12J411M7Sj?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV12J411M7Sj?p=1</a>    </p>
<h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><h4 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h4><p>web开发：</p>
<ul>
<li><p>web，网页的意思</p>
</li>
<li><p>静态web</p>
<ul>
<li>html.css</li>
<li>提供给所有人看的数据始终不会发生变化！</li>
</ul>
</li>
<li><p>动态web</p>
<ul>
<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同</li>
<li>技术栈：Servlet/JSP,ASP,PHP</li>
</ul>
<p>在java中，动态web资源开发的技术统称为Javaweb</p>
</li>
</ul>
<h4 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h4><p>web应用程序： 可以提供浏览器访问的程序；</p>
<ul>
<li><p>a.htm、b.html….多个web资源，这些web资源可以被外界访问，对外界提供服务；</p>
</li>
<li><p>能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上</p>
</li>
<li><p>URL</p>
</li>
<li><p>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</p>
</li>
<li><p>一个web应用由多部分组成(静态web，动态web)</p>
<ul>
<li>html, css, js</li>
<li>jsp, servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件(Properties)</li>
</ul>
<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理</p>
</li>
</ul>
<h4 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h4><ul>
<li><p>*.htm,*.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取，通络；</p>
<p><img src="/blog/2020/05/14/javaweb/image-20200515002613898.png" alt="image-20200515002613898"></p>
</li>
<li><p>静态web存在的缺点</p>
<ul>
<li>Web页面无法动态更新，所以用户看到的都是同一个页面<ul>
<li>轮播图，点击特效：伪动态</li>
<li>JavaScript[实际开发中，它用的最多]</li>
<li>VBScript</li>
</ul>
</li>
<li>它无法和数据库交互(数据无法持久化，用户无法交互)</li>
</ul>
</li>
</ul>
<h4 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h4><p>页面会动态展示：“web的页面展示效果因人而异</p>
<p><img src="/blog/2020/05/14/javaweb/image-20200515001740921.png" alt="image-20200515001740921"></p>
<p>缺点：</p>
<ul>
<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>，重新发布<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点：</p>
<ul>
<li><p>Web页面可以动态更新，所以用户看到都不是同一个页面</p>
</li>
<li><p>它可以与数据库交互(数据持久化：注册，商品信息，用户信息…..)</p>
<p><img src="/blog/2020/05/14/javaweb/image-20200515002307795.png" alt="image-20200515002307795"></p>
</li>
</ul>
<h3 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h3><h4 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h4><p><strong>ASP:</strong></p>
<ul>
<li>微软：国内最早流行的就是ASP；</li>
<li>在HTML中嵌入了VB的脚本，  ASP + COM;</li>
<li>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其混乱</li>
<li>维护成本高！</li>
<li>C#</li>
</ul>
<p><strong>php</strong></p>
<ul>
<li>php开发速度很快，功能很强大，跨平台，代码很简单（70%， WP）</li>
<li>无法承载大访问量的情况（局限性）</li>
</ul>
<p><strong>JSP/Servlet:</strong></p>
<p>B/S：浏览和服务器</p>
<p>C/S：客户端和服务器</p>
<ul>
<li>sun公司主推的B/S架构</li>
<li>基于java语言的（所有的大公司，或者一些开源的组件，都是用java写的）</li>
<li>可以承载三高问题带来的影响； </li>
<li>语法像ASP,  ASP –&gt;JSP，加强市场强度；</li>
</ul>
<p>…..</p>
<h4 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h4><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p>
<p><strong>IIS</strong> </p>
<p>微软的;ASP…Windows自带</p>
<p><strong>Tomcat</strong></p>
<p><img src="/blog/2020/05/14/javaweb/Tomcat-logo.png" alt="image-20200522093402530"></p>
<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet和JSP规范总是能在Tomcat中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>
<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/服务器" target="_blank" rel="noopener">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，它是最佳的选择</p>
<p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>10.0.0-M4。</strong></p>
<p>….</p>
<p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p>
<p>下载tomcat：</p>
<p>1、安装 or 解压</p>
<p>2、了解配置文件及目录结构</p>
<p>3、这个东西的作用</p>
<h3 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h3><h4 id="3-1、安装Tomcat"><a href="#3-1、安装Tomcat" class="headerlink" title="3.1、安装Tomcat"></a>3.1、安装Tomcat</h4><p> Tomcat官网：<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a></p>
<p><img src="/blog/2020/05/14/javaweb/Tomcat%E4%B8%8B%E8%BD%BD.png" alt="image-20200522094350611"></p>
<p><img src="/blog/2020/05/14/javaweb/%E8%A7%A3%E5%8E%8BTomcat%E5%AE%89%E8%A3%85%E5%8C%85.png" alt="image-20200522100420201"></p>
<h4 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h4><p>文件夹作用：</p>
<p><img src="/blog/2020/05/14/javaweb/Tomcat%E6%96%87%E4%BB%B6%E5%A4%B9%E4%BD%9C%E7%94%A8.png" alt="image-20200522101352070"></p>
<p><strong>启动，关闭Tomcat</strong></p>
<p><img src="/blog/2020/05/14/javaweb/%E5%90%AF%E5%8A%A8%E5%85%B3%E9%97%ADTomcat.png" alt="image-20200522102718557"></p>
<p>访问测试：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p>可能遇到的问题：</p>
<p>1、java环境变量没有配置</p>
<p>2、闪退问题：需要配置兼容性</p>
<p>3、乱码问题：配置文件中设置</p>
<h4 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h4><p><img src="/blog/2020/05/14/javaweb/%E9%85%8D%E7%BD%AETomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6.png" alt="image-20200522120749015"></p>
<p>可以配置启动的端口号</p>
<ul>
<li>tomcat的默认端口号为8080</li>
<li>mysql：3306</li>
<li>http：80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以配置主机的名称</p>
<ul>
<li>默认的主机名为：localhost    -&gt;127.0.0.1</li>
<li>默认网站应用存放的位置为：webapps</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a>高难度面试题：</h4><p>请你谈谈网站是如何进行访问的！</p>
<p>1、输入一个域名；回车</p>
<p>2、检查本机的C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射;</p>
<ul>
<li>有，直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>          www.carey.com</span><br></pre></td></tr></table></figure>

<ul>
<li>没有，去DNS服务器找，找到的话就返回，找不到就返回找不到；</li>
</ul>
<p><img src="/blog/2020/05/14/javaweb/%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E8%BF%87%E7%A8%8B.png" alt="image-20200522123410354"></p>
<h4 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h4><p>不会就先模仿</p>
<ul>
<li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹(webapps)下，就可以访问了</li>
</ul>
<p>网站应该有的结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps：Tomcat服务器的web目录</span><br><span class="line">    -ROOT</span><br><span class="line">    -carey：网站的目录名</span><br><span class="line">    	- WEB-INF</span><br><span class="line">      		-classes:java程序</span><br><span class="line">            -lib:web应用所依赖的jar包</span><br><span class="line">            -web.xml:网站配置文件</span><br><span class="line">        - index.html 默认的首页</span><br><span class="line">        - <span class="keyword">static</span></span><br><span class="line">            -css</span><br><span class="line">                -style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">        -......</span><br></pre></td></tr></table></figure>



<p>HTTP协议：面试</p>
<p>Maven：构建工具</p>
<ul>
<li>Maven安装包</li>
</ul>
<p>Servlet入门</p>
<ul>
<li>HelloWorld！</li>
<li>Servlet配置</li>
<li>原理</li>
</ul>
<h3 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h3><h4 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h4><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>
<ul>
<li>文本：html，字符串，…</li>
<li>超文本：图片，音乐，视频，定位，地图….</li>
</ul>
<p>http端口：80</p>
<p>https端口：443      s代表安全的</p>
<h4 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h4><ul>
<li>http1.0<ul>
<li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接。</li>
</ul>
</li>
<li>http2.0<ul>
<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源，断开连接。</li>
</ul>
</li>
</ul>
<h4 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h4><ul>
<li>客户端—请求(Request)—服务器</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request URL: https:<span class="comment">//www.baidu.com/   请求地址</span></span><br><span class="line">Request Method: GET			get方法/post方法</span><br><span class="line">Status Code: <span class="number">200</span> OK			状态码：<span class="number">200</span></span><br><span class="line">Remote(远程) Address: <span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept: text/html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>     语言</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>

<h5 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h5><ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>Get,Post</strong>， HEAD,DELETE,PUT,TRACT…<ul>
<li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li>
</ul>
</li>
</ul>
<h5 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，他所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式 GBK UTF-<span class="number">8</span> GB2312 ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language:告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST:主机....</span><br></pre></td></tr></table></figure>



<h4 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h4><ul>
<li>服务器—响应—客户端</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control: <span class="keyword">private</span>    缓存控制</span><br><span class="line">Connection: keep-alive    连接</span><br><span class="line">Content-Encoding: gzip		编码</span><br><span class="line">Content-Type: text/html		类型</span><br></pre></td></tr></table></figure>

<h5 id="1、响应体"><a href="#1、响应体" class="headerlink" title="1、响应体"></a>1、响应体</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，他所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式 GBK UTF-<span class="number">8</span> GB2312 ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language:告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST:主机....</span><br><span class="line">Refresh：告诉客户端，多久刷新一次</span><br><span class="line">Location：让网页重新定位</span><br></pre></td></tr></table></figure>

<h5 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h5><p>200：请求响应成功    200</p>
<p>3xx：请求重定向</p>
<ul>
<li>重定向：你重新到我给你新位置去；</li>
</ul>
<p>4xx：找不到资源      404</p>
<ul>
<li>资源不存在；</li>
</ul>
<p>5xx：服务器代码错误  500           502：网关错误</p>
<p>​        </p>
<p><strong>常见面试题：</strong></p>
<p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>
<h3 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h3><p><strong>我为什么要学习这个技术</strong>？</p>
<p>​    1、在javaweb开发中，需要使用大量的jar包，我们手动去导入；</p>
<p>​    2、如何能够让一个东西自动帮我导入和配置这个jar包</p>
<p>​    由此，Maven诞生了！</p>
<h4 id="5-1、Maven项目架构管理工具"><a href="#5-1、Maven项目架构管理工具" class="headerlink" title="5.1、Maven项目架构管理工具"></a>5.1、Maven项目架构管理工具</h4><p>我们目前用来就是方便导入jar包的！</p>
<p>Maven的核心思想：<strong>约定大于配置</strong></p>
<ul>
<li>有约束，不要去违反。</li>
</ul>
<p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p>
<h4 id="5-2、下载安装Maven"><a href="#5-2、下载安装Maven" class="headerlink" title="5.2、下载安装Maven"></a>5.2、下载安装Maven</h4><p>官网：<a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></p>
<p><img src="/blog/2020/05/14/javaweb/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85maven.png" alt="image-20200522213953483"></p>
<p>下载完成后，解压即可；</p>
<h4 id="5-3、配置环境变量"><a href="#5-3、配置环境变量" class="headerlink" title="5.3、配置环境变量"></a>5.3、配置环境变量</h4><p>在我们的系统环境变量中</p>
<p>配置如下配置：</p>
<ul>
<li>M2_HOME        maven目录下的bin目录</li>
<li>MAVEN_HOME         maven的目录</li>
<li>在系统的path中配置    %MAVEN_HOME%\bin</li>
</ul>
<p><img src="/blog/2020/05/14/javaweb/%E6%B5%8B%E8%AF%95maven%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="image-20200522220445894"></p>
<p>测试maven是否安装成功，保证必须配置完毕！</p>
<h4 id="5-4、阿里云镜像"><a href="#5-4、阿里云镜像" class="headerlink" title="5.4、阿里云镜像"></a>5.4、阿里云镜像</h4><ul>
<li>镜像：mirrors<ul>
<li>作用：加速我们的下载</li>
</ul>
</li>
<li>国内建议使用阿里云的镜像</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-5、本地仓库"><a href="#5-5、本地仓库" class="headerlink" title="5.5、本地仓库"></a>5.5、本地仓库</h4><p>在本地的仓库，远程仓库；</p>
<p><strong>建立一个本地仓库</strong>：localRepository</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\environment\apache-maven-3.6.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h4><p>1.启动IDEA</p>
<p>2.创建一个MavenWeb项目</p>
<p><img src="/blog/2020/05/14/javaweb/%E5%88%9B%E5%BB%BAMavenWeb%E9%A1%B9%E7%9B%AE.png" alt="image-20200522223156611"></p>
<p><img src="/blog/2020/05/14/javaweb/%E7%BB%84id%E5%92%8C%E9%A1%B9%E7%9B%AE%E5%90%8D.png" alt="image-20200522223407655"></p>
<p><img src="/blog/2020/05/14/javaweb/%E9%80%89%E6%8B%A9maven%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BB%93%E5%BA%93.png" alt="image-20200522224000978"></p>
<p><img src="/blog/2020/05/14/javaweb/IDEA%E8%87%AA%E5%B8%A6maven.png" alt="image-20200522223842283"></p>
<p>3.等待项目初始化完毕    </p>
<p><img src="/blog/2020/05/14/javaweb/maven%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E6%A0%87%E5%BF%97.png" alt="image-20200522224912953"></p>
<p>4.观察maven仓库中多了什么东西？</p>
<p>5.IDEA中的Maven设置</p>
<p>IDEA项目配置成功后，看一眼Maven配置</p>
<p><img src="/blog/2020/05/14/javaweb/%E6%A3%80%E6%9F%A5IDEA%E7%9A%84Maven%E9%85%8D%E7%BD%AE.png" alt="image-20200523001345121"></p>
<p><img src="/blog/2020/05/14/javaweb/%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5%E6%BA%90%E7%A0%81.png" alt="image-20200523001539992"></p>
<p>6.到这里，Maven在IDEA中的配置和使用就OK了！</p>
<h4 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h4><p><img src="/blog/2020/05/14/javaweb/%E5%88%9B%E5%BB%BA%E6%99%AE%E9%80%9AMaven%E9%A1%B9%E7%9B%AE.png" alt="image-20200523002048926"></p>
<p><img src="/blog/2020/05/14/javaweb/%E5%B9%B2%E5%87%80Maven%E9%A1%B9%E7%9B%AE%E7%95%8C%E9%9D%A2.png" alt="image-20200523002836004"></p>
<p>下面这个只有在Web应用下才会有！</p>
<p><img src="/blog/2020/05/14/javaweb/WEB-INF.png" alt="image-20200523003159794"></p>
<h4 id="5-8、标记文件夹功能"><a href="#5-8、标记文件夹功能" class="headerlink" title="5.8、标记文件夹功能"></a>5.8、标记文件夹功能</h4><p><img src="/blog/2020/05/14/javaweb/%E6%A0%87%E8%AE%B0%E7%9B%AE%E5%BD%95%E5%8A%9F%E8%83%BD.png" alt="image-20200523004313123"></p>
<p><img src="/blog/2020/05/14/javaweb/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E9%85%8D%E7%BD%AE.png" alt="image-20200523004720479"></p>
<p><img src="/blog/2020/05/14/javaweb/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E4%B8%AD%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%BB%99%E7%9B%AE%E5%BD%95%E6%A0%87%E8%AE%B0%E7%B1%BB%E5%9E%8B.png" alt="image-20200523004851461"></p>
<p><img src="/blog/2020/05/14/javaweb/target.png" alt="image-20200523005028198"></p>
<h4 id="5-9、在IDEA中配置Tomcat"><a href="#5-9、在IDEA中配置Tomcat" class="headerlink" title="5.9、在IDEA中配置Tomcat"></a>5.9、在IDEA中配置Tomcat</h4><p><img src="/blog/2020/05/14/javaweb/%E6%B7%BB%E5%8A%A0%E9%85%8D%E7%BD%AE.png" alt="image-20200523005358175"></p>
<p><img src="/blog/2020/05/14/javaweb/%E6%9F%A5%E7%9C%8B%E9%80%89%E6%8B%A9%E9%85%8D%E7%BD%AE.png" alt="image-20200523005635890"></p>
<p><img src="/blog/2020/05/14/javaweb/%E9%80%89%E6%8B%A9Tomcat.png" alt="image-20200523010053534"></p>
<p><img src="/blog/2020/05/14/javaweb/%E9%85%8D%E7%BD%AETomcat%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="image-20200523011121914"></p>
<p>解决警告问题</p>
<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要制定一个文件夹名字；</strong></p>
<p><img src="/blog/2020/05/14/javaweb/%E6%B7%BB%E5%8A%A0Artifact%E8%A7%A3%E5%86%B3%E8%AD%A6%E5%91%8A.png" alt="image-20200523011503518"></p>
<p><img src="/blog/2020/05/14/javaweb/%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E8%AE%BE%E7%BD%AE.png" alt="image-20200523011829379"></p>
<p><img src="/blog/2020/05/14/javaweb/%E5%90%AF%E5%8A%A8Tomcat.png" alt="image-20200523011934034"></p>
<p><img src="/blog/2020/05/14/javaweb/%E8%AE%BF%E9%97%AE%E9%BB%98%E8%AE%A4%E7%9A%84index.jsp%E7%9A%84%E5%86%85%E5%AE%B9.png" alt="image-20200523012356070"></p>
<h4 id="5-10、pom文件"><a href="#5-10、pom文件" class="headerlink" title="5.10、pom文件"></a>5.10、pom文件</h4><p>pom.xml是Maven的核心配置文件</p>
<p><img src="/blog/2020/05/14/javaweb/Maven%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D.png" alt="image-20200523013103579"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.carey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Package：项目的打包方式</span></span><br><span class="line"><span class="comment">  jar：java应用</span></span><br><span class="line"><span class="comment">  war：Javaweb应用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目构建用的东西--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog/2020/05/14/javaweb/pom.xml%E9%85%8D%E7%BD%AE%E5%90%8E%E5%AF%BC%E5%85%A5jar%E7%A4%BA%E4%BE%8B.png" alt="image-20200523015623291"></p>
<p>maven由于它的约定大于配置，我们之后可能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-11、IDEA操作"><a href="#5-11、IDEA操作" class="headerlink" title="5.11、IDEA操作"></a>5.11、IDEA操作</h4><p><img src="/blog/2020/05/14/javaweb/%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95%E6%A0%91.png" alt="image-20200523021318428"></p>
<p><img src="/blog/2020/05/14/javaweb/Maven%E4%B8%ADjar%E5%8C%85%E7%9A%84%E8%81%94%E7%B3%BB%E5%85%B3%E8%81%94%E5%9B%BE.png" alt="image-20200523021221135"></p>
<h4 id="5-12、解决遇到的问题"><a href="#5-12、解决遇到的问题" class="headerlink" title="5.12、解决遇到的问题"></a>5.12、解决遇到的问题</h4><p>1.Maven 3.6.2</p>
<p>解决方法：IDEA版本用高级点或者降级Maven为3.6.1</p>
<p>2.Tomcat闪退</p>
<p>3.IDEA中每次都要重复配置Maven</p>
<p>在IDEA中的全局默认配置中去配置</p>
<p><img src="/blog/2020/05/14/javaweb/%E5%85%A8%E5%B1%80%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E5%85%A5%E5%8F%A3.png" alt="image-20200523153718385"></p>
<p><img src="/blog/2020/05/14/javaweb/%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE.png" alt="image-20200523154009316"></p>
<p>4.Maven项目中Tomcat无法配置</p>
<p>5.maven默认web项目中的web.xml版本问题</p>
<p><img src="/blog/2020/05/14/javaweb/%E9%BB%98%E8%AE%A4%E7%9A%84web.xml%E7%89%88%E6%9C%AC.png" alt="image-20200523154912626"></p>
<p>6.替换为webapp4.0版本和tomcat一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>7.Maven仓库的使用</p>
<p>地址：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></p>
<p><img src="/blog/2020/05/14/javaweb/%E6%90%9C%E7%B4%A2Java%E5%8C%85.png" alt="image-20200523155823185"></p>
<p><img src="/blog/2020/05/14/javaweb/%E6%9F%A5%E6%89%BEservlet%E7%9A%84jar%E5%8C%85.png" alt="image-20200523160040910"></p>
<p><img src="/blog/2020/05/14/javaweb/%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84jar%E5%8C%85%E7%89%88%E6%9C%AC.png" alt="image-20200523160200025"></p>
<p><img src="/blog/2020/05/14/javaweb/jar%E5%92%8CMaven%E4%BE%9D%E8%B5%96%E5%8F%AF%E9%80%89.png" alt="image-20200523160321856"></p>
<h3 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h3><h4 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h4><ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>Sun在这些API中提供一个接口叫做：Servlet，如果你想发开一个Servlet程序，只需要完成两个小步骤：<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的java类部署到web服务器中</li>
</ul>
</li>
</ul>
<p><strong>把实现了Servlet接口的java程序叫做，Servlet</strong></p>
<h4 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h4><p>Servlet接口Sun公司有两个默认的实现类：HttpServlet,GenericServlet</p>
<p>1.构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Module；这个空的工程就是Maven主工程；</p>
<p>2.关于Maven父子工程的理解：</p>
<p>父项目中会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子项目会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.carey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的java子项目可以直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure>

<p>3.Maven环境优化</p>
<p>​    1.修改web.xml为最新的</p>
<p>​    2.将maven的结构搭建完整</p>
<p>4.编写一个Servlet程序</p>
<p>​    1.编写一个普通类</p>
<p>​    2.实现Servlet接口，这里我们直接继承HttpServlet</p>
<p><img src="/blog/2020/05/14/javaweb/%E7%9B%B4%E6%8E%A5%E7%BB%A7%E6%89%BFHttpServlet.png" alt="image-20200523190307395"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">"Hello,Servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.编写Servlet的映射</p>
<p>为什么需要映射：我们写的是Java程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要在web服务中注册我们写的Servlet，还需要给他一个浏览器能够访问的路径；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.carey.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6.配置Tomcat</p>
<p>​    注意：配置项目发布的路径就可以了</p>
<p>7.启动测试，ok！</p>
<h4 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h4><p>Servlet是由web服务器调用，web服务器在收到浏览器请求之后，会</p>
<p><img src="/blog/2020/05/14/javaweb/Servlet%E5%8E%9F%E7%90%86.png" alt="image-20200523205318797"></p>
<h4 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h4><p>1.一个Servlet可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.一个Servlet可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.一个Servlet可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.默认请求路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>5.指定一些后缀或者前缀等等…..</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">注意点：*前面不能加项目映射的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6.优先级问题</p>
<p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--404--&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.carey.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-5、ServlrtContex"><a href="#6-5、ServlrtContex" class="headerlink" title="6.5、ServlrtContex"></a>6.5、ServlrtContex</h4><p> web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContex对象，它代表了当前的web应用；</p>
<h5 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h5><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//this.getInitParameter();     初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletConfig();    Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getServletContext();     Servlet上下文</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = <span class="string">"特朗普"</span>;</span><br><span class="line">        context.setAttribute(<span class="string">"username"</span>, username); <span class="comment">//将一个数据保存在了ServletContext中，名字为:username，值username</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HelloServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = (String) context.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">"名字"</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.carey.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.carey.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试访问结果</p>
<h5 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String url = context.getInitParameter(<span class="string">"url"</span>);</span><br><span class="line">        resp.getWriter().print(url);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">"进入了ServletDemo04"</span>);</span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher("/gp");//转发的请求路径</span></span><br><span class="line">        <span class="comment">//requestDispatcher.forward(req, resp);//调用forward实现转发请求；</span></span><br><span class="line">        context.getRequestDispatcher(<span class="string">"/gp"</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/blog/2020/05/14/javaweb/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E5%8C%BA%E5%88%AB.png" alt="image-20200524202900416"></p>
<h5 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h5><p>Properties</p>
<ul>
<li>在java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath；</p>
<p>思路：需要一个文件流</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root13123</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456132231123</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">"/WEB-INF/classes/com/carey/servlet/aa.properties"</span>);</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String user = prop.getProperty(<span class="string">"username"</span>);</span><br><span class="line">        String pwd = prop.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(user+<span class="string">":"</span>+pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问测试即可ok；</p>
<h4 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h4><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>
<ul>
<li>如果要获得客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<h5 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h5><p>负责向浏览器发送数据的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p>负责向浏览器发送响应头的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>

<p>响应的状态码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>

<h5 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h5><p>1.向浏览器输出消息</p>
<p>2.下载文件</p>
<p>​        1.要获取下载文件的路径</p>
<p>​        2.下载的文件名是啥？</p>
<p>​        3.设置想办法让浏览器能够支持下载我们需要的东西</p>
<p>​        4.获取下载文件的输入流</p>
<p>​        5.创建缓冲区</p>
<p>​        6.获得OutputStream对象</p>
<p>​        7.将FileOutputStream流写入到buffer缓冲区</p>
<p>​        8.使用OutputStream将缓冲区中的数据输出到客户端！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//  1.要获取下载文件的路径</span></span><br><span class="line">    String realPath = <span class="string">"D:\\IDEA project\\JavaWeb\\javaweb-02-servlet\\response\\src\\main\\resources\\特朗普.png"</span>;</span><br><span class="line">    System.out.println(<span class="string">"下载文件的路径："</span>+realPath);</span><br><span class="line">    <span class="comment">//  2.下载的文件名是啥？</span></span><br><span class="line">    String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//  3.设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西，中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span>+ URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>));</span><br><span class="line">    <span class="comment">//  4.获取下载文件的输入流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">//  5.创建缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">//  6.获得OutputStream对象</span></span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    <span class="comment">//  7.将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">    <span class="keyword">while</span>((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    doGet(req, resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何让浏览器5秒自动刷新一次</span></span><br><span class="line">        resp.setHeader(<span class="string">"refresh"</span>, <span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>, <span class="number">20</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D g = (Graphics2D)image.getGraphics();<span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.blue);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(), <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">"expires"</span>, -<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">        resp.setHeader(<span class="string">"Pragma"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image, <span class="string">"jpg"</span>, resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num = random.nextInt(<span class="number">9999999</span>) + <span class="string">""</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString()+num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h5><p><img src="/blog/2020/05/14/javaweb/%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="image-20200527194324203"></p>
<p>一个web资源B收到客户端A请求后，B会通知A客户端去访问另一个wen资源C，这个过程叫重定向</p>
<p>常见场景：</p>
<ul>
<li>用户登录</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    resp.setHeader("Location", "/r/img");</span></span><br><span class="line"><span class="comment">    resp.setStatus(302);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    resp.sendRedirect(<span class="string">"/r/img"</span>); <span class="comment">//重定向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>面试题：请你聊聊重定向和转发的区别？</p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点：</p>
<ul>
<li>请求转发的时候，url不会产生变化</li>
<li>重定向时候，url地址栏会发生变化</li>
</ul>
<p><img src="/blog/2020/05/14/javaweb/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E5%8C%BA%E5%88%AB-.png" alt="重定向"></p>
<h5 id="5、测试request"><a href="#5、测试request" class="headerlink" title="5、测试request"></a>5、测试request</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//处理请求</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(username+<span class="string">":"</span>+password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向时候一定要注意，路径问题，否则404；</span></span><br><span class="line">        resp.sendRedirect(<span class="string">"/r/success.jsp"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>request<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.carey.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>request<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h4><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>
<p><img src="/blog/2020/05/14/javaweb/HttpServletRequest%E6%96%B9%E6%B3%951.png" alt="image-20200527211141420"></p>
<p><img src="/blog/2020/05/14/javaweb/HttpServletRequest%E6%96%B9%E6%B3%952.png" alt="image-20200527211315619"></p>
<h5 id="获取前端传递的参数，并且请求转发"><a href="#获取前端传递的参数，并且请求转发" class="headerlink" title="获取前端传递的参数，并且请求转发"></a>获取前端传递的参数，并且请求转发</h5><p><img src="/blog/2020/05/14/javaweb/%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E4%BC%A0%E9%80%92%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="image-20200527211544637"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">"hobbies"</span>);</span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        <span class="comment">//后台接收出现中文乱码问题</span></span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        System.out.println(Arrays.toString(hobbies));</span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(req.getContextPath());</span><br><span class="line">        <span class="comment">//通过请求转发</span></span><br><span class="line">        <span class="comment">//这里的/代表当前web应用</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/success.jsp"</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>面试题：请你聊聊重定向和转发的区别？</p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点：</p>
<ul>
<li>请求转发的时候，url不会产生变化       307</li>
<li>重定向时候，url地址栏会发生变化         302</li>
</ul>
<h3 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h3><h4 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h4><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p>
<p><strong>有状态会话</strong>：一个同学来过教师，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p>
<p>你能怎么证明你是大学的学生？</p>
<p>你                                            大学</p>
<p>1.发票                                    大学给你发票</p>
<p>2.学校登记                            大学标记你来过了</p>
<p><strong>一个网站，怎么证明你来过？</strong></p>
<p>客户端                                服务端</p>
<p>1.服务端给客户端一个信件，客户端下次访问服务器带上信件就可以了：cookie</p>
<p>2.服务器登记你来过了，下次你来的时候我来匹配你：session</p>
<h4 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h4><p><strong>cookie</strong></p>
<ul>
<li>客户端技术（响应，请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息？我们可以把信息或者数据放在session中！</li>
</ul>
<p>常见：网站登录之后，下次不用再登录了，第二次访问直接上去了</p>
<h4 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h4><p><img src="/blog/2020/05/14/javaweb/cookie.png" alt="image-20200529151304481"></p>
<p>1.从请求中拿到cookie信息</p>
<p>2.服务器响应给客户端cookie</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies()    <span class="comment">//获得cookie</span></span><br><span class="line">cookie.getName();     <span class="comment">//获得cookie中的key</span></span><br><span class="line">cookie.getValue();    <span class="comment">//获得cookie中的value</span></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">"lastLoginTime"</span>, System.currentTimeMillis()+<span class="string">""</span>);   <span class="comment">//新建一个cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);      <span class="comment">//设置cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie);          <span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>

<p><strong>cookie：一般会保存在本地的 用户目录下appdata；</strong></p>
<p>一个网站cookie是否存在上线！<strong>聊聊细节问题</strong></p>
<ul>
<li>一个Cookie只能保存一个信息；</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>
<li>Cookie大小有限制4kb；</li>
<li>300个cookie浏览器上限</li>
</ul>
<p>删除Cookie：</p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效；</li>
<li>设置有效期时间为0；</li>
</ul>
<p><strong>编码解码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">"特朗普"</span>,<span class="string">"utf-8"</span>)</span><br><span class="line">URLDecoder.decode(cookie.getValue(),<span class="string">"utf-8"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h4><p><img src="/blog/2020/05/14/javaweb/Session.png" alt="image-20200529151447215"></p>
<p>什么是Session：</p>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Session对象</li>
<li>一个Session独占一个浏览器，只要浏览器没有关闭这个Session就存在；</li>
<li>用户登录之后，整个网站它都可以访问！—&gt;保存用户的信息；保存购物车的信息…</li>
</ul>
<p><img src="/blog/2020/05/14/javaweb/Session%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png" alt="image-20200529142740478"></p>
<p>Session和Cookie的区别</p>
<ul>
<li>Cookie是把用户的数据写到用户的浏览器，浏览器保存（可以保存多个）</li>
<li>Session把用户1的数据写到用户独占Session中，服务器端保存（保存重要的信息，减少服务器资源的浪费）</li>
<li>Session对象由服务创建</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存一个登陆用户的信息；</li>
<li>购物车信息；</li>
<li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li>
</ul>
<p>使用Session：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.carey.pojo.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给Session存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">"name"</span>, <span class="keyword">new</span> Person(<span class="string">"特朗普"</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得Session的ID</span></span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建的</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"session创建成功,ID:"</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"session已经在服务器中存在了,ID:"</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Session创建的时候做了什么事情：</span></span><br><span class="line"><span class="comment">        Cookie cookie = new Cookie("JSESSIONID", sessionId);</span></span><br><span class="line"><span class="comment">        resp.addCookie(cookie);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到Session</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">Person person =(Person) session.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(person.toString());</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手动注销Session</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure>



<p><strong>会话自动过期：web.xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/blog/2020/05/14/javaweb/ServletContext.png" alt="image-20200529151747359"></p>
<h3 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h3><h4 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h4><p>Java Server Pages：Java服务器端页面，也和Servlet一样，用于动态Web技术！</p>
<p>最大的特点：</p>
<ul>
<li>写JSP就像在写HTML</li>
<li>区别：<ul>
<li>HTML只给用户提供静态的数据</li>
<li>JSP页面中可以嵌入Java代码，为用户提供动态数据；</li>
</ul>
</li>
</ul>
<h4 id="8、JSP原理"><a href="#8、JSP原理" class="headerlink" title="8、JSP原理"></a>8、JSP原理</h4><p>思路：JSP到底是怎么执行的！！</p>
<ul>
<li><p>代码层面没有任何问题</p>
</li>
<li><p>服务器内部工作</p>
<p>tomcat中有一个work目录；</p>
<p>IDEA中使用Tomcat的会在IDEA的tomcat中生成一个work目录</p>
</li>
</ul>
<ul>
<li><img src="/blog/2020/05/14/javaweb/IDEA%E7%9A%84tomcat%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95.png" alt="image-20200529153313397"></li>
</ul>
<p>我电脑的地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Carey\AppData\Local\JetBrains\IntelliJIdea2020.1\tomcat\Unnamed_javaweb-session-cookie\work\Catalina\localhost\ROOT\org\apache\jsp</span><br></pre></td></tr></table></figure>

<p>发现页面转变成了java程序！</p>
<p><img src="/blog/2020/05/14/javaweb/jsp.png" alt="image-20200529153643182"></p>
<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问servlet！</strong></p>
<p>JSP最终也会被转化为java类</p>
<p><strong>JSP本质上就是一个Servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure>

<p>1.判断请求</p>
<p>2.内置一些对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext; <span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.HttpSession session = <span class="keyword">null</span>;<span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;<span class="comment">//applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;<span class="comment">//config</span></span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;<span class="comment">//out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;<span class="comment">//page：当前页</span></span><br><span class="line">HttpServletRequest request			<span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response		<span class="comment">//响应</span></span><br></pre></td></tr></table></figure>

<p>3.输出页面前增加的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html"</span>);			<span class="comment">//设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">                                          <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure>

<p>4.以上的这些个对象我们可以在JSP页面中直接使用！</p>
<p><img src="/blog/2020/05/14/javaweb/JSP%E5%8E%9F%E7%90%86.png" alt="image-20200529160502381"></p>
<p>在jsp页面中：</p>
<p>只要是Java代码就会原封不动的输出；</p>
<p>如果是HTML代码，就会被转换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">"&lt;html&gt;\r\n"</span>);</span><br></pre></td></tr></table></figure>

<p>这样的格式，输出到前端！</p>
<h4 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h4><p>任何语言都有自己的语法，Java中有。JSP作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所以语法都支持！</p>
<h5 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用于将程序的输出，输出到客户端</span><br><span class="line">&lt;%= 变量或表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>

<h5 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a>jsp脚本片段</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(<span class="string">"&lt;h1&gt;Sum="</span>+sum+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>脚本片段的再实现</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">int</span> x= <span class="number">10</span>;</span><br><span class="line">out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">2</span>;</span><br><span class="line">out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--  在代码中嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;h1&gt;Hello,World &lt;%=i%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h5 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"Loading Servlet!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> globalVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">carey</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入了方法carey！"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>JSP声明：会被编译到JSP生成java的类中！而其他的，被生成到_jspService方法中！</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure>

<p>JSP的注释，不会在客户端显示，HTML就会！</p>
<h4 id="8-4、JSP指令"><a href="#8-4、JSP指令" class="headerlink" title="8.4、JSP指令"></a>8.4、JSP指令</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page .... %&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">""</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="meta">@include</span>会讲两个页面合二为一--%&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"common/header.jsp"</span>%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"common/footer.jsp"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--jsp标签</span><br><span class="line">jsp:include：拼接页面，本质还是三个</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"common/header.jsp"</span>/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"common/footer.jsp"</span>/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="8-5、9大内置对象"><a href="#8-5、9大内置对象" class="headerlink" title="8.5、9大内置对象"></a>8.5、9大内置对象</h4><ul>
<li>PageContext</li>
<li>Request</li>
<li>Response</li>
<li>Session</li>
<li>Application   【ServletContext】</li>
<li>config      【ServletConfig】</li>
<li>out</li>
<li>page               不用了解</li>
<li>exception</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">"name1"</span>, <span class="string">"长江1号"</span>);<span class="comment">//保存的数据只在一个页面中</span></span><br><span class="line">request.setAttribute(<span class="string">"name2"</span><span class="string">"长江2号"</span>);<span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">"name3"</span>, <span class="string">"长江3号"</span>);<span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">"name4"</span>, <span class="string">"长江4号"</span>);<span class="comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>

<p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p>
<p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车</p>
<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据</p>
<h4 id="8-6、JSP标签、JSTL标签、EL表达式"><a href="#8-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6、JSP标签、JSTL标签、EL表达式"></a>8.6、JSP标签、JSTL标签、EL表达式</h4><p>EL表达式： ${ }​</p>
<ul>
<li><strong>获取数据</strong></li>
<li><strong>执行运算</strong></li>
<li><strong>获取web开发的常用对象</strong></li>
</ul>
<p><strong>JSP标签</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp:include--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">http:<span class="comment">//localhost:8080/jsptag.jsp?name=carey&amp;age=12</span></span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=<span class="string">"/jsp2.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"name"</span> value=<span class="string">"carey"</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"age"</span> value=<span class="string">"12"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>



<p><strong>JSTL表达式</strong></p>
<p>JSTL标签库的使用就是为了弥补HTML标签的不足；他自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>
<p><strong>格式化标签</strong></p>
<p><strong>SQL标签</strong></p>
<p><strong>XML 标签</strong></p>
<p><strong>核心标签</strong>（掌握部分）</p>
<p><img src="/blog/2020/05/14/javaweb/JSTL%E6%A0%B8%E5%BF%83%E6%A0%87%E7%AD%BE.png" alt="image-20200530112017362"></p>
<p>JSTL标签库使用步骤：</p>
<ul>
<li>引入对应的taglib</li>
<li>使用其中的方法</li>
<li><strong>在Tomcat中也需要引入jstl的包，否则会报错：JSTL解析错误</strong></li>
</ul>
<p>c:if</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h4&gt;if测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"coreif.jsp"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123;param.username&#125;"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;param.username =='admin'&#125;"</span> <span class="keyword">var</span>=<span class="string">"isAdmin"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"管理员欢迎您!"</span>/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;isAdmin&#125;"</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>c:choose     c:when</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--定义一个变量core，值为<span class="number">85</span>--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"score"</span> value=<span class="string">"55"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=90&#125;"</span>&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=80&#125;"</span>&gt;</span><br><span class="line">        你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=70&#125;"</span>&gt;</span><br><span class="line">        你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=60&#125;"</span>&gt;</span><br><span class="line">        你的成绩为及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&lt;60&#125;"</span>&gt;</span><br><span class="line">        你的成绩为不及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>c:forEach</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    ArrayList&lt;String&gt; people = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    people.add(<span class="number">0</span>,<span class="string">"张三"</span>);</span><br><span class="line">    people.add(<span class="number">1</span>,<span class="string">"李四"</span>);</span><br><span class="line">    people.add(<span class="number">2</span>,<span class="string">"王五"</span>);</span><br><span class="line">    people.add(<span class="number">3</span>,<span class="string">"赵六"</span>);</span><br><span class="line">    people.add(<span class="number">4</span>,<span class="string">"知恩"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"list"</span>, people);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line"><span class="keyword">var</span> ，每次遍历出来的变量</span><br><span class="line">items，   要遍历的对象<span class="number">1</span></span><br><span class="line">begin，   哪里开始</span><br><span class="line">end，    到哪里</span><br><span class="line">step，   步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"people"</span> items=<span class="string">"$&#123;list&#125;"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;people&#125;"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"people"</span> items=<span class="string">"$&#123;list&#125;"</span> begin=<span class="string">"1"</span> end=<span class="string">"3"</span> step=<span class="string">"2"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"$&#123;people&#125;"</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h3><p>实体类</p>
<p>JavaBean有1特定的写法：</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get/set方法；</li>
</ul>
<p>一般用来和数据库的字段做映射</p>
<p>ORM：对象关系映射</p>
<ul>
<li>表—&gt;类</li>
<li>字段—&gt;属性</li>
<li>行记录—&gt;对象</li>
</ul>
<p><strong>people表</strong></p>
<table>
<thead>
<tr>
<th>i</th>
<th>name</th>
<th>age</th>
<th>address</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>长江1号</td>
<td>3</td>
<td>北京</td>
</tr>
<tr>
<td>2</td>
<td>长江2号</td>
<td>18</td>
<td>广州</td>
</tr>
<tr>
<td>3</td>
<td>长江3号</td>
<td>100</td>
<td>上海</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">1</span>,<span class="string">"长江1号"</span>,<span class="number">3</span>,<span class="string">"北京"</span>);</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">2</span>,<span class="string">"长江2号"</span>,<span class="number">18</span>,<span class="string">"广州"</span>);</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">3</span>,<span class="string">"长江3号"</span>,<span class="number">100</span>,<span class="string">"上海"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h3><p>什么是MVC： Model       view    Controller             模型、视图、控制器</p>
<h4 id="10-1、早些年"><a href="#10-1、早些年" class="headerlink" title="10.1、早些年"></a>10.1、早些年</h4><p><img src="/blog/2020/05/14/javaweb/%E6%97%A9%E4%BA%9B%E5%B9%B4%E6%9E%B6%E6%9E%84.png" alt="image-20200530141506606"></p>
<p>用户直接访问控制层，控制层就可以直接操作数据库；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servlet--CRUD--&gt;数据库</span><br><span class="line">弊端：程序十分臃肿，不利于维护</span><br><span class="line">servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line">    </span><br><span class="line">架构：没有什么是加一层解决不了的！</span><br><span class="line">程序员调用</span><br><span class="line">    |</span><br><span class="line">   JDBC</span><br><span class="line">    |</span><br><span class="line">MySQL  Oracle  SqlServer...</span><br></pre></td></tr></table></figure>

<h4 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h4><p><img src="/blog/2020/05/14/javaweb/MVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt="image-20200530142524959"></p>
<p>Model</p>
<ul>
<li>业务处理：业务逻辑（Service）</li>
<li>数据持久层：CRUD（Dao）</li>
</ul>
<p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起Servlet请求（a，form，img…）</li>
</ul>
<p>Controller（Servlet）</p>
<ul>
<li>接收用户的请求：（req：请求参数、Session信息…）</li>
<li>交给业务层处理对应的代码</li>
<li>控制视图的跳转</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户的登录参数：username，password）---&gt;交给业务层处理登录业务（判断用户名密码是否正确；事务）---&gt;Dao层查询用户名和密码是否正确---&gt;数据库</span><br></pre></td></tr></table></figure>

<h3 id="11、Filter（重点）"><a href="#11、Filter（重点）" class="headerlink" title="11、Filter（重点）"></a>11、Filter（重点）</h3><p>Filter：过滤器，用来过滤网站的数据；</p>
<ul>
<li>处理中文乱码</li>
<li>登录验证…</li>
</ul>
<p><img src="/blog/2020/05/14/javaweb/%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="image-20200530150523744"></p>
<p>Filter开发步骤：</p>
<p>1.导包</p>
<p>2.编写过滤器</p>
<p>​        1.导包不要错</p>
<p>​    <img src="/blog/2020/05/14/javaweb/Filter%E5%AF%BC%E5%8C%85%E4%B8%8D%E8%A6%81%E9%94%99.png" alt="image-20200530151403109"></p>
<p>​    2.实现Filter接口，重写对应的方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化：web服务器启动，就已经初始化了，随时等待过滤对象出现！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//chain：链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    2. 必须要让过滤器继续同行</span></span><br><span class="line"><span class="comment">        filterChain.doFilter(servletRequest, servletResponse);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter执行前..."</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);<span class="comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span></span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter执行后..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁：web服务器关闭的时候，过滤会销毁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CharacterEncodingFilter销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.在web.xml中配置Filter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.carey.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只要是/servlet的任何请求，都会经过这个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h3><p>实现一个监听器的接口；（有N种）</p>
<p>1.编写一个监听器</p>
<p>​    实现监听器的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数：统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建session监听：看你的一举一动</span></span><br><span class="line">    <span class="comment">//一旦创建session就会触发这个事件！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line"></span><br><span class="line">        Integer onlineCount = (Integer)ctx.getAttribute(<span class="string">"OnlineCount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">"OnlineCount"</span>, onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一旦销毁session就会触发一次这个事件！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer)ctx.getAttribute(<span class="string">"OnlineCount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">"OnlineCount"</span>, onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Session销毁：</span></span><br><span class="line"><span class="comment">    1.手动销毁 se.getSession().invalidate();</span></span><br><span class="line"><span class="comment">    2.自动销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.web.xml中注册监听器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.carey.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.看情况是否使用！</p>
<h3 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h3><p><strong>监听器：GUI编程中经常使用；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"中秋节快乐"</span>);   <span class="comment">//新建一个窗体</span></span><br><span class="line">        Panel panel = <span class="keyword">new</span> Panel(<span class="keyword">null</span>);  <span class="comment">//面板</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);  <span class="comment">//设置窗体的布局</span></span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听事件，监听关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.windowClosing(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>
<p>1.用户登录之后，向Session中放入用户的数据</p>
<p>2.进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(Constant.USER_SESSION)==<span class="keyword">null</span>)&#123;</span><br><span class="line">    response.sendRedirect(<span class="string">"/error.jsp"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request, response);</span><br></pre></td></tr></table></figure>

<h3 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h3><p>什么是JDBC：Java连接数据库！</p>
<p><img src="/blog/2020/05/14/javaweb/JDBC%E5%8E%9F%E7%90%86.png" alt="image-20200531124443905"></p>
<p>需要jar包的支持：</p>
<ul>
<li>java.sql</li>
<li>javax.sql</li>
<li>mysql-connecter-java…      连接驱动（必须要导入）</li>
</ul>
<p><strong>实验环境搭建</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">	<span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">	email <span class="built_in">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">	birthday <span class="built_in">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="string">`name`</span>,<span class="string">`password`</span>,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'张三'</span>,<span class="string">'123456'</span>,<span class="string">'3126@gmail.com'</span>,<span class="string">'2000-01-01'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="string">`name`</span>,<span class="string">`password`</span>,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'李四'</span>,<span class="string">'123456'</span>,<span class="string">'ls@gmail.com'</span>,<span class="string">'2000-01-01'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="string">`name`</span>,<span class="string">`password`</span>,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">'王五'</span>,<span class="string">'123456'</span>,<span class="string">'ww@gmail.com'</span>,<span class="string">'2000-01-01'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure>

<p>导入数据库依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>IDEA中连接数据库</p>
<p><img src="/blog/2020/05/14/javaweb/IDEA%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20200531132103949"></p>
<p><strong>JDBC固定步骤：</strong></p>
<p>​        1.加载驱动</p>
<p>​        2.连接数据库</p>
<p>​        3.向数据库发送SQL的对象  Statement：CRUD</p>
<p>​        4.编写SQL（根据业务，不同的SQL）</p>
<p>​        5.执行SQL</p>
<p>​        6.关闭连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJdbc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8解决中文乱码</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库，代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.向数据库发送SQL的对象  Statement,PreparedStatement：CRUD</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.编写SQL</span></span><br><span class="line">        String sql = <span class="string">"select * from users"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行查询SQL,返回一个ResultSet  结果集</span></span><br><span class="line">        ResultSet rs = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">"id="</span>+rs.getObject(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"name="</span>+rs.getObject(<span class="string">"name"</span>));</span><br><span class="line">            System.out.println(<span class="string">"password="</span>+rs.getObject(<span class="string">"password"</span>));</span><br><span class="line">            System.out.println(<span class="string">"email="</span>+rs.getObject(<span class="string">"email"</span>));</span><br><span class="line">            System.out.println(<span class="string">"birthday="</span>+rs.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做）  先开后关</span></span><br><span class="line">        rs.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预编译SQL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJdbc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8解决中文乱码</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库，代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.编写SQL</span></span><br><span class="line">        String sql = <span class="string">"insert into users (id, name, password, email, birthday) values (?,?,?,?,?)"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.预编译</span></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>, <span class="number">4</span>);<span class="comment">//给第一个占位符？ 的值赋值为4</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, <span class="string">"carey"</span>);<span class="comment">//给第二个占位符？ 的值赋值为carey</span></span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>, <span class="string">"123456"</span>);<span class="comment">//给第三个占位符？ 的值赋值为123456</span></span><br><span class="line">        preparedStatement.setString(<span class="number">4</span>, <span class="string">"241363@gmail.com"</span>);<span class="comment">//给第四个占位符？ 的值赋值为241363@gmail.com</span></span><br><span class="line">        preparedStatement.setDate(<span class="number">5</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));<span class="comment">//给第五个占位符？ 的值赋值为当前日期</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行sql</span></span><br><span class="line">        <span class="keyword">int</span> i = preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"插入成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做）  先开后关</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>事务</strong></p>
<p>要么都成功，要么都失败！</p>
<p>ACID原则：保证数据的安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交  commit()</span><br><span class="line">事务回滚  rollback()</span><br><span class="line">关闭事务</span><br><span class="line"></span><br><span class="line">转账：</span><br><span class="line">A：<span class="number">1000</span></span><br><span class="line">B：<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">A（<span class="number">900</span>）    --<span class="number">100</span>--&gt;    B(<span class="number">1100</span>)</span><br></pre></td></tr></table></figure>

<p><strong>Junit单元测试</strong></p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单使用</p>
<p>@Test注解只有在方法上有效，只要加了这个注解的方法就可以直接运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/blog/2020/05/14/javaweb/@Test%E6%B5%8B%E8%AF%95%E6%88%90%E5%8A%9F.png" alt="image-20200531142900534"></p>
<p>失败的时候是红色：</p>
<p><img src="/blog/2020/05/14/javaweb/@Test%E6%B5%8B%E8%AF%95%E5%A4%B1%E8%B4%A5.png" alt="image-20200531142948521"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8解决中文乱码</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2.连接数据库，代表数据库</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.通知数据库开启事务, false 开启</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"update account set money = money-100 where name = 'A'"</span>;</span><br><span class="line">            connection.prepareStatement(sql).executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//制造错误</span></span><br><span class="line">            <span class="comment">//int i = 1/0;</span></span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">"update account set money = money+100 where name = 'B'"</span>;</span><br><span class="line">            connection.prepareStatement(sql2).executeUpdate();</span><br><span class="line"></span><br><span class="line">            connection.commit();<span class="comment">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class="line">            System.out.println(<span class="string">"success"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//如果出现异常，就通知数据库回滚事务</span></span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e1)&#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>解决乱码</title>
    <url>/blog/2020/05/28/solve-the-mess/</url>
    <content><![CDATA[<h3 id="1、解决Tomcat乱码"><a href="#1、解决Tomcat乱码" class="headerlink" title="1、解决Tomcat乱码"></a>1、解决Tomcat乱码</h3><p>1.在32位的idea.exe.vmoptions和64位的idea64.exe.vmoptions启动项配置文件下添加了下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dfile.encoding&#x3D;UTF-8&#96; &#96;-Dconsole.encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure>

<p>2.tomcat目录下conf目录下的自己的server.xml文件中添加了一个配置<img src="/blog/2020/05/28/solve-the-mess/%E4%BF%AE%E6%94%B9server.xml.png" alt="img"></p>
<p>3.修改 tomcat 下的 logging.properties这个文件 为 GBK 就好了。<br>#java.util.logging.ConsoleHandler.encoding = UTF-8<br>java.util.logging.ConsoleHandler.encoding = GBK</p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/blog/2020/05/28/JavaScript-study/</url>
    <content><![CDATA[<h3 id="1、什么是JavaScript"><a href="#1、什么是JavaScript" class="headerlink" title="1、什么是JavaScript"></a>1、什么是JavaScript</h3><h4 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h4><p>JavaScript是一门世界上最流行的脚本语言</p>
<p>java、JavaScript</p>
<p>10天~</p>
<p>==一个合格的后端人员，必须要精通JavaScript==</p>
<h4 id="1-2、历史"><a href="#1-2、历史" class="headerlink" title="1.2、历史"></a>1.2、历史</h4><p><a href="https://blog.csdn.net/kese7952/article/details/79357868" target="_blank" rel="noopener">https://blog.csdn.net/kese7952/article/details/79357868</a></p>
<p><strong>ECMAScript</strong>它可以理解为JavaScript的一个标准</p>
<p>最新那本已经到es6版本~</p>
<p>但是大部分浏览器还只停留在支持es5代码上！</p>
<p>开发环境—线上环境，版本不一致</p>
<h3 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h3><h4 id="2-1、引入JavaScript"><a href="#2-1、引入JavaScript" class="headerlink" title="2.1、引入JavaScript"></a>2.1、引入JavaScript</h4><p>1、内部标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//.....</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、外部引入</p>
<p>abs.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"abc.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--script标签内，写JavaScript代码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;script&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        alert('hello,world');--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--外部引入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：script标签必须成对出现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/qj.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--不用显示定义type，也默认就是JavaScript--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里也可以存放--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2、基本语法入门"><a href="#2-2、基本语法入门" class="headerlink" title="2.2、基本语法入门"></a>2.2、基本语法入门</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JavaScript严格区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.定义变量     变量类型  变量名 = 变量值;</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> score = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// alert(num);</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.条件控制</span></span></span><br><span class="line">    if(score&gt;60 &amp;&amp; score&lt;70)&#123;</span><br><span class="line"><span class="actionscript">        alert(<span class="string">"60~70"</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>)&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"70~80"</span>)</span></span><br><span class="line"><span class="actionscript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"other"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(score) 在浏览器控制台打印变量!System.out.println();</span></span></span><br><span class="line">    /*</span><br><span class="line">        asdad</span><br><span class="line">     */</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器必备调试须知：</p>
<p><img src="/blog/2020/05/28/JavaScript-study/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E9%80%89%E9%A1%B9.png" alt="image-20200528103753685"></p>
<h4 id="2-3、数据类型"><a href="#2-3、数据类型" class="headerlink" title="2.3、数据类型"></a>2.3、数据类型</h4><p>数值，文本，图形，音频，视频….</p>
<p>==变量==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">String</span> 王者荣耀 = <span class="string">"倔强青铜"</span>;</span><br></pre></td></tr></table></figure>



<p>==number==</p>
<p>js不区分小数和整数，Number</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>			<span class="comment">//整数123</span></span><br><span class="line"><span class="number">123.1</span>		<span class="comment">//浮点数123.1</span></span><br><span class="line"><span class="number">1.123e3</span>		<span class="comment">//科学计数法</span></span><br><span class="line"><span class="number">-99</span>			<span class="comment">//负数</span></span><br><span class="line">NAN			<span class="comment">//not a number</span></span><br><span class="line"><span class="literal">Infinity</span>      <span class="comment">//表示无限大</span></span><br></pre></td></tr></table></figure>



<p>==字符串==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'abc'</span>				<span class="string">"abc"</span></span><br></pre></td></tr></table></figure>



<p>==布尔值==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span>         <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<p>==逻辑运算==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp;			<span class="comment">//两个都为真，结果为真</span></span><br><span class="line">    </span><br><span class="line">||			<span class="comment">//一个为真，结果为真</span></span><br><span class="line">    </span><br><span class="line">!    		<span class="comment">//真即假，假即真</span></span><br></pre></td></tr></table></figure>



<p>==比较运算符==  ！！！重要！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">=</span><br><span class="line">==		等于（类型不一样，值一样，也会判断为<span class="literal">true</span>）</span><br><span class="line">===    绝对等于（类型一样，值一样，结果为<span class="literal">true</span>）</span><br></pre></td></tr></table></figure>

<p>这是一个JS的缺陷，坚持不要使用 == 比较</p>
<p>须知：</p>
<ul>
<li>NaN===NaN，这个与所有的数值都不相等，包括自己</li>
<li>只能通过isNaN(NaN)来判断这个数是否是NaN</li>
</ul>
<p>浮点数问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>))     <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>尽量避免使用浮点数进行运算，存在精度问题！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>))&lt;<span class="number">0.00000001</span>     <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>==null和undefined==</p>
<ul>
<li>null     空</li>
<li>undefined    未定义</li>
</ul>
<p>==数组==</p>
<p>java的数值必须是相同类型的对象~，JS中不需要这样！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保证代码的可读性，尽量使用[]</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'hello'</span>,<span class="literal">null</span>,<span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>

<p>取数组下标：如果越界了就会</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<p>==对象==</p>
<p>对象是大括号，数组是中括号</p>
<blockquote>
<p>每个属性之间使用逗号隔开，最后一个不需要添加</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person person = new Person(1,2,3,4,5,);</span></span><br><span class="line">        <span class="keyword">var</span> person = &#123;</span><br><span class="line">            name: <span class="string">"carey"</span>,</span><br><span class="line">            age: <span class="number">3</span>,</span><br><span class="line">            tags: [<span class="string">'js'</span>, <span class="string">'java'</span>, <span class="string">'web'</span>, <span class="string">'...'</span>]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>取对象的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.name</span><br><span class="line">&gt; <span class="string">"carey"</span></span><br><span class="line">person.age</span><br><span class="line">&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>2.4、严格检查格式</p>
<p><img src="/blog/2020/05/28/JavaScript-study/%E8%AE%BE%E7%BD%AEES6.png" alt="image-20200528154016126"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    前提：IDEA需要设置支持ES6语法</span></span><br><span class="line"><span class="comment">    'use strict';   严格检查模式，预防JavaScript的随意性导致产生的一些问题</span></span><br><span class="line"><span class="comment">    必须写在JavaScript的第一行！</span></span><br><span class="line"><span class="comment">    局部变量建议都使用let 去定义~</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">        'use strict'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//  全局变量</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">let</span> i = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//ES6     let</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、数据类型"><a href="#3、数据类型" class="headerlink" title="3、数据类型"></a>3、数据类型</h3><h4 id="3-1、字符串"><a href="#3-1、字符串" class="headerlink" title="3.1、字符串"></a>3.1、字符串</h4><p>1、正常字符串我们使用 单引号，或者双引号包裹</p>
<p>2、注意转义字符 \</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&#39;</span><br><span class="line">\n</span><br><span class="line">\t</span><br><span class="line">\u4e2d    \u#### unicode字符</span><br><span class="line">\x41        Asc11字符</span><br></pre></td></tr></table></figure>

<p>3、多行字符串编写 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tab 上面 esc键下面的单反引号</span></span><br><span class="line"><span class="keyword">var</span> mag = </span><br><span class="line">	<span class="string">`hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">你好ya</span></span><br><span class="line"><span class="string">你好`</span></span><br></pre></td></tr></table></figure>

<p>4、模板字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tab 上面 esc键下面的单反引号</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"carey"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`你好呀，<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<p>5、字符串长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.length</span><br></pre></td></tr></table></figure>

<p>6、字符串的可变性，不可变</p>
<p><img src="/blog/2020/05/28/JavaScript-study/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7.png" alt="image-20200528160012011"></p>
<p>7、大小写转换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，这里是方法，不是属性了</span></span><br><span class="line">student.toUpperCase()</span><br><span class="line">student.toLowerCase()</span><br></pre></td></tr></table></figure>

<p>8、student.indexOf(‘t’)</p>
<p>9、substring</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[)</span><br><span class="line"> student.substring(<span class="number">1</span>)  <span class="comment">// 从第一个字符串截取到最后一个字符串</span></span><br><span class="line"> student.substring(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2、数组"><a href="#3-2、数组" class="headerlink" title="3.2、数组"></a>3.2、数组</h4><p>Array可以包含任意的数据类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];  <span class="comment">//通过下标取值和赋值</span></span><br><span class="line">arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>1、长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.length</span><br></pre></td></tr></table></figure>

<p>注意：假如给arr.length赋值，数组大小就会发生变化~，如果赋值过小，元素就会丢失</p>
<p>2、indexOf，通过元素获得下标索引</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.indexof(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>字符串的”1”和数字1是不同的</p>
<p><strong>3、slice()</strong> 截取Array的一部分，返回一个新数组，类似于String中的substring</p>
<p>4、push(),pop()       尾部</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">push：压入到尾部</span><br><span class="line">pop：弹出尾部的一个元素</span><br></pre></td></tr></table></figure>

<p>5、unshift(), shift()  头部</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">unshift：压入到头部</span><br><span class="line">shift：弹出头部的一个元素</span><br></pre></td></tr></table></figure>

<p>6、排序sort()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.sort()</span><br></pre></td></tr></table></figure>

<p>7、元素反转reverse()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.reverse()</span><br></pre></td></tr></table></figure>

<p>8、concat()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr</span><br><span class="line">(<span class="number">3</span>) [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]</span><br><span class="line">arr.concat(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">6</span>) [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr</span><br><span class="line">(<span class="number">3</span>) [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]</span><br></pre></td></tr></table></figure>

<p>注意：concat()并没有修改数组，只是会返回一个新的数组</p>
<p>9、连接符join</p>
<p>打印拼接数组，使用特定的字符串连接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>) [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]</span><br><span class="line">arr.join(<span class="string">'-'</span>)</span><br><span class="line"><span class="string">"A-B-C"</span></span><br></pre></td></tr></table></figure>

<p>10、多维数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="string">"5"</span>,<span class="string">"6"</span>]]</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>数组：存储数据(如何存，如何取，方法都可以自己实现)</p>
<h4 id="3-3、对象"><a href="#3-3、对象" class="headerlink" title="3.3、对象"></a>3.3、对象</h4><p>若干个键值对</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">    属性名：属性值.</span><br><span class="line">    属性名：属性值.</span><br><span class="line">    属性名：属性值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义了一个person对象，它有四个属性！</span></span><br><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">    name:<span class="string">"carey"</span>,</span><br><span class="line">    age:<span class="number">3</span>,</span><br><span class="line">    email:<span class="string">"24734453@qq.com"</span>,</span><br><span class="line">    score:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>js中对象，{……}表示一个对象，键值对描述属性 xxxx:xxxx,多个属性之间使用逗号隔开，最后一个属性不加逗号！</p>
<p>JavaScript中的所有的键都是字符串，值是任意对象！</p>
<p>1、对象赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">people.name = <span class="string">"cxxqing"</span></span><br><span class="line"><span class="string">"cxxqing"</span></span><br><span class="line">people.name</span><br><span class="line"><span class="string">"cxxqing"</span></span><br></pre></td></tr></table></figure>

<p>2、使用一个不存在的对象属性，不会报错！undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">people.haha</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<p>3、动态的删减属性.通过delete删除对象的属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> people.name</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>4、动态的增加，直接给新的属性增加值即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">people.haha = <span class="string">"haha"</span></span><br><span class="line"><span class="string">"haha"</span></span><br></pre></td></tr></table></figure>

<p>5、判断属性值是否在这个对象中！  xxx in xxx!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'age'</span> <span class="keyword">in</span> people</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> people</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>6、判断一个属性是否是这个对象自身拥有的hasOwnProperty()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">people.hasOwnProperty(<span class="string">'toString'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">people.hasOwnProperty(<span class="string">'age'</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4、流程控制"><a href="#3-4、流程控制" class="headerlink" title="3.4、流程控制"></a>3.4、流程控制</h4><p>if判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">3</span>)&#123;	<span class="comment">//第一个判断</span></span><br><span class="line">    alert(<span class="string">"haha"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &lt;<span class="number">5</span>)&#123;	<span class="comment">//第二个判断</span></span><br><span class="line">    alert(<span class="string">"kuwa"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;	<span class="comment">//否则</span></span><br><span class="line">    alert(<span class="string">"kkkxa"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>while循环，避免程序死循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span>(age&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    age = age + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    age = age + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;<span class="keyword">while</span>(age&lt;<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>for循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>;i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>forEach循环</strong></p>
<blockquote>
<p>5.1引入的</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">123</span>];</span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">age.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>for…in</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for(var index in object)&#123;&#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> num <span class="keyword">in</span> age)&#123;</span><br><span class="line">    <span class="keyword">if</span>(age.hasOwnProperty(num))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"存在"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(age[num])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5、Map和Set"><a href="#3-5、Map和Set" class="headerlink" title="3.5、Map和Set"></a>3.5、Map和Set</h4><blockquote>
<p> ES6的新特性~</p>
</blockquote>
<p>Map：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6     Map</span></span><br><span class="line"><span class="comment">// 学生的成绩，学生的名字</span></span><br><span class="line"><span class="comment">// var names = ["tom","jack","haha"];</span></span><br><span class="line"><span class="comment">// var scores = [100,90,80]</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'tom'</span>,<span class="number">100</span>],[<span class="string">'jack'</span>,<span class="number">90</span>],[<span class="string">'haha'</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">var</span> score = map.get(<span class="string">'tom'</span>); <span class="comment">//通过key获得value</span></span><br><span class="line">map.set(<span class="string">'admin'</span>,<span class="number">123456</span>);	<span class="comment">//新增或修改</span></span><br><span class="line">map.delete(<span class="string">'tom'</span>);		<span class="comment">//删除</span></span><br></pre></td></tr></table></figure>

<p>Set：无序不重复的集合</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>.add(2);    //添加@</span><br><span class="line"><span class="keyword">set</span>.delete(1);			//删除@</span><br><span class="line">console.log(<span class="keyword">set</span>.has(3));		//是否包含某个元素！</span><br></pre></td></tr></table></figure>

<h4 id="3-6、iterator"><a href="#3-6、iterator" class="headerlink" title="3.6、iterator"></a>3.6、iterator</h4><p>遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过for of输出arr的内容               for in  输出是下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历map</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"tom"</span>,<span class="number">100</span>],[<span class="string">"jack"</span>,<span class="number">90</span>],[<span class="string">"haha"</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历set</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set([5,6,7]);</span><br><span class="line">for (let x of <span class="keyword">set</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、函数及面向对象"><a href="#4、函数及面向对象" class="headerlink" title="4、函数及面向对象"></a>4、函数及面向对象</h3><h4 id="4-1、函数定义"><a href="#4-1、函数定义" class="headerlink" title="4.1、函数定义"></a>4.1、函数定义</h4><blockquote>
<p>定义方式一</p>
</blockquote>
<p>绝对值函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦执行到return代表函数结束，返回结果！</p>
<p>如果没有执行return，函数执行完也会返回结果，结果就是underfined</p>
<blockquote>
<p>定义方式二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>function(x){…}这是一个匿名函数。但是可以把结果赋值给abs，通过abs就可以调用函数！</p>
<p>方式一和方式二等价！</p>
<blockquote>
<p>调用函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abs(<span class="number">10</span>)  <span class="comment">//10</span></span><br><span class="line">abs(<span class="number">-10</span>)   <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>参数问题：JavaScript可以传任意个参数，也可以不传参数 ~</p>
<p>参数进来是否存在的问题？</p>
<p>假设不存在参数，如何规避？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//手动抛出异常来判断</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> x!=<span class="string">'number'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'Not a number'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>arguments</p>
</blockquote>
<p><code>arguments</code>是一个JS免费赠送的关键字；</p>
<p>代表，传递进来的所有参数，是一个数组！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"x=&gt;"</span>+x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length,i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：arguments包含所有的参数，我们有时候想使用多余的参数来进行附加操作，需要排除已有参数~</p>
<blockquote>
<p>rest</p>
</blockquote>
<p> 以前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">arguments</span>.length&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">2</span>; i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 引入的新特性，获取出了已经定义的参数之外的所有参数…</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a,b,...rest</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a=&gt;"</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b=&gt;"</span>+b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rest参数只能写在最后面，必须用…标识</p>
<h4 id="4-2、变量的作用域"><a href="#4-2、变量的作用域" class="headerlink" title="4.2、变量的作用域"></a>4.2、变量的作用域</h4><p> 在JavaScript中，var定义变量实际是有作用域的。</p>
<p>假设在函数体中声明，则在函数体外不可以使用~（非要想实现的话，可去研究<code>闭包</code>）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = i;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = x + <span class="number">2</span>;  <span class="comment">//Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>

<p>如果两个函数使用了相同的变量名，只要在函数内部就不冲突</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = i;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">'A'</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 内部函数可以访问外部函数的成员，反之则不行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部函数可以访问外部函数的成员，反之则不行</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x + <span class="number">1</span>; <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>;  <span class="comment">// Uncaught ReferenceError: y is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设，内部函数变量和外部函数的变量重名~</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="string">'A'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'inner'</span>+x); <span class="comment">//innerA</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'outer'</span>+x); <span class="comment">//outer1</span></span><br><span class="line">    f2()</span><br><span class="line">&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<p>假设在JavaScript中函数查找变量从自身函数开始~，由“内”向“外”查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。</p>
<blockquote>
<p>提升变量的作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">"x"</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">"y"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：xundefined</p>
<p>说明：js执行引擎，自动提升了y的声明，但是不会提升变量y的赋值；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> x  = <span class="string">"x"</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    y = <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个是在JavaScript建立之初就存在的特性。养成规范：所以的变量定义都放在函数的头部，不要乱放，便于代码维护；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>，</span><br><span class="line">    y = x + <span class="number">1</span>，</span><br><span class="line">    z,i,a;<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//之后随意用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>全局函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全局对象window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'xxx'</span>;</span><br><span class="line">alert(x);</span><br><span class="line">alert(<span class="built_in">window</span>.x); <span class="comment">//默认所有的全局变量，都会自动绑定在window对象下；</span></span><br></pre></td></tr></table></figure>

<p>alert()这个函数本身是一个<code>window</code>变量；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'xxx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.alert(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> old_alert = <span class="built_in">window</span>.alert;</span><br><span class="line"></span><br><span class="line"><span class="comment">//old_alert(x);</span></span><br><span class="line"></span><br><span class="line">windwo.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 发现alert() 失效了</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="built_in">window</span>.alert = old_alert;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<p>JavaScript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，报错<code>RefrenceError</code></p>
<blockquote>
<p>规范</p>
</blockquote>
<p> 由于我们所有的全局变量都会绑定到我们的window上。如果不同的js文件，使用了相同的全局变量，冲突—&gt;如何能够减少冲突？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> CareyApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">CareyApp.name = <span class="string">'carey'</span>;</span><br><span class="line">CareyApp.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题~</p>
<p>jQuery</p>
<blockquote>
<p>局部作用域let</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="number">1</span>); <span class="comment">//问题？i出了这个作用域还可以使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 let关键字，解决局部作用域冲突问题！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i+<span class="number">1</span>); <span class="comment">//Uncaught ReferenceError: i is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建议都使用<code>let</code>去定义局部作用域的变量；</p>
<blockquote>
<p>常量const</p>
</blockquote>
<p>在ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量：建议不要修改这样的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> PI = <span class="string">'3.14'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br><span class="line">PI = <span class="string">'213'</span>; <span class="comment">//可以改变这个值</span></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br></pre></td></tr></table></figure>

<p>在ES6引入了常量关键字<code>const</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">'3.14'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br><span class="line">PI = <span class="string">'213'</span>; <span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br></pre></td></tr></table></figure>

<h4 id="4-3、方法"><a href="#4-3、方法" class="headerlink" title="4.3、方法"></a>4.3、方法</h4><blockquote>
<p>定义方法</p>
</blockquote>
<p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carey = &#123;</span><br><span class="line">    name: <span class="string">'特朗普'</span>,</span><br><span class="line">    birth: <span class="number">2000</span>,</span><br><span class="line">    <span class="comment">//	方法</span></span><br><span class="line">    age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 今年 - 出生的年</span></span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now-<span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line">carey.name</span><br><span class="line"><span class="comment">//方法，一定要带 ()</span></span><br><span class="line">carey.age()</span><br></pre></td></tr></table></figure>

<p>this.代表什么？拆开上面的代码看看~</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 今年 - 出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> carey = &#123;</span><br><span class="line">    name: <span class="string">'特朗普'</span>,</span><br><span class="line">    birth: <span class="number">2000</span>,</span><br><span class="line">    age: getAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// carey.age()      有效</span></span><br><span class="line"><span class="comment">// getAge()    NaN      window对象</span></span><br></pre></td></tr></table></figure>

<p>this是无法指向的，默认指向调用它的那个对象；</p>
<blockquote>
<p>apply</p>
</blockquote>
<p>在js中可以控制this的指向 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 今年 - 出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> carey = &#123;</span><br><span class="line">    name: <span class="string">'特朗普'</span>,</span><br><span class="line">    birth: <span class="number">2000</span>,</span><br><span class="line">    age: getAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// carey.age()       有效</span></span><br><span class="line"></span><br><span class="line">getAge.apply(carey,[]); <span class="comment">//this指向了carey，参数为空</span></span><br></pre></td></tr></table></figure>

<h3 id="5、内部对象"><a href="#5、内部对象" class="headerlink" title="5、内部对象"></a>5、内部对象</h3><blockquote>
<p>标准对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span></span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span></span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"boolean"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span></span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.abs</span><br><span class="line"><span class="string">"function"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span></span><br><span class="line"><span class="string">"undefined"</span></span><br></pre></td></tr></table></figure>



<h4 id="5-1、Date"><a href="#5-1、Date" class="headerlink" title="5.1、Date"></a>5.1、Date</h4><blockquote>
<p>基本使用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//Wed Jun 03 2020 20:54:17 GMT+0800 (中国标准时间)</span></span><br><span class="line">now.getFullYear(); <span class="comment">//年</span></span><br><span class="line">now.getMonth(); <span class="comment">// 月 0~11</span></span><br><span class="line">now.getDate(); <span class="comment">// 日</span></span><br><span class="line">now.getDay(); <span class="comment">//星期几</span></span><br><span class="line">now.getHours();<span class="comment">// 时</span></span><br><span class="line">now.getMinutes(); <span class="comment">// 分</span></span><br><span class="line">now.getSeconds(); <span class="comment">//秒</span></span><br><span class="line"></span><br><span class="line">now.getTime(); <span class="comment">//时间戳 全世界统一 1970.1.1 0:00:00  毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1578106175991</span>)) <span class="comment">//时间戳转化为时间</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>转换</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">now = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1578106175991</span>)</span><br><span class="line">Sat Jan <span class="number">04</span> <span class="number">2020</span> <span class="number">10</span>:<span class="number">49</span>:<span class="number">35</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line">now.toLocaleString     <span class="comment">//注意，调用是一个方法，不是一个属性！</span></span><br><span class="line">ƒ toLocaleString() &#123; [native code] &#125;</span><br><span class="line">now.toLocaleString()</span><br><span class="line"><span class="string">"2020/1/4 上午10:49:35"</span></span><br><span class="line">now.toGMTString <span class="comment">//注意，调用是一个方法，不是一个属性！</span></span><br><span class="line">ƒ toUTCString() &#123; [native code] &#125;</span><br><span class="line">now.toGMTString()</span><br><span class="line"><span class="string">"Sat, 04 Jan 2020 02:49:35 GMT"</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2、JSON"><a href="#5-2、JSON" class="headerlink" title="5.2、JSON"></a>5.2、JSON</h4><blockquote>
<p>json是什么</p>
</blockquote>
<p>早期，所有数据传输习惯使用XML文件</p>
<ul>
<li><a href="https://baike.baidu.com/item/JSON" target="_blank" rel="noopener">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式</li>
<li>简洁和清晰的<strong>层次结构</strong>使得 JSON 成为理想的数据交换语言</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</li>
</ul>
<p>在JavaScript一切皆为对象，任何JS支持的类型都可以用JSON表示</p>
<p>格式：</p>
<ul>
<li>对象都用{}</li>
<li>数组都用[]</li>
<li>所有的键值对 都是用key:value</li>
</ul>
<p>JSON字符串和JS对象的转化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name: <span class="string">"carey"</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象转化为json字符串 &#123;"name":"carey","age":3,"sex":"男"&#125;</span></span><br><span class="line"><span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//json 字符串转化为对象  参数为json字符串</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"carey","age":3,"sex":"男"&#125;'</span>);</span><br></pre></td></tr></table></figure>

<p>JSON和JS对象的区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="string">'hello'</span>,<span class="attr">b</span>:<span class="string">'hellob'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"a":"hello","b":"hellob"&#125;'</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3、Ajax"><a href="#5-3、Ajax" class="headerlink" title="5.3、Ajax"></a>5.3、Ajax</h4><ul>
<li>原生的js写法，xhr异步请求</li>
<li>jQuery封装好的方法$(“#name”).ajax(“”)</li>
<li>axios 请求</li>
</ul>
<blockquote>
<p>原型对象</p>
</blockquote>
<p>JavaScript、java、c#….都是面向对象，但JavaScript有些区别！</p>
<p>类：模板</p>
<p>对象：具体的实例</p>
<p>在JavaScript需要换一下思维方式！</p>
<p>原型 ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = &#123;</span><br><span class="line">    name: <span class="string">"carey"</span>,</span><br><span class="line">    age: <span class="number">3</span>,</span><br><span class="line">    run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"run..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">"xiaoming"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型对象</span></span><br><span class="line">xiaoming.__proto__ = Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Bird = &#123;</span><br><span class="line">    fly:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"fly...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小明的原型是Student</span></span><br><span class="line">xiaoming.__proto__ = Bird;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>class继承</p>
</blockquote>
<p><code>class</code>关键字，是在ES6引入的</p>
<p>1、定义一个类，属性，方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个学生的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    hello()&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">"xiaoming"</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Student(<span class="string">"xiaohong"</span>);</span><br><span class="line">xiaoming.hello()</span><br></pre></td></tr></table></figure>

<p>2、继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个学生的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    hello()&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,grade)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    myGrade()&#123;</span><br><span class="line">        alert(<span class="string">'我是一名小学生'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> XiaoStudent(<span class="string">"xiaohong"</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>本质：查看对象原型</p>
<p><img src="/blog/2020/05/28/JavaScript-study/%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B.png" alt="image-20200603220250194"></p>
<blockquote>
<p>原型链</p>
</blockquote>
<p>__ proto __：</p>
<p><img src="/blog/2020/05/28/JavaScript-study/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="image-20200603220711776"></p>
<h4 id="6-2、更新Dom"><a href="#6-2、更新Dom" class="headerlink" title="6.2、更新Dom"></a>6.2、更新Dom</h4><h3 id="7、操作Bom对象（重点）"><a href="#7、操作Bom对象（重点）" class="headerlink" title="7、操作Bom对象（重点）"></a>7、操作Bom对象（重点）</h3><blockquote>
<p>浏览器介绍</p>
</blockquote>
<p>JavaScript和浏览器关系？</p>
<p>JavaScript诞生就是为了能够让他在浏览器中运行！</p>
<p>BOM：浏览器对象模型</p>
<ul>
<li><p>IE 6~11</p>
</li>
<li><p>Chrome</p>
</li>
<li><p>Safari</p>
</li>
<li><p>FireFox    </p>
</li>
</ul>
<p>三方</p>
<ul>
<li>QQ浏览器</li>
<li>360浏览器</li>
</ul>
<blockquote>
<p>window(重要)</p>
</blockquote>
<p>window代表浏览器窗口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight</span><br><span class="line"><span class="number">230</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth</span><br><span class="line"><span class="number">994</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight</span><br><span class="line"><span class="number">832</span></span><br><span class="line"><span class="built_in">window</span>.outerWidth</span><br><span class="line"><span class="number">1009</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Navigator（不建议使用）</p>
</blockquote>
<p>Navigator,封装了浏览器的信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.appName</span><br><span class="line"><span class="string">"Netscape"</span></span><br><span class="line">navigator.appVersion</span><br><span class="line"><span class="string">"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"</span></span><br><span class="line">navigator.userAgent</span><br><span class="line"><span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"</span></span><br><span class="line">navigator.platform</span><br><span class="line"><span class="string">"Win32"</span></span><br></pre></td></tr></table></figure>

<p>大多数时候，我们不会使用<code>navigator</code>对象，因为会被人为修改！</p>
<p>不建议使用这些属性来判断和编写代码</p>
<blockquote>
<p>screen</p>
</blockquote>
<p>代表屏幕尺寸</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line"><span class="number">1536</span> px</span><br><span class="line">screen.height</span><br><span class="line"><span class="number">864</span> px</span><br></pre></td></tr></table></figure>

<blockquote>
<p>location(重要）</p>
</blockquote>
<p>location代表当前页面的URL信息</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">host: <span class="string">"www.baidu.com"</span></span><br><span class="line">href: <span class="string">"https://www.baidu.com/"</span></span><br><span class="line">protocol: <span class="string">"https:"</span></span><br><span class="line">reload: ƒ reload()      <span class="comment">//刷新网页</span></span><br><span class="line"><span class="comment">// 设置新的地址</span></span><br><span class="line">location.assign(<span class="string">'https://cxxqing.github.io/blog/'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>document（内容；DOM）</p>
</blockquote>
<p>document代表当前的页面，HTML DOM文档树</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.title</span><br><span class="line"><span class="string">"百度一下，你就知道"</span></span><br><span class="line"><span class="built_in">document</span>.title=<span class="string">'carey学java'</span></span><br><span class="line"><span class="string">"carey学java"</span></span><br></pre></td></tr></table></figure>

<p>获取具体的文档树节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dl = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br></pre></td></tr></table></figure>

<p>劫持cookie原理</p>
<p><a href="http://www.taobao.com" target="_blank" rel="noopener">www.taobao.com</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"aa.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--恶意人员：获取你的cookie上传到他的服务器--&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务器端可以设置cookie:httpOnly</p>
<blockquote>
<p>history（不建议使用）</p>
</blockquote>
<p>history代表浏览器的历史记录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.back()  <span class="comment">//后退</span></span><br><span class="line">history.forward() <span class="comment">//前进</span></span><br></pre></td></tr></table></figure>

<h3 id="8、操作DOM对象（重点）"><a href="#8、操作DOM对象（重点）" class="headerlink" title="8、操作DOM对象（重点）"></a>8、操作DOM对象（重点）</h3><blockquote>
<p>核心</p>
</blockquote>
<p>浏览器网页就是一个Dom树形结构！</p>
<ul>
<li>更新：更新DOM节点</li>
<li>遍历DOM节点：得到DOM节点</li>
<li>删除：删除一个DOM节点</li>
<li>添加：添加一个新的节点</li>
</ul>
<p>要操作一个DOM节点，就必须要先获得这个DOM节点</p>
<blockquote>
<p>获得Dom节点</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对应CSS选择器</span></span><br><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'h1'</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'p2'</span>);</span><br><span class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">'father'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> childrens = father.children[index]; <span class="comment">//获取父节点下的所有子节点</span></span><br><span class="line"><span class="comment">// father.firstchild</span></span><br><span class="line"><span class="comment">// father.lastchild</span></span><br></pre></td></tr></table></figure>

<p>这个原生代码，之后尽量使用jQuery</p>
<blockquote>
<p>更新节点</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> id1 = <span class="built_in">document</span>.getElementById(<span class="string">'id1'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>操作文本</p>
<ul>
<li><code>id1.innerText=&#39;456&#39;</code>    修改文本的值</li>
<li><code>id1.innerHTML=&#39;&lt;strong&gt;123&lt;/strong&gt;&#39;</code>   可以解析HTML文本标签</li>
</ul>
<p>操作JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.style.color = <span class="string">'red'</span>; <span class="comment">// 属性使用 字符串 包裹</span></span><br><span class="line">id1.style.fontSize = <span class="string">'20px'</span>; <span class="comment">//- 转 驼峰命名</span></span><br><span class="line">id1.style.padding = <span class="string">'2em'</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除节点</p>
</blockquote>
<p>删除节点的步骤：先获取父节点，再通过父节点删除自己</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class-</span>"<span class="attr">p2</span>"&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> self = <span class="built_in">document</span>.getElementById(<span class="string">'p1'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> father = p1.parentElement;</span></span><br><span class="line">    father.removeChild(self)</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">//删除是一个动态的过程;</span></span></span><br><span class="line">    father.removeChild(father.children[0])</span><br><span class="line">    father.removeChild(father.children[1])</span><br><span class="line">    father.removeChild(father.children[2])</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：删除多个节点的时候，children是在时刻变化的，删除节点的时候一定要注意！</p>
<blockquote>
<p>插入节点</p>
</blockquote>
<p>我们获得了某个DOM节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素了，但是如果这个DOM节点已经存在元素了，我们就不能这么干！会产生覆盖！</p>
<p>追加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"js"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"se"</span>&gt;</span>JAVASE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"ee"</span>&gt;</span>JAVAEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"me"</span>&gt;</span>JAVAME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">'js'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span></span><br><span class="line">        list.append(js);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/blog/2020/05/28/JavaScript-study/%E8%BF%BD%E5%8A%A0.png" alt="image-20200604114921274"></p>
<blockquote>
<p>创建一个新的标签，实现插入</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">'js'</span>); <span class="comment">//已经存在的节点</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="comment">//通过JS创建一个新的节点</span></span><br><span class="line"><span class="keyword">var</span> newP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);<span class="comment">//创建一个p标签</span></span><br><span class="line">newP.id = <span class="string">'newP'</span>;</span><br><span class="line">newP.innerText = <span class="string">"Hello,Carey"</span>;</span><br><span class="line"><span class="comment">//创建一个标签节点(通过这个属性可以设置任意的值)</span></span><br><span class="line"><span class="keyword">var</span> myScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">myScript.setAttribute(<span class="string">'type'</span>,<span class="string">'text/javascript'</span>);</span><br><span class="line"><span class="comment">//可以创建一个style标签</span></span><br><span class="line"><span class="keyword">var</span> myStyle = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>); <span class="comment">// 创建了一个空style标签</span></span><br><span class="line">myStyle.setAttribute(<span class="string">'type'</span>,<span class="string">'text/css'</span>);</span><br><span class="line">myStyle.innerHTML = <span class="string">'body&#123;background-color:chartreuse;&#125;'</span>; <span class="comment">//设置标签内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(myStyle)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>insert</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ee = <span class="built_in">document</span>.getElementById(<span class="string">'ee'</span>);</span><br><span class="line"><span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">'js'</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="comment">// 要包含的节点，insertBefore(newNode,targetNode)</span></span><br><span class="line">list.insertBefore(js,ee)</span><br></pre></td></tr></table></figure>

<h3 id="9、操作表单（验证）"><a href="#9、操作表单（验证）" class="headerlink" title="9、操作表单（验证）"></a>9、操作表单（验证）</h3><blockquote>
<p>表单是什么  form  DOM 树</p>
</blockquote>
<ul>
<li>文本框     text</li>
<li>下拉框     select</li>
<li>单选框      radio</li>
<li>多选框      checkbox</li>
<li>隐藏域     hidden</li>
<li>密码框      password</li>
<li>……</li>
</ul>
<p>表单的目的：提交信息</p>
<blockquote>
<p>获取要提交的信息</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 多选框的值就是定义好的value --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"man"</span> <span class="attr">id</span>=<span class="string">"boy"</span>&gt;</span> 男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"woman"</span> <span class="attr">id</span>=<span class="string">"gril"</span>&gt;</span> 女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> input_text = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> boy_radio = <span class="built_in">document</span>.getElementById(<span class="string">'boy'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> gril_radio = <span class="built_in">document</span>.getElementById(<span class="string">'gril'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//得到输入框的值</span></span></span><br><span class="line">        input_text.value</span><br><span class="line"><span class="actionscript">        <span class="comment">//修改输入框的值</span></span></span><br><span class="line"><span class="actionscript">        input_text.value=<span class="string">'123'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//对于单选框、多选框等固定的值，boy_radio.value只能取到当前的值</span></span></span><br><span class="line"><span class="actionscript">        boy_radio.checked; <span class="comment">//查看返回的结果是否为true，如果为true，则被选中</span></span></span><br><span class="line"><span class="actionscript">        gril_radio.checked = <span class="literal">true</span>;<span class="comment">//赋值</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>提交表单    md5加密密码，表单优化</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">表单绑定提交事件</span></span><br><span class="line"><span class="comment">onsubmit= 绑定一个提交检测的函数， true , false</span></span><br><span class="line"><span class="comment">将这个结果返回给表单，使用onsubmit 接收</span></span><br><span class="line"><span class="comment">onsubmit = "return aaa()"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">onsubmit</span>=<span class="string">"return aaa()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"input-password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"md5-password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定事件 onclick 被点击 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">aaa</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">        alert(1);</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> uname = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwd = <span class="built_in">document</span>.getElementById(<span class="string">'input-password'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> md5pwd = <span class="built_in">document</span>.getElementById(<span class="string">'md5-password'</span>);</span></span><br><span class="line"></span><br><span class="line">        md5pwd.value = md5(pwd.value);</span><br><span class="line"><span class="actionscript">        <span class="comment">//可以检验判断表单内容，true就是通过提交，false阻止提交</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">true</span>;          </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10、jQuery"><a href="#10、jQuery" class="headerlink" title="10、jQuery"></a>10、jQuery</h3><p>JavaScript</p>
<p>jQuery库，里面存在大量的JavaScript函数</p>
<blockquote>
<p>获取jQuery</p>
</blockquote>
<p><img src="/blog/2020/05/28/JavaScript-study/jQuery.png" alt="image-20200604154437977"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.5.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//选择器就是css的选择器</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#test-jquery'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'hello,jquery!'</span>);</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择器</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原生js，选择器少，麻烦不好记</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line"><span class="built_in">document</span>.getElementById();</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery     css中的选择器它全部都能用</span></span><br><span class="line">$(<span class="string">'p'</span>).click();<span class="comment">//标签选择器</span></span><br><span class="line">$(<span class="string">'#id1'</span>).click();<span class="comment">//id选择器</span></span><br><span class="line">$(<span class="string">'.class1'</span>).click();<span class="comment">//class选择器</span></span><br></pre></td></tr></table></figure>

<p>文档工具站：<a href="https://jquery.cuishifeng.cn/" target="_blank" rel="noopener">https://jquery.cuishifeng.cn/</a></p>
<p>jQuery公式：</p>
<p><img src="/blog/2020/05/28/JavaScript-study/jQuery%E5%85%AC%E5%BC%8F.png" alt="image-20200604161837564"></p>
<p><code>$(选择器).事件(事件函数)</code></p>
<blockquote>
<p>事件</p>
</blockquote>
<p>鼠标减，键盘事件，其他事件</p>
<p><img src="/blog/2020/05/28/JavaScript-study/%E9%BC%A0%E6%A0%87.png" alt="image-20200604163227614"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.5.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#divMove</span>&#123;</span></span><br><span class="line">                width: 500px;</span><br><span class="line">                height: 500px;</span><br><span class="line">                border: 1px solid red;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要求：获取鼠标当前的一个坐标 --&gt;</span></span><br><span class="line">        mouse: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"mouseMove"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divMove"</span>&gt;</span></span><br><span class="line">            在这里移动鼠标试试</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 当网页元素加载完毕之后，响应事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#divMove'</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#mouseMove'</span>).text(<span class="string">'x:'</span>+e.pageX+<span class="string">'y:'</span>+e.pageY)</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>操作DOM</p>
</blockquote>
<p>节点文本操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).text(); <span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).text(<span class="string">'设置值'</span>); <span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">'#test-ul'</span>).html();<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">'#test-ul'</span>).html(<span class="string">'&lt;strong&gt;123&lt;/strong&gt;'</span>);<span class="comment">//设置值</span></span><br></pre></td></tr></table></figure>

<p>css的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).css(&#123;<span class="string">"color"</span>,<span class="string">"red"</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>元素的显示和隐藏：本质 <code>display:none;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).show();</span><br><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).hide();</span><br></pre></td></tr></table></figure>

<p>娱乐测试</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).width()</span><br><span class="line">$(<span class="built_in">window</span>).height()</span><br><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).toggle();</span><br></pre></td></tr></table></figure>

<p><strong>未来ajax();</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#form'</span>).ajax()</span><br><span class="line"></span><br><span class="line">$.ajax(&#123; <span class="attr">url</span>:<span class="string">"test.html"</span>, <span class="attr">context</span>:<span class="built_in">document</span>.body, <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">"donw"</span>);</span><br><span class="line">&#125;&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小技巧</p>
</blockquote>
<p>1、巩固JS（看jQuery源码，看游戏源码）</p>
<p>2、巩固HTML、CSS（扒网站，全部down下来，然后对应修改查看效果~）</p>
]]></content>
  </entry>
  <entry>
    <title>SMBMS(基于servlet)</title>
    <url>/blog/2020/05/31/smbms-web-servlet/</url>
    <content><![CDATA[<h2 id="SMBMS"><a href="#SMBMS" class="headerlink" title="SMBMS"></a>SMBMS</h2><p><img src="/blog/2020/05/31/smbms-web-servlet/SMBMS.png" alt="image-20200531154107414"></p>
<p>数据库：</p>
<p><img src="/blog/2020/05/31/smbms-web-servlet/%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20200531154623620"></p>
<p><strong>项目如何搭建？</strong></p>
<p>考虑使用不使用Maven？ 依赖，jar</p>
<h2 id="项目搭建准备工作"><a href="#项目搭建准备工作" class="headerlink" title="项目搭建准备工作"></a>项目搭建准备工作</h2><p>1.搭建一个maven web项目</p>
<p>2.配置Tomcat</p>
<p>3.测试项目是否能够跑起来</p>
<p>4.导入项目中会遇到的jar包</p>
<p>jsp,servlet,mysql驱动,jstl,standard…</p>
<p>5.创建项目包结构</p>
<p><img src="/blog/2020/05/31/smbms-web-servlet/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%8C%85%E7%BB%93%E6%9E%84.png" alt="image-20200531160228546"></p>
<p>6.编写实体类 </p>
<p>ORM映射：表-类映射</p>
<p>7.编写基础公共类</p>
<p>​    1.数据库配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/smbms?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>​    2.编写数据库的公共类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//操作数据库的公共类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块，类加载的时候就初始化了</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//通过类加载器读取对应的资源</span></span><br><span class="line">        InputStream is = BaseDao.class.getClassLoader().getResourceAsStream("db.properties");</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        driver = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">        url = properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">        username = properties.getProperty(<span class="string">"username"</span>);</span><br><span class="line">        password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取数据库的链接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写查询公共方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">execute</span><span class="params">(Connection connection, String sql, Object[] params, ResultSet resultSet, PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//预编译的sql，在后面直接执行就可以了</span></span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">            <span class="comment">//setObject,占位符从1开始，但是我们的数组是从0开始！</span></span><br><span class="line">            preparedStatement.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">return</span> resultSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写增删改公共方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(Connection connection, String sql, Object[] params, PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">            <span class="comment">//setObject,占位符从1开始，但是我们的数组是从0开始！</span></span><br><span class="line">            preparedStatement.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> updateRows = preparedStatement.executeUpdate();</span><br><span class="line">        <span class="keyword">return</span> updateRows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">closeResource</span><span class="params">(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">                <span class="comment">//GC回收</span></span><br><span class="line">                resultSet = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preparedStatement.close();</span><br><span class="line">                <span class="comment">//GC回收</span></span><br><span class="line">                preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">                <span class="comment">//GC回收</span></span><br><span class="line">                connection = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    3.编写字符编码过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">            request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--字符编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.carey.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    4.导入静态资源</p>
<p><img src="/blog/2020/05/31/smbms-web-servlet/%E5%AF%BC%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.png" alt="image-20200531181356347"></p>
<h2 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h2><p><img src="/blog/2020/05/31/smbms-web-servlet/%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD.png" alt="image-20200531182905985"></p>
<p>1.编写前端页面</p>
<p>2.设置首页</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置欢迎页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.编写dao层登录用户的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到要登录的用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(Connection connection, String userCode)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>

<p>4.编写dao接口的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(Connection connection, String userCode)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">"select * from smbms_user where userCode=?"</span>;</span><br><span class="line">            Object[] params = &#123;userCode&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            rs = BaseDao.execute(connection, pstm, rs, sql, params);</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                user = <span class="keyword">new</span> User();</span><br><span class="line">                user.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">                user.setUserCode(rs.getString(<span class="string">"userCode"</span>));</span><br><span class="line">                user.setUserName(rs.getString(<span class="string">"userName"</span>));</span><br><span class="line">                user.setUserPassword(rs.getString(<span class="string">"userPassword"</span>));</span><br><span class="line">                user.setGender(rs.getInt(<span class="string">"gender"</span>));</span><br><span class="line">                user.setBirthday(rs.getDate(<span class="string">"birthday"</span>));</span><br><span class="line">                user.setPhone(rs.getString(<span class="string">"phone"</span>));</span><br><span class="line">                user.setAddress(rs.getString(<span class="string">"address"</span>));</span><br><span class="line">                user.setUserRole(rs.getInt(<span class="string">"userRole"</span>));</span><br><span class="line">                user.setCreatedBy(rs.getInt(<span class="string">"createdBy"</span>));</span><br><span class="line">                user.setCreationDate(rs.getTimestamp(<span class="string">"creationDate"</span>));</span><br><span class="line">                user.setModifyBy(rs.getInt(<span class="string">"modifyBy"</span>));</span><br><span class="line">                user.setModifyDate(rs.getTimestamp(<span class="string">"modifyDate"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>, pstm, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.业务层接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode,String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.业务层实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//业务层都会调用dao层，所以我们要引入Dao层</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode, String password)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = BaseDao.getConnection();</span><br><span class="line">            <span class="comment">//通过业务层调用具体的数据库操作</span></span><br><span class="line">            user = userDao.getLoginUser(connection, userCode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.编写servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Servlet：控制层，调用业务层代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"LoginServlet--start..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户名和密码</span></span><br><span class="line">        String userCode = req.getParameter(<span class="string">"userCode"</span>);</span><br><span class="line">        String userPassword = req.getParameter(<span class="string">"userPassword"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//和数据库中的密码进行对比，调用业务层；</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        User user = userService.login(userCode, userPassword);   <span class="comment">//这里已经把登录的人给查出来了</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;  <span class="comment">//查有此人，可以登录</span></span><br><span class="line">            <span class="comment">//将用户的信息放到session当中</span></span><br><span class="line">            req.getSession().setAttribute(Constants.USER_SESSION,user);</span><br><span class="line">            <span class="comment">//跳转到主页</span></span><br><span class="line">            resp.sendRedirect(<span class="string">"jsp/frame.jsp"</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;<span class="comment">//查无此人，无法登录</span></span><br><span class="line">            <span class="comment">//转发回登录页面，顺带提示用户名或者密码错误</span></span><br><span class="line">            req.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或者密码不正确"</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.注册servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.carey.servlet.user.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>9.测试访问，确保以上功能成功</p>
<p>补充：==遇到输入账号密码后，出现异常 java.lang.ClassNotFoundException com.mysql.jdbc.Driver==</p>
<p>​                ==解决方法：必须把mysql-connector-java-5.1.7-bin.jar导入到tomcat的lib目录下面！==</p>
<h2 id="登录功能优化"><a href="#登录功能优化" class="headerlink" title="登录功能优化"></a>登录功能优化</h2><p>注销功能：</p>
<p>思路：移除session，返回登录页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//移除用户的Constants.USER_SESSION</span></span><br><span class="line">        req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">        resp.sendRedirect(<span class="string">"/login.jsp"</span>);    <span class="comment">//返回登录页面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.carey.servlet.user.LogoutServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/logout.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>登录拦截优化</strong></p>
<p>编写一个过滤器，并注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤器，从Session中获取用户</span></span><br><span class="line">        User user = (User)request.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123; <span class="comment">//已经被移除或者注销了，或者未登录</span></span><br><span class="line">            response.sendRedirect(<span class="string">"/smbms/error.jsp"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            chain.doFilter(req, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户登录过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.carey.filter.SysFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="密码修改"><a href="#密码修改" class="headerlink" title="密码修改"></a>密码修改</h2><p>1.导入前端素材</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href="$&#123;pageContext.request.contextPath &#125;/jsp/pwdmodify.jsp"&gt;密码修改&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<p>2.写项目，建议从底层向上写</p>
<p><img src="/blog/2020/05/31/smbms-web-servlet/%E4%BB%8E%E5%BA%95%E5%B1%82%E6%9C%9B%E4%B8%8A%E5%86%99.png" alt="image-20200601184601650"></p>
<p>3.UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改当前用户密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(Connection connection, <span class="keyword">int</span> id, String password)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>

<p>4.UserDao实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改当前用户密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(Connection connection, <span class="keyword">int</span> id, String password)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> execute = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">"update smbms_user set userPassword = ? where id = ?"</span>;</span><br><span class="line">            Object params[] = &#123;password,id&#125;;</span><br><span class="line">            execute = BaseDao.execute(connection, pstm, sql, params);</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>, pstm, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> execute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.UserService层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户ID修改密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String pwd)</span></span>;</span><br></pre></td></tr></table></figure>

<p>6.UserService实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String pwd)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//修改密码</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = BaseDao.getConnection();</span><br><span class="line">        <span class="keyword">if</span>(userDao.updatePwd(connection, id, pwd)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        BaseDao.closeResource(connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>==补充：IntelliJ IDEA: Error:(11, 72) java: 程序包com.mysql.jdbc不存在==</p>
<p><img src="/blog/2020/05/31/smbms-web-servlet/%E5%AF%BC%E5%85%A5mysql%E5%8C%85%E8%A7%A3%E5%86%B3jdbc%E6%8A%A5%E9%94%99.png" alt="image-20200601214751022"></p>
<p>7.Servlet记得实现复用，需要提取出方法！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现servlet复用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String method = req.getParameter(<span class="string">"method"</span>);</span><br><span class="line">        <span class="keyword">if</span>(method!=<span class="keyword">null</span> &amp;&amp; method.equals(<span class="string">"savepwd"</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.updatePwd(req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePwd</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从Session里面拿ID;</span></span><br><span class="line">        Object o = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">        String newpassword = req.getParameter(<span class="string">"newpassword"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o != <span class="keyword">null</span> &amp;&amp; newpassword != <span class="keyword">null</span> &amp;&amp; newpassword.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">            flag = userService.updatePwd(((User) o).getId(), newpassword);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                req.setAttribute(<span class="string">"message"</span>, <span class="string">"修改密码成功，请退出，使用新密码登录"</span>);</span><br><span class="line">                <span class="comment">//密码修改成功，移除当前session</span></span><br><span class="line">                req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                req.setAttribute(<span class="string">"message"</span>, <span class="string">"密码修改失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute(<span class="string">"meaage"</span>, <span class="string">"新密码有问题"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">"pwdmodify.jsp"</span>).forward(req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.测试</p>
<p><strong>优化密码修改使用Ajax：</strong></p>
<p>1.阿里巴巴的fastjason</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.后台代码修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePwd</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从Session里面拿ID;</span></span><br><span class="line">    Object o = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">    String newpassword = req.getParameter(<span class="string">"newpassword"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (o != <span class="keyword">null</span> &amp;&amp; newpassword != <span class="keyword">null</span> &amp;&amp; newpassword.length() != <span class="number">0</span>) &#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        flag = userService.updatePwd(((User) o).getId(), newpassword);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            req.setAttribute(<span class="string">"message"</span>, <span class="string">"修改密码成功，请退出，使用新密码登录"</span>);</span><br><span class="line">            <span class="comment">//密码修改成功，移除当前session</span></span><br><span class="line">            req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute(<span class="string">"message"</span>, <span class="string">"密码修改失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        req.setAttribute(<span class="string">"meaage"</span>, <span class="string">"新密码有问题"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        req.getRequestDispatcher(<span class="string">"pwdmodify.jsp"</span>).forward(req, resp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证旧密码，session中有用户的密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pwdModify</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">    <span class="comment">//从Session里面拿ID;</span></span><br><span class="line">    Object o = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">    String oldpassword = req.getParameter(<span class="string">"oldpassword"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//万能的Map：结果集</span></span><br><span class="line">    Map&lt;String, String&gt; resultMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(o==<span class="keyword">null</span>)&#123;    <span class="comment">//Session失效了，session过期了</span></span><br><span class="line">        resultMap.put(<span class="string">"result"</span>, <span class="string">"sessionerror"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(StringUtils.isNullOrEmpty(oldpassword)) &#123;<span class="comment">//输入的密码为空</span></span><br><span class="line">        resultMap.put(<span class="string">"result"</span>,<span class="string">"error"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        String userPassword = ((User) o).getUserPassword();<span class="comment">//session中用户的密码</span></span><br><span class="line">        <span class="keyword">if</span>(oldpassword.equals(userPassword))&#123;</span><br><span class="line">            resultMap.put(<span class="string">"result"</span>, <span class="string">"true"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resultMap.put(<span class="string">"result"</span>, <span class="string">"false"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        <span class="comment">//JSONArray  阿里巴巴的JSON工具类，转换格式</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            resultMap = ["result","sessionerror","result","error"]</span></span><br><span class="line"><span class="comment">            Json格式 = &#123;key:value&#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        writer.write(JSONArray.toJSONString(resultMap));</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.测试</p>
<h2 id="用户管理实现"><a href="#用户管理实现" class="headerlink" title="用户管理实现"></a>用户管理实现</h2><p>思路：</p>
<p><img src="/blog/2020/05/31/smbms-web-servlet/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png" alt="image-20200602212830717"></p>
<p>1.导入分页的工具类</p>
<p>2.用户列表页面导入</p>
<h3 id="1、获取用户数量"><a href="#1、获取用户数量" class="headerlink" title="1、获取用户数量"></a>1、获取用户数量</h3><p>1.UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户名或者角色查询用户总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection,String username,<span class="keyword">int</span> userRole)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>

<p>2.UserDaoIml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户名或者角色查询用户总数【最难理解的SQL】</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection, String username, <span class="keyword">int</span> userRole)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">"select count(1) as count from smbms_user u,smbms_role r where u.userRole = r.id"</span>);</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isNullOrEmpty(username))&#123;</span><br><span class="line">            sql.append(<span class="string">" and u.userName like ?"</span>);</span><br><span class="line">            list.add(<span class="string">"%"</span>+username+<span class="string">"%"</span>); <span class="comment">//index=0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(userRole&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            sql.append(<span class="string">" and u.userRole = ?"</span>);</span><br><span class="line">            list.add(userRole);  <span class="comment">//index=1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//怎么把List转换为数组</span></span><br><span class="line">        Object[] params = list.toArray();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"UserDaoImpl-&gt;getUserCount"</span>+sql.toString());<span class="comment">//输出最后完整的sql语句</span></span><br><span class="line"></span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">            count = rs.getInt(<span class="string">"count"</span>);<span class="comment">//从结果集中获取最终的数量</span></span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//查询记录数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(String username,<span class="keyword">int</span> userRole)</span></span>;</span><br></pre></td></tr></table></figure>

<p>4.UserServiceImpl    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询记录数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(String username, <span class="keyword">int</span> userRole)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = BaseDao.getConnection();</span><br><span class="line">        count = userDao.getUserCount(connection, username, userRole);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        BaseDao.closeResource(connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、获取用户列表"><a href="#2、获取用户列表" class="headerlink" title="2、获取用户列表"></a>2、获取用户列表</h3><p>1.UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection, String userName, <span class="keyword">int</span> userRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span><span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>

<p>2.UserDaoImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection, String userName, <span class="keyword">int</span> userRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">"select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole = r.id"</span>);</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isNullOrEmpty(userName))&#123;</span><br><span class="line">            sql.append(<span class="string">" and u.userName like ?"</span>);</span><br><span class="line">            list.add(<span class="string">"%"</span>+userName+<span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在数据库中，分页使用   limit  startIndex,pageSize;   总数</span></span><br><span class="line">        <span class="comment">//当前页 （当前页-1）*页面大小</span></span><br><span class="line">        <span class="comment">//0,5       1   0   01234</span></span><br><span class="line">        <span class="comment">//5,5       2   5   56789</span></span><br><span class="line">        <span class="comment">//10,5      3   10  ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(userRole &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sql.append(<span class="string">" and u.userRole = ?"</span>);</span><br><span class="line">            list.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        sql.append(<span class="string">" order by creationDate DESC limit ?,?"</span>);</span><br><span class="line">        currentPageNo = (currentPageNo-<span class="number">1</span>)*pageSize;</span><br><span class="line">        list.add(currentPageNo);</span><br><span class="line">        list.add(pageSize);</span><br><span class="line"></span><br><span class="line">        Object[] params = list.toArray();</span><br><span class="line">        System.out.println(<span class="string">"sql ----&gt; "</span> + sql.toString());</span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            User _user = <span class="keyword">new</span> User();</span><br><span class="line">            _user.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">            _user.setUserCode(rs.getString(<span class="string">"userCode"</span>));</span><br><span class="line">            _user.setUserName(rs.getString(<span class="string">"userName"</span>));</span><br><span class="line">            _user.setGender(rs.getInt(<span class="string">"gender"</span>));</span><br><span class="line">            _user.setBirthday(rs.getDate(<span class="string">"birthday"</span>));</span><br><span class="line">            _user.setPhone(rs.getString(<span class="string">"phone"</span>));</span><br><span class="line">            _user.setUserRole(rs.getInt(<span class="string">"userRole"</span>));</span><br><span class="line">            _user.setUserRoleName(rs.getString(<span class="string">"userRoleName"</span>));</span><br><span class="line">            userList.add(_user);</span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.closeResource(<span class="keyword">null</span>, pstm, rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据条件查询用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(String queryUserName, <span class="keyword">int</span> queryUserRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span></span>;</span><br></pre></td></tr></table></figure>

<p>4.UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据条件查询用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(String queryUserName, <span class="keyword">int</span> queryUserRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(<span class="string">"queryUserName ---- &gt; "</span> + queryUserName);</span><br><span class="line">    System.out.println(<span class="string">"queryUserRole ---- &gt; "</span> + queryUserRole);</span><br><span class="line">    System.out.println(<span class="string">"currentPageNo ---- &gt; "</span> + currentPageNo);</span><br><span class="line">    System.out.println(<span class="string">"pageSize ---- &gt; "</span> + pageSize);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = BaseDao.getConnection();</span><br><span class="line">        userList = userDao.getUserList(connection, queryUserName,queryUserRole,currentPageNo,pageSize);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        BaseDao.closeResource(connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、获取角色操作"><a href="#3、获取角色操作" class="headerlink" title="3、获取角色操作"></a>3、获取角色操作</h3><p>为了职责统一，可以把角色的操作单独放在一个包中，和pojo类对应</p>
<p>RoleDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取角色列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RoleDaoImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleDaoImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取角色列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;Role&gt; roleList = <span class="keyword">new</span> ArrayList&lt;Role&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">"select * from smbms_role"</span>;</span><br><span class="line">            Object[] params = &#123;&#125;;</span><br><span class="line">            rs = BaseDao.execute(connection, pstm, rs, sql, params);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                Role _role = <span class="keyword">new</span> Role();</span><br><span class="line">                _role.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">                _role.setRoleCode(rs.getString(<span class="string">"roleCode"</span>));</span><br><span class="line">                _role.setRoleName(rs.getString(<span class="string">"roleName"</span>));</span><br><span class="line">                roleList.add(_role);</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>, pstm, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roleList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RoleService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取角色列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RoleServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引入Dao</span></span><br><span class="line">    <span class="keyword">private</span> RoleDao roleDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoleServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        roleDao = (RoleDao) <span class="keyword">new</span> RoleDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Role&gt; roleList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = BaseDao.getConnection();</span><br><span class="line">            roleList = roleDao.getRoleList(connection);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  roleList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>mysql学习</title>
    <url>/blog/2020/05/09/mysql-study/</url>
    <content><![CDATA[<p>学习 整理自：<a href="https://www.bilibili.com/video/BV1NJ411J79W?p=16" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1NJ411J79W?p=16</a></p>
<h2 id="1、初识数据库"><a href="#1、初识数据库" class="headerlink" title="1、初识数据库"></a>1、初识数据库</h2><p><strong>1.1、安装MySQL</strong></p>
<p>1、解压zip文件</p>
<p>2、把这个包放到自己的电脑环境目录下~</p>
<p>3、配置环境变量</p>
<p>4、新建mysql配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#  目录一定要换成自己的</span></span><br><span class="line"><span class="attr">basedir</span>=D:\mysql-<span class="number">5.7</span>.<span class="number">30</span>\</span><br><span class="line"><span class="attr">datadir</span>=D:\mysql-<span class="number">5.7</span>.<span class="number">30</span>\data\</span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<p>5、启动管理员模式下的CMD，运行所有的命令</p>
<p>6、安装mysql的服务</p>
<p>​    C:\WINDOWS\system32&gt;cd /d D:\mysql-5.7.30</p>
<p>​    D:\mysql-5.7.30&gt;mysqld -install</p>
<p>7、初始化数据库文件</p>
<p>D:\mysql-5.7.30&gt;mysqld –initialize-insecure –user=mysql</p>
<p>8、启动mysql，进去修改密码~</p>
<p>D:\mysql-5.7.30&gt;net start mysql</p>
<p>9、进入mysql，通过命令行(-p后面不要加空格)，修改密码(sql语句后面一定要加分号！)</p>
<p>D:\mysql-5.7.30&gt;mysql -u root -p</p>
<p>由于还没有密码，直接回车就行</p>
<p>mysql&gt; update mysql.user set authentication string=password(‘123456’) where user=’root’ and Host = ‘localhost’;</p>
<p>mysql&gt; flush privileges;</p>
<p>10、注释掉ini中的跳过密码</p>
<p>11、重启mysqk，连接测试，如果连接成功就OK了</p>
<p><strong>1.2、数据库分类</strong></p>
<p>关系型数据库 ( SQL )</p>
<ul>
<li><p>MySQL , Oracle , SQL Server , SQLite , DB2 , …</p>
</li>
<li><p>关系型数据库通过外键关联来建立表与表之间的关系</p>
</li>
</ul>
<p>非关系型数据库 ( NOSQL )</p>
<ul>
<li><p>Redis , MongoDB , …</p>
</li>
<li><p>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</p>
</li>
</ul>
<p>DBMS（数据库管理系统）</p>
<ul>
<li>科学组织和存储数据 , 高效地获取和维护数据</li>
</ul>
<hr>
<p><strong>1.3、MySQL简介</strong></p>
<p>MySQL是一个<strong>关系型数据库管理系统</strong></p>
<p>前世：瑞典MySQL AB公司</p>
<p>今生：属于 <a href="https://baike.baidu.com/item/Oracle" target="_blank" rel="noopener">Oracle</a> 旗下产品</p>
<p>MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260" target="_blank" rel="noopener">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一</p>
<p>体积小、速度快、总体拥有成本低</p>
<p>官网：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p>
<hr>
<p><strong>1.4、连接数据库</strong></p>
<p>mysql -uroot -p123456      —连接数据库</p>
<hr>
<p>所以语句都使用  ;    结尾</p>
<p>show databases;                       显示所有数据库<br>use dbname；                          打开某个数据库<br>show tables;                             显示数据库mysql中所有的表<br>describe user;                         显示表mysql数据库中user表的列信息<br>create database name;         创建数据库<br>use databasename;                 选择数据库<br>exit;                                            退出Mysql</p>
<p> –                                                (sql的单行注释)</p>
<p>/*                                                (sql的多行注释)</p>
<p>asaad</p>
<p>ada</p>
<p>*/</p>
<p><strong>数据库xxx语言</strong></p>
<p>DDL     定义</p>
<p>DML    操作</p>
<p>DQL     查询</p>
<p>DCL      控制</p>
<h2 id="2、操作数据库"><a href="#2、操作数据库" class="headerlink" title="2、操作数据库"></a>2、操作数据库</h2><p>操作数据库&gt;操作数据库中的表&gt;操作数据库中表的数据</p>
<p><strong>mysql关键字不区分大小写</strong></p>
<h3 id="2-1、操作数据库（了解）"><a href="#2-1、操作数据库（了解）" class="headerlink" title="2.1、操作数据库（了解）"></a>2.1、操作数据库（了解）</h3><p>1、 创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] westos;</span><br></pre></td></tr></table></figure>

<p>2、 删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] westos;</span><br></pre></td></tr></table></figure>

<p>3、使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- tab键的上面，如果你的表名或者字段名是一个特殊字符，就需要带``</span></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`school`</span></span><br></pre></td></tr></table></figure>

<p>4、查看数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES --  查看所有的数据库</span><br></pre></td></tr></table></figure>

<p>学习思路：</p>
<pre><code>- 对照可视化历史记录查看
- 固定的语法或关键字必须要强行记住</code></pre><p><img src="/blog/2020/05/09/mysql-study/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA.png" alt="创建数据库"></p>
<h3 id="2-2、数据库的列类型"><a href="#2-2、数据库的列类型" class="headerlink" title="2.2、数据库的列类型"></a>2.2、数据库的列类型</h3><blockquote>
<p>数值</p>
</blockquote>
<ul>
<li>tinyint      十分小的数据    1个字节</li>
<li>smallint     较小的数据      2个字节</li>
<li>mediumint    中等大小的数据       3个字节</li>
<li><strong>int                    标准的整数        4个字节</strong>   常用的   int</li>
<li>bigint              较大的数据         8个字节</li>
<li>float               浮点数                  4个字节</li>
<li>double            浮点数            8个字节   (精度问题!)</li>
<li>decimal       字符串形式的浮点数       金融计算的时候，一般是使用decimal</li>
</ul>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li>char         字符串固定大小的         0~255</li>
<li><strong>varchar        可变字符串          0~65535</strong>      常用的    String</li>
<li>tinytext       微型文本         2^8 - 1</li>
<li><strong>text             文本串           2^16 - 1</strong>            保存大文本</li>
</ul>
<blockquote>
<p>时间日期</p>
</blockquote>
<p>java.util.Date</p>
<ul>
<li>date         YYYY-MM-DD,  日期格式</li>
<li>time        HH:mm:ss         时间格式</li>
<li><strong>datetime      YYYY-MM-DD   HH: mm：ss   最常用的时间格式</strong></li>
<li><strong>timestamp   时间戳，   1970.1.1 到现在的毫秒数！</strong>  也较为常用！</li>
<li>year  年份表示</li>
</ul>
<blockquote>
<p>null</p>
</blockquote>
<ul>
<li>没有值，未知</li>
<li><strong>注意，不要使用NULL进行运算，结果为NULL</strong></li>
</ul>
<h3 id="2-3、数据库的字段属性-重点"><a href="#2-3、数据库的字段属性-重点" class="headerlink" title="2.3、数据库的字段属性(重点)"></a>2.3、数据库的字段属性(重点)</h3><p>Unsigned:</p>
<ul>
<li>无符号的整数</li>
<li>声明了该列不能声明为负数</li>
</ul>
<p>zerofill:</p>
<ul>
<li>0填充的</li>
<li>不足的位数，使用0来填充，   int(3)    ,    5   —  005</li>
</ul>
<p>自增：</p>
<ul>
<li>通常理解为自增，自动在上一条记录的基础上+1(默认)</li>
<li>通常用来设计唯一的主键~ index， 必须是整数类型</li>
<li>可以自定义设计主键自增的起始值和步长</li>
</ul>
<p>非空 NUll not null</p>
<ul>
<li>假设设置为 not null ，如果不给它赋值，就会报错！</li>
<li>NULL ， 如果不填写值，默认就是null！</li>
</ul>
<p>默认：</p>
<ul>
<li>设置默认的值！</li>
<li>sex ，默认值为男，如果不指定该列的值，则会有默认的值！</li>
</ul>
<p><strong>拓展：听听就好**</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  每一个表，都必须存在以下五个字段！未来做项目用的，表示一个记录存在意义！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">id	主键</span></span><br><span class="line"><span class="comment">`version`	乐观锁</span></span><br><span class="line"><span class="comment">is_delete	伪删除</span></span><br><span class="line"><span class="comment">gmt_create	创建时间</span></span><br><span class="line"><span class="comment">gmt_update	修改时间</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4、创建数据库表-重点"><a href="#2-4、创建数据库表-重点" class="headerlink" title="2.4、创建数据库表(重点)"></a>2.4、创建数据库表(重点)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 目标 : 创建一个school数据库</span></span><br><span class="line"><span class="comment">-- 创建学生表(列,字段)       使用SQL创建</span></span><br><span class="line"><span class="comment">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span></span><br><span class="line"><span class="comment">-- 注意点，使用英文(),表的名称和字段尽量使用``括起来</span></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT  自增</span></span><br><span class="line"><span class="comment">-- 字符串使用  '' 单引号括起来！</span></span><br><span class="line"><span class="comment">-- 所以的语句后面加 , (英文的)，最后一个不用加</span></span><br><span class="line"><span class="comment">-- PRIMARY KEY 主键，一般一个表只有一个唯一的主键！</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span> (</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">	<span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">	<span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'女'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">	<span class="string">`birthday`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">	<span class="string">`address`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭住址'</span>,</span><br><span class="line">	<span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<p>格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`表名`</span>(</span><br><span class="line">	<span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">	......</span><br><span class="line">    <span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">)[表类型][字符集设置][注释]</span><br></pre></td></tr></table></figure>

<p>常用命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> school   <span class="comment">-- 查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student	<span class="comment">-- 查看student数据表的定义语句</span></span><br><span class="line"><span class="keyword">DESC</span> student   <span class="comment">-- 显示表的结构</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5、数据表的类型"><a href="#2-5、数据表的类型" class="headerlink" title="2.5、数据表的类型"></a>2.5、数据表的类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 关于数据库引擎</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">INNODB  默认使用~</span></span><br><span class="line"><span class="comment">MYISAM	早些年使用的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间的大小</td>
<td>较小</td>
<td>较大，约为2倍</td>
</tr>
</tbody></table>
<p>常规使用操作：</p>
<ul>
<li>MYISAM    节约空间，速度较快</li>
<li>INNODB    安全性高，事务的处理，多表多用户</li>
</ul>
<blockquote>
<p>在物理空间存在的位置</p>
</blockquote>
<p>所以的数据库文件都存在data目录下，一个文件夹就对应一个数据库</p>
<p>本质还是文件的存储！</p>
<p>MySQL引擎在物理文件上的区别</p>
<ul>
<li>InnoDB在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li>
<li>MYISAM对应文件<ul>
<li>*.frm    表结构体的定义文件</li>
<li>*.MYD    数据文件(data)</li>
<li>*.MYI     索引文件(index)</li>
</ul>
</li>
</ul>
<blockquote>
<p>设置数据库的字符集编码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>不设置的话，会是mysql默认的字符集编码~ (不支持中文！)</p>
<p>MySQL的默认编码是Latin1，不支持中文</p>
<p>可以选择在my.ini中配置默认的编码，但在别人电脑可能没有设置这个会出错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">character-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8</span><br></pre></td></tr></table></figure>

<h3 id="2-6、修改删除表"><a href="#2-6、修改删除表" class="headerlink" title="2.6、修改删除表"></a>2.6、修改删除表</h3><blockquote>
<p>修改</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表名： ALTER TABLE 旧表名 RENAME AS 新表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher <span class="keyword">RENAME</span> <span class="keyword">AS</span> teacher1</span><br><span class="line"><span class="comment">-- 增加表的字段： ALTER TABLE 表名 ADD 字段名 列属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">ADD</span> age <span class="built_in">INT</span>(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的字段  （重命名，修改约束！）</span></span><br><span class="line"><span class="comment">--ALTER TABLE 表名 MODIFY 字段名 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">11</span>)   <span class="comment">-- 修改约束</span></span><br><span class="line"><span class="comment">--ALTER TABLE 表名 CHANGE 旧名字 新名字 列属性[]</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">CHANGE</span> age age1 <span class="built_in">INT</span>(<span class="number">1</span>)   <span class="comment">-- 字段重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表的字段：ALTER TABLE 表名 DROP 字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> teacher1 <span class="keyword">DROP</span> age1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表（如果表存在再删除）</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> teacher1</span><br></pre></td></tr></table></figure>

<p><strong>==所以的创建和删除操作尽量加上判断，以免报错~==</strong></p>
<p>注意点：</p>
<ul>
<li>`` 字段名，使用这个包裹！</li>
<li>注释 –  /**/</li>
<li>sql关键字大小写不敏感，建议写小写</li>
<li>所以的符号全部用英文</li>
</ul>
<h2 id="3、MYSQL数据管理"><a href="#3、MYSQL数据管理" class="headerlink" title="3、MYSQL数据管理"></a>3、MYSQL数据管理</h2><h3 id="3-1、外键-了解即可"><a href="#3-1、外键-了解即可" class="headerlink" title="3.1、外键    (了解即可)"></a>3.1、外键    (了解即可)</h3><blockquote>
<p>方式一、在创建表的时候，增加约束 (麻烦，比较复杂)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`grade`</span>(</span><br><span class="line">	<span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'年级id'</span>,</span><br><span class="line">	<span class="string">`gradename`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级名称'</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表的 gradeid 字段 要去引导年级表的 gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束 	(执行引用)	references 引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'女'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`birthday`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">  <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学生的年级'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭住址'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">   <span class="keyword">KEY</span> <span class="string">`FK_gradeid`</span> (<span class="string">`gradeid`</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>



<p>删除有外键关系的表的时候，必须要先删除引用别人的表(从表)，再删除被引用的表(主表)</p>
<blockquote>
<p>方式二：创建表成功后，添加外键约束</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`grade`</span>(</span><br><span class="line">	<span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'年级id'</span>,</span><br><span class="line">	<span class="string">`gradename`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年级名称'</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`gradeid`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表的 gradeid 字段 要去引导年级表的 gradeid</span></span><br><span class="line"><span class="comment">-- 定义外键key</span></span><br><span class="line"><span class="comment">-- 给这个外键添加约束 	(执行引用)	references 引用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'123456'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'女'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`birthday`</span> DATETIME <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">  <span class="string">`gradeid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'学生的年级'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭住址'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表的时候没有外键关系</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`FK_gradeid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(<span class="string">`gradeid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`grade`</span>(<span class="string">`gradeid`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ALTER TABLE 表 ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 哪个表（哪个字段）</span></span><br></pre></td></tr></table></figure>

<p>以上的操作都是物理外键，数据库级别的外键，我们不建议使用！(避免数据库过多造成困扰，这里了解即可)</p>
<p>==最佳实践==</p>
<ul>
<li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li>
<li>我们想使用多张表的数据，想使用外键（程序去实现）</li>
</ul>
<h3 id="3-2、DML语言-全部记住"><a href="#3-2、DML语言-全部记住" class="headerlink" title="3.2、DML语言(全部记住)"></a>3.2、DML语言(全部记住)</h3><p>数据库的意义：数据存储，数据管理</p>
<p>DML语言： 数据操作语言</p>
<ul>
<li>insert</li>
<li>update</li>
<li>delete</li>
</ul>
<h3 id="3-3、添加"><a href="#3-3、添加" class="headerlink" title="3.3、添加"></a>3.3、添加</h3><blockquote>
<p>insert</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入语句(添加)</span></span><br><span class="line"><span class="comment">-- insert into 表名([字段名1，字段名2，字段名3])values('值1'),('值2'),('值3',...)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> (<span class="string">`gradename`</span>) <span class="keyword">VALUES</span> (<span class="string">'大四'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由于主键自增我们可以省略 (如果不写表的字段，他就会一一匹配)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> <span class="keyword">VALUES</span> (<span class="string">'大三'</span>)</span><br><span class="line"><span class="comment">-- - Column count doesn't match value count at row 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一般写插入语句，我们一定要数据和字段一一对应！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多个字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> (<span class="string">`gradename`</span>)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'大二'</span>),(<span class="string">'大一'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`name`</span>,<span class="string">`pwd`</span>,<span class="string">`sex`</span>) <span class="keyword">VALUES</span> (<span class="string">'张三'</span>,<span class="string">'aaaaa'</span>,<span class="string">'男'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`name`</span>,<span class="string">`pwd`</span>,<span class="string">`sex`</span>) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'李四'</span>,<span class="string">'aaaaa'</span>,<span class="string">'男'</span>),(<span class="string">'王五'</span>,<span class="string">'aaaaa'</span>,<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure>

<p>语法：<strong>insert into 表名([字段名1，字段名2，字段名3])values(‘值1’),(‘值2’),(‘值3’,…)</strong></p>
<p>注意事项：</p>
<p>​    1.字段和字段之间使用 英文逗号 隔开</p>
<p>​    2.字段是可以省略的，但是后面的值必须要一一对应，不能少</p>
<p>​    3.可以同时插入多条数据，VALUES后面的值，需要使用逗号，隔开即可 <strong>VALUES ( ),( ),….</strong></p>
<h3 id="3-4、修改"><a href="#3-4、修改" class="headerlink" title="3.4、修改"></a>3.4、修改</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改学生名字，带了简介</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`name`</span> = <span class="string">'小蜜'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不指定条件的情况下，会改动所有的表</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`name`</span> = <span class="string">'长江七号'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改多个属性，逗号隔开</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span>  <span class="string">`name`</span> = <span class="string">'小蜜'</span>, <span class="string">`email`</span> = <span class="string">'2474xxx2@qq.com'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="comment">-- UPDATE 表名 SET column_name = value,[column_name = value,...] WHERE [条件];</span></span><br></pre></td></tr></table></figure>

<p>条件：where子句 运算符 id 等于某个值，大于某个值，在某个区间内修改…</p>
<p>操作符会返回 布尔值</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
<th>范围示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
<td>5=6</td>
<td>false</td>
</tr>
<tr>
<td>&lt;&gt;或!=</td>
<td>不等于</td>
<td>5&lt;&gt;6</td>
<td>true</td>
</tr>
<tr>
<td>&gt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;=</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&gt;=</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BETWEEN…AND…</td>
<td>在某个范围内</td>
<td>[2,5]</td>
<td></td>
</tr>
<tr>
<td>AND</td>
<td>我和你 &amp;&amp;</td>
<td>5&gt;1 and 1&gt;2</td>
<td>false</td>
</tr>
<tr>
<td>OR</td>
<td>我或你 ||</td>
<td>5&gt;1 or 1&gt;2</td>
<td>true</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 通过多个条件定位数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`name`</span> = <span class="string">'长江7号'</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'小蜜'</span> <span class="keyword">AND</span> <span class="string">`sex`</span> = <span class="string">'女'</span>;</span><br></pre></td></tr></table></figure>

<p>语法：<strong>UPDATE 表名 SET column_name = value,[column_name = value,…] WHERE [条件];</strong></p>
<p>注意：</p>
<ul>
<li>column_name 是数据库的列，尽量带上``</li>
<li>条件，筛选的条件，如果没有指定，则会修改所以的列</li>
<li>value，是一个具体的值，也可以是一个变量</li>
<li>多个设置的属性之间 ，使用英文逗号隔开</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`student`</span> <span class="keyword">SET</span> <span class="string">`birthday`</span> = <span class="keyword">CURRENT_TIME</span> <span class="keyword">WHERE</span> <span class="string">`name`</span>=<span class="string">'长江7号'</span> <span class="keyword">AND</span> sex = <span class="string">'女'</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5、删除"><a href="#3-5、删除" class="headerlink" title="3.5、删除"></a>3.5、删除</h3><blockquote>
<p>delete命令</p>
</blockquote>
<p>语法：delete from 表名 [where 条件]</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除数据(避免这样写，会全部删除)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`student`</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">--删除指定数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`student`</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>TRUNCATE命令</p>
</blockquote>
<p>作用：完全清空一个数据库表，表的结构和索引约束不会变！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 清空student表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="string">`student`</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>delete和 TURNCATE区别</p>
</blockquote>
<ul>
<li>相同点：都能删除数据，都不会删除表结构</li>
<li>不同：<ul>
<li>TRUNCATE 重新设置 自增列 计数器会归零</li>
<li>TRUNCATE 不会影响事物</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 测试delete 和 TRUNCATE 区别</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> (</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	<span class="string">`coll`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span> (<span class="string">`coll`</span>) <span class="keyword">VALUES</span>(<span class="string">'1'</span>),(<span class="string">'2'</span>),(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">`test`</span> <span class="comment">-- 不会影响自增</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> <span class="comment">-- 自增会归零</span></span><br></pre></td></tr></table></figure>

<p>了解即可：<strong>DELETE删除的问题</strong>，重启数据库，现象</p>
<ul>
<li>INNODB 自增列会从1开始（存在内存当中的，断电即失）</li>
<li>MyISAM  继续从上一个自增量开始（存在文件中的，不会丢失）</li>
</ul>
<h2 id="4、DQL查询数据-最重点"><a href="#4、DQL查询数据-最重点" class="headerlink" title="4、DQL查询数据(最重点)"></a>4、DQL查询数据(最重点)</h2><h3 id="4-1、DQL"><a href="#4-1、DQL" class="headerlink" title="4.1、DQL"></a>4.1、DQL</h3><p>(Data Query LANGUAGE:数据查询语言)</p>
<ul>
<li>所有查询操作都用它    Select</li>
<li>简单的查询，复杂的查询它都能做~</li>
<li>==数据库中最核心的语言，最重要的语句==</li>
<li>使用频率最高的语句</li>
</ul>
<p>Select完整的语法：</p>
<blockquote>
<p>SELECT语法</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;* | table.* | [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">    [<span class="keyword">left</span> | <span class="keyword">right</span> | <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">    [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">    [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">    [<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,]<span class="keyword">row_count</span> | row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">    <span class="comment">--  指定查询的记录从哪条至哪条</span></span><br><span class="line">注意：[]括号代表可选的，&#123;&#125;括号代表必选的</span><br></pre></td></tr></table></figure>



<h3 id="4-2、指定查询字段"><a href="#4-2、指定查询字段" class="headerlink" title="4.2、指定查询字段"></a>4.2、指定查询字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的学生	 	SELECT 字段 FROM 表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起一个名字   AS	可以给字段起别名，也可以给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span> <span class="keyword">AS</span> 学号,<span class="string">`StudentName`</span> <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数	Contat（a,b）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'姓名：'</span>,StudentName) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>

<p>语法： <strong>SELECT 字段…. FROM 表</strong></p>
<blockquote>
<p>有的时候，列名字不是那么的见名知意。我们起别名       AS      字段名     as 别名  表名   as 别名</p>
</blockquote>
<blockquote>
<p>去重 distinct</p>
</blockquote>
<p>作用：去除SELECT查询出来的结果中重复的数据，重复的数据只显示一条</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询一下有哪些同学参加了考试，成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span> <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 查询有哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="string">`StudentNo`</span> <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 发现重复数据，去重</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>数据库的列（表达式）</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()  <span class="comment">-- 查询系统版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>*<span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果    <span class="comment">-- 用来计算（表达式）</span></span><br><span class="line"><span class="keyword">SELECT</span> @@auto_increment_increment  <span class="comment">-- 查询自增的步长（变量）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生考试成绩 +1分查看</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentResult`</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="string">'提分后'</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure>

<p>==数据库中的表达式：文本值，列，Null，计算表达式，系统变量…==</p>
<p>select <strong>表达式</strong> from 表</p>
<h3 id="4-3、where-条件子句"><a href="#4-3、where-条件子句" class="headerlink" title="4.3、where 条件子句"></a>4.3、where 条件子句</h3><p>作用：检索数据中<strong>符合条件</strong>的值</p>
<p>搜索的条件由一个或者多个表达式组成！结果布尔值</p>
<blockquote>
<p>逻辑运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>and       &amp;&amp;</td>
<td>a and b     a&amp;&amp;b</td>
<td>逻辑与，两个都为真，结果为真</td>
</tr>
<tr>
<td>or          ||</td>
<td>a or b         a||b</td>
<td>逻辑或，其中一个为真，结果为真</td>
</tr>
<tr>
<td>Not        ！</td>
<td>not  a         !a</td>
<td>逻辑非，真为假，假为真！</td>
</tr>
</tbody></table>
<p>==尽量使用英文字母==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ==================   where   =======================</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询考试成绩在 95~100 分之间</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult&gt;=<span class="number">95</span> <span class="keyword">AND</span> studentresult&lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- and     &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult&gt;=<span class="number">95</span> &amp;&amp; studentresult&lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模糊查询（区间）</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult	<span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号学生之外的同学的成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentno !=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- !=     NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span>  <span class="keyword">NOT</span> studentno = <span class="number">1000</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>模糊查询：比较运算符</p>
</blockquote>
<table>
<thead>
<tr>
<th>运算符</th>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IS NULL</td>
<td>a is null</td>
<td>如果操作符为null，结果为真</td>
</tr>
<tr>
<td>IS NOT NULL</td>
<td>a is not null</td>
<td>如果操作符不为null，结果为真</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>a between b and c</td>
<td>若a在b和c之间，结果为真</td>
</tr>
<tr>
<td><strong>LIKE</strong></td>
<td>a like b</td>
<td>SQL匹配，如果a匹配b，结果为真</td>
</tr>
<tr>
<td><strong>IN</strong></td>
<td>a in (a1,a2,a3…)</td>
<td>假设a在a1，或者a2….其中的某一个值中，结果为真</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的学生	 	SELECT 字段 FROM 表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定字段</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名，给结果起一个名字   AS	可以给字段起别名，也可以给表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span> <span class="keyword">AS</span> 学号,<span class="string">`StudentName`</span> <span class="keyword">AS</span> 学生姓名 <span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数	Contat（a,b）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'姓名：'</span>,StudentName) <span class="keyword">AS</span> 新名字 <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询一下有哪些同学参加了考试，成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 查询全部的考试成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span> <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 查询有哪些同学参加了考试</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="string">`StudentNo`</span> <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="comment">-- 发现重复数据，去重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()  <span class="comment">-- 查询系统版本（函数）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>*<span class="number">3</span><span class="number">-1</span> <span class="keyword">AS</span> 计算结果    <span class="comment">-- 用来计算（表达式）</span></span><br><span class="line"><span class="keyword">SELECT</span> @@auto_increment_increment  <span class="comment">-- 查询自增的步长（变量）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生考试成绩 +1分查看</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentResult`</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="string">'提分后'</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- =======================   where   =======================</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`examdate`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询考试成绩在 95~100 分之间</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult&gt;=<span class="number">95</span> <span class="keyword">AND</span> studentresult&lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">69</span> <span class="keyword">AND</span> studentresult &lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- and     &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult&gt;=<span class="number">95</span> &amp;&amp; studentresult&lt;=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span>&gt;=<span class="number">95</span> &amp;&amp; studentresult&lt;=<span class="number">100</span></span><br><span class="line"><span class="comment">-- 模糊查询（区间）</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult	<span class="keyword">BETWEEN</span> <span class="number">95</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`studentresult`</span> <span class="keyword">BETWEEN</span> <span class="number">65</span> <span class="keyword">AND</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 除了1000号学生之外的同学的成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentno !=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> studentresult != <span class="number">68</span></span><br><span class="line"><span class="comment">-- !=     NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span>  <span class="keyword">NOT</span> studentno = <span class="number">1000</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> studentno,<span class="string">`studentresult`</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> studentresult = <span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ======================模糊查询===========================</span></span><br><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"><span class="comment">-- like结合 %（代表0到任意个字符）   _（一个字符）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">'刘%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">'刘_'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面只有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">'刘__'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中间有嘉字的同学   %嘉%</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">'%嘉%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ======== in （具体的一个或多个值）==============</span></span><br><span class="line"><span class="comment">-- 查询1001，1002，1003号学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> StudentNo <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询在北京，广州的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`Address`</span> <span class="keyword">IN</span> (<span class="string">'北京'</span>,<span class="string">'广州'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ======null   not null ============</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询地址为空的学生   null ''</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`Address`</span> = <span class="string">''</span> <span class="keyword">OR</span> <span class="string">`Address`</span> <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询有出生日期的学生   不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`BornDate`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有出生日期的学生   </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> <span class="keyword">FROM</span> <span class="string">`student`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`BornDate`</span> <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4、联表查询"><a href="#4-4、联表查询" class="headerlink" title="4.4、联表查询"></a>4.4、联表查询</h3><blockquote>
<p>JOIN    对比</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ========== 联表查询 join ===========</span></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学（学号，姓名，科目编号，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  思路</span></span><br><span class="line"><span class="comment">1.	分析需求，分析查询的字段来自哪些表，（连接查询）</span></span><br><span class="line"><span class="comment">2.	确定使用哪种连接查询？ 7种</span></span><br><span class="line"><span class="comment">确定交叉点（这两个表中哪个数据是相同的）</span></span><br><span class="line"><span class="comment">判断的条件： 学生表中的 StudentNo = 成绩表 StudentNo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo,StudentName,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.StudentNo = r.StudentNo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo,StudentName,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> S.StudentNo = R.StudentNo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo,StudentName,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> S.StudentNo = R.StudentNo</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Inner join</td>
<td>如果表中至少有一个匹配，就返回行</td>
</tr>
<tr>
<td>left join</td>
<td>会从左表中返回所有的值，即使右表中没有匹配</td>
</tr>
<tr>
<td>right join</td>
<td>会从右表中返回所有的值，即使左表中没有匹配</td>
</tr>
</tbody></table>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3THdmakZiQ1FYaWMwcGNFMjFsVUZHdkR3NWFaTGVoSVl6d0xwckNmcWR4U2pzbTJ3ZmljSHJTRXpKaWFKQkdhS1dwYXRRN3NJU2liOU1nQ1EvNjQw?x-oss-process=image/format,png" alt="img"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ========== 联表查询 join ===========</span></span><br><span class="line"><span class="comment">-- 查询参加了考试的同学（学号，姓名，科目编号，分数）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  思路</span></span><br><span class="line"><span class="comment">1.	分析需求，分析查询的字段来自哪些表，（连接查询）</span></span><br><span class="line"><span class="comment">2.	确定使用哪种连接查询？ 7种</span></span><br><span class="line"><span class="comment">确定交叉点（这两个表中哪个数据是相同的）</span></span><br><span class="line"><span class="comment">判断的条件： 学生表中的 StudentNo = 成绩表 StudentNo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- join(连接的表) on(判断的条件)  连接查询</span></span><br><span class="line"><span class="comment">-- where 等值查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo,StudentName,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> <span class="keyword">AS</span> r</span><br><span class="line"><span class="keyword">ON</span> s.StudentNo = r.StudentNo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo,StudentName,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> S.StudentNo = R.StudentNo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo,StudentName,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> S.StudentNo = R.StudentNo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询缺考的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo,StudentName,SubjectNo,StudentResult</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> S.StudentNo = R.StudentNo</span><br><span class="line"><span class="keyword">WHERE</span> StudentResult <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 思考题（查询了参加考试的学生信息：  学号，学生姓名，科目名，分数）</span></span><br><span class="line"><span class="comment">/*  思路</span></span><br><span class="line"><span class="comment">1.	分析需求，分析查询的字段来自哪些表，  student、result、subject（连接查询）</span></span><br><span class="line"><span class="comment">2.	确定使用哪种连接查询？ 7种</span></span><br><span class="line"><span class="comment">确定交叉点（这两个表中哪个数据是相同的）</span></span><br><span class="line"><span class="comment">判断的条件： 学生表中的 StudentNo = 成绩表 StudentNo</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo,StudentName,SubjectName,<span class="string">`StudentResult`</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">on</span> r.StudentNo = s.StudentNo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.SubjectNo = sub.SubjectNo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 我要查询哪些数据  SELECT...</span></span><br><span class="line"><span class="comment">-- 从那几个表中查 FROM 表 XXX Join 连接的表 on 交叉条件</span></span><br><span class="line"><span class="comment">-- 假设存在一种多张表查询，慢慢来，先查询两张表然后再慢慢增加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- FROM a LEFT JOIN b</span></span><br><span class="line"><span class="comment">-- FROM a RIGHT JOIN b</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>自连接（了解）</p>
</blockquote>
<p>==自己的表和自己的表连接，核心：<strong>一张表拆为两张一样的表即可</strong>==</p>
<p>父类</p>
<table>
<thead>
<tr>
<th>categoryid</th>
<th>categoryName</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>信息技术</td>
</tr>
<tr>
<td>3</td>
<td>软件开发</td>
</tr>
<tr>
<td>5</td>
<td>美术设计</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>子类</p>
<table>
<thead>
<tr>
<th>pid</th>
<th>categoryid</th>
<th>categoryName</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>4</td>
<td>数据库</td>
</tr>
<tr>
<td>2</td>
<td>8</td>
<td>办公信息</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>web开发</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
<td>ps技术</td>
</tr>
</tbody></table>
<p>操作：查询父类对应的子类关系</p>
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
</tr>
</thead>
<tbody><tr>
<td>信息技术</td>
<td>办公信息</td>
</tr>
<tr>
<td>软件开发</td>
<td>数据库</td>
</tr>
<tr>
<td>软件开发</td>
<td>web开发</td>
</tr>
<tr>
<td>美术设计</td>
<td>ps技术</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询父子信息:把一张表看为两个一模一样的表</span></span><br><span class="line"><span class="keyword">SELECT</span> a.<span class="string">`categoryName`</span> <span class="keyword">AS</span> <span class="string">'父栏目'</span>, b.<span class="string">`categoryName`</span> <span class="keyword">AS</span> <span class="string">'子栏目'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`category`</span> <span class="keyword">AS</span> a,<span class="string">`category`</span> <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">where</span> a.<span class="string">`categoryid`</span> = b.<span class="string">`pid`</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5、分页和排序"><a href="#4-5、分页和排序" class="headerlink" title="4.5、分页和排序"></a>4.5、分页和排序</h3><blockquote>
<p>排序</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ============ 分页 limit 和 排序 order by=========</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序 ： 升序 ASC ， 降序 DESC</span></span><br><span class="line"><span class="comment">-- ORDER BY 通过哪个字段排序，怎么排</span></span><br><span class="line"><span class="comment">-- 查询的结果根据 成绩降序 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span>,<span class="string">`subjectname`</span>,<span class="string">`StudentResult`</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.StudentNo = r.StudentNo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`SubjectNo`</span> = sub.<span class="string">`SubjectNo`</span></span><br><span class="line"><span class="keyword">WHERE</span> subjectname = <span class="string">'数据库结构-1'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>分页</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 100万</span></span><br><span class="line"><span class="comment">-- 为什么要分页？</span></span><br><span class="line"><span class="comment">-- 缓解数据库压力，给人体验更好，     瀑布流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分页，每条只显示五条数据</span></span><br><span class="line"><span class="comment">-- 语法： limit 起始值，页面的大小</span></span><br><span class="line"><span class="comment">-- LIMIT 0,5       1~5</span></span><br><span class="line"><span class="comment">-- LIMIT 1,5       2~6</span></span><br><span class="line"><span class="comment">-- LIMIT 6,5       </span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span>,<span class="string">`subjectname`</span>,<span class="string">`StudentResult`</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">ON</span> s.StudentNo = r.StudentNo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`SubjectNo`</span> = sub.<span class="string">`SubjectNo`</span></span><br><span class="line"><span class="keyword">WHERE</span> subjectname = <span class="string">'数据库结构-1'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一页 limit 0,5            (1-1)*5</span></span><br><span class="line"><span class="comment">-- 第二页 limit 5,5            (2-1)*5</span></span><br><span class="line"><span class="comment">-- 第三页 limit 10,5            (3-1)*5</span></span><br><span class="line"><span class="comment">-- 第N页 limit (pageNo-1)*pageSize,pageSize     (n-1)*pagesize, pagesize</span></span><br><span class="line"><span class="comment">-- 【pageSize：页面大小】</span></span><br><span class="line"><span class="comment">-- 【(n-1)*pageSize:起始值】</span></span><br><span class="line"><span class="comment">-- 【n：当前页】</span></span><br><span class="line"><span class="comment">-- 【数据总数/页面大小 = 总页数】</span></span><br></pre></td></tr></table></figure>

<p>语法： <strong>limit(查询起始下标，pageSize)</strong></p>
<h3 id="4-6、子查询"><a href="#4-6、子查询" class="headerlink" title="4.6、子查询"></a>4.6、子查询</h3><p>where(这个值是计算出来的)</p>
<p>本质：==在where语句中嵌套一个子查询语句==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- =========== where ===========</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1、查询数据库结构-1的所有考试结果（学号，科目编号，成绩），降序排列</span></span><br><span class="line"><span class="comment">-- 方式一：使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,r.<span class="string">`SubjectNo`</span>,<span class="string">`StudentResult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`result`</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.SubjectNo = sub.SubjectNo</span><br><span class="line"><span class="keyword">where</span> subjectname = <span class="string">'数据库结构-1'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br><span class="line"><span class="comment">-- 方式二：使用子查询（由里及外）</span></span><br><span class="line"><span class="comment">-- 查询所有数据库结构-1 的科目编号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`StudentNo`</span>,<span class="string">`SubjectNo`</span>,<span class="string">`StudentResult`</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`result`</span> </span><br><span class="line"><span class="keyword">WHERE</span> StudentNo = (</span><br><span class="line">					<span class="keyword">SELECT</span> SubjectNo <span class="keyword">FROM</span> <span class="string">`subject`</span> </span><br><span class="line">					<span class="keyword">WHERE</span> subjectname = <span class="string">'数据库结构-1'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询课程为 高等数学-2 且分数不小于80 的同学的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> s.<span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span> </span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> s.StudentNo = r.StudentNo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`SubjectNo`</span> = sub.<span class="string">`subjectno`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`subjectname`</span> = <span class="string">'高等数学-2'</span> <span class="keyword">AND</span> StudentResult&gt;=<span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分数不小于80分的学生的学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">DISTINCT</span> s.<span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.StudentNo = s.StudentNo</span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`StudentResult`</span>&gt;=<span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在这个基础上增加一个科目，高等数学-2</span></span><br><span class="line"><span class="comment">-- 查询 高等数学-2 的编号</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">DISTINCT</span> s.<span class="string">`StudentNo`</span>,<span class="string">`StudentName`</span></span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">ON</span> r.StudentNo = s.StudentNo</span><br><span class="line"><span class="keyword">WHERE</span> <span class="string">`StudentResult`</span>&gt;=<span class="number">80</span> <span class="keyword">AND</span> <span class="string">`SubjectNo`</span> = (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="string">`SubjectNo`</span> <span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line">	<span class="keyword">WHERE</span> subjectname = <span class="string">'高等数学-2'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再改造(由里及外)</span></span><br><span class="line"><span class="keyword">SELECT</span> StudentNo,StudentName <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> StudentNo <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> StudentNo <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> StudentResult&gt;<span class="number">80</span> <span class="keyword">AND</span> SubjectNo(</span><br><span class="line">		<span class="keyword">SELECT</span> SubjectNo <span class="keyword">FROM</span>  <span class="string">`subject`</span> <span class="keyword">WHERE</span> subjectname = <span class="string">'高等数学-2'</span></span><br><span class="line">	)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="4-7、分组和过滤"><a href="#4-7、分组和过滤" class="headerlink" title="4.7、分组和过滤"></a>4.7、分组和过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分，平均分大于80</span></span><br><span class="line"><span class="comment">-- 核心： （根据不同的课程分组）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`subjectname`</span>,<span class="keyword">AVG</span>(StudentResult) <span class="keyword">AS</span> 平均分,<span class="keyword">MAX</span>(StudentResult) <span class="keyword">AS</span> 最高分,<span class="keyword">MIN</span>(StudentResult) <span class="keyword">AS</span> 最低分</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span> sub</span><br><span class="line"><span class="keyword">ON</span> r.<span class="string">`SubjectNo`</span> = sub.<span class="string">`SubjectNo`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.SubjectNo 			<span class="comment">-- 通过什么字段来分组</span></span><br><span class="line"><span class="keyword">HAVING</span> 平均分 &gt;<span class="number">80</span></span><br></pre></td></tr></table></figure>

<h3 id="4-8、select小结"><a href="#4-8、select小结" class="headerlink" title="4.8、select小结"></a>4.8、select小结</h3><p>顺序很重要：</p>
<p>select 去重 要查询的字段 from表 (注意：表和字段可以取别名)</p>
<p>xxx join 要连接的表  on 等值判断</p>
<p>where(具体的值， 子查询语句)</p>
<p>Group By （通过哪个字段来分组）</p>
<p>Having (过滤分组后的信息，条件和where是一样的，位置不同)</p>
<p>Order By… （通过哪个字段排序） [升序/降序]</p>
<p>Limit startindex, pagesize</p>
<p>业务层面：</p>
<p>查询：跨表，跨数据库…..</p>
<h2 id="5、MySQL函数"><a href="#5、MySQL函数" class="headerlink" title="5、MySQL函数"></a>5、MySQL函数</h2><p>官网：<a href="https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html</a></p>
<h3 id="5-1、常用函数"><a href="#5-1、常用函数" class="headerlink" title="5.1、常用函数"></a>5.1、常用函数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ======== 常用函数 ==========</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数学运算</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ABS</span>(<span class="number">-8</span>)		  	 <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEILING</span>(<span class="number">9.4</span>)		 <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">9.4</span>)			 <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RAND</span>()          <span class="comment">-- 返回一个0~1之间的随机数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SIGN</span>(<span class="number">10</span>)        <span class="comment">-- 判断一个数的符号  0-0 负数返回-1，正数返回1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">'即使再小的帆也能远航'</span>)  	<span class="comment">-- 字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>( <span class="string">'我'</span>,<span class="string">'是'</span>,<span class="string">'最强的'</span>)            <span class="comment">-- 拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">'我爱编程helloworld'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">'超级热爱'</span>)  <span class="comment">-- 查询，从某个位置开始替换某个长度</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">'Carey'</span>)    <span class="comment">-- 小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">'Carey'</span>)    <span class="comment">-- 大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">'Carey'</span>,<span class="string">'e'</span>) <span class="comment">-- 返回第一次出现的子串的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">'只有持之以恒的坚持才能成功'</span>,<span class="string">'坚持'</span>,<span class="string">'努力'</span>)  <span class="comment">-- 替换出现的指定字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'只有持之以恒的坚持才能成功'</span>,<span class="number">3</span>,<span class="number">7</span>)   <span class="comment">-- 返回指定的子字符串（源字符串,截取的位置,截取的长度）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REVERSE</span>(<span class="string">'马到成功'</span>)    <span class="comment">-- 反转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓周的同学，姓周 换成 姓邹</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(StudentName,<span class="string">'周'</span>,<span class="string">'邹'</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> StudentName <span class="keyword">LIKE</span> <span class="string">'周%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间和日期函数(记住)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURRENT_DATE</span>() <span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>()			<span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>()          <span class="comment">-- 获取当前的时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOCALTIME</span>()		<span class="comment">-- 本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span>()			<span class="comment">-- 系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">NOW</span>())    <span class="comment">-- 年</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>())		<span class="comment">-- 月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="keyword">NOW</span>())			<span class="comment">-- 日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(<span class="keyword">NOW</span>())	  <span class="comment">-- 时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(<span class="keyword">NOW</span>())	<span class="comment">-- 分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(<span class="keyword">NOW</span>())	<span class="comment">-- 秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 系统</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSTEM_USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()</span><br></pre></td></tr></table></figure>

<h3 id="5-2、聚合函数-常用"><a href="#5-2、聚合函数-常用" class="headerlink" title="5.2、聚合函数(常用)"></a>5.2、聚合函数(常用)</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>COUNT()</strong></td>
<td>计数</td>
</tr>
<tr>
<td>SUM()</td>
<td>求和</td>
</tr>
<tr>
<td>AVG()</td>
<td>平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>最大值</td>
</tr>
<tr>
<td>MIN()</td>
<td>最小值</td>
</tr>
<tr>
<td>….</td>
<td>…..</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ====== 聚合函数 ========</span></span><br><span class="line"><span class="comment">-- 都能够统计表中的数据（想查询一个表中有多少个记录，就使用这个count()）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="string">`BornDate`</span>) <span class="keyword">FROM</span> student;  <span class="comment">-- Count(字段),会忽略所有的null值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> student;           <span class="comment">-- Count(*),不会忽略所有的null值 本质:计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student;           <span class="comment">-- Count(1),不会忽略所有的null值，本质:计算行数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(<span class="string">`StudentResult`</span>) <span class="keyword">AS</span> 总和 <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="string">`StudentResult`</span>) <span class="keyword">AS</span> 平均分 <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(<span class="string">`StudentResult`</span>) <span class="keyword">AS</span> 最高分 <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(<span class="string">`StudentResult`</span>) <span class="keyword">AS</span> 最低分 <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3、数据库级别的MD5加密-扩展"><a href="#5-3、数据库级别的MD5加密-扩展" class="headerlink" title="5.3、数据库级别的MD5加密(扩展)"></a>5.3、数据库级别的MD5加密(扩展)</h3><p>什么是MD5?</p>
<p>主要增强算法复杂度和不可逆性。</p>
<p>MD5不可逆，具体的值的md5是一样的</p>
<p>MD5破解网站的原理，背后有一个字典，MD5加密后的值，加密前的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ======== 测试MD5 加密 =========</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`testmd5`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	<span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明文密码</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testmd5 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'zhangsan'</span>,<span class="string">'123456'</span>),(<span class="number">2</span>,<span class="string">'lisi'</span>,<span class="string">'123456'</span>),(<span class="number">3</span>,<span class="string">'wangwu'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密</span></span><br><span class="line"><span class="keyword">UPDATE</span> testmd5 <span class="keyword">SET</span> pwd=<span class="keyword">MD5</span>(pwd) <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">UPDATE</span> testmd5 <span class="keyword">SET</span> pwd=<span class="keyword">MD5</span>(pwd)  <span class="comment">-- 加密全部的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入的时候加密</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> testmd5 <span class="keyword">VALUE</span>(<span class="number">4</span>,<span class="string">'xiaoming'</span>,<span class="keyword">MD5</span>(<span class="string">'123456'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何校验：将用户传递进来的密码，进行md5加密，然后比对加密后的值</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> testmd5 <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'xiaoming'</span> <span class="keyword">AND</span> pwd=<span class="keyword">MD5</span>(<span class="string">'123456'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h2><h3 id="6-1、什么是事务"><a href="#6-1、什么是事务" class="headerlink" title="6.1、什么是事务"></a>6.1、什么是事务</h3><p>==要么都成功，要么都失败==</p>
<p>一一一一一一</p>
<p>1、SQL执行 A 给 B转账     A1000  —&gt; 200       B200</p>
<p>2、SQL执行 B收到A的钱   A800      —-&gt;          B400</p>
<p>一一一一一一</p>
<p>将一组SQL放在一个批次中去执行~</p>
<blockquote>
<p>事务原则：ACID原则  原子性，一致性，隔离性，持久性  (脏读，幻读…..)</p>
</blockquote>
<p>参考博客链接：<a href="https://blog.csdn.net/qq_42337368/article/details/102660338" target="_blank" rel="noopener">https://blog.csdn.net/qq_42337368/article/details/102660338</a></p>
<p><strong>原子性（Atomicity）</strong></p>
<p>要么都成功，要么都失败</p>
<p><strong>一致性（Consistency）</strong></p>
<p>事务前后的数据完整性要保证一致，  1000</p>
<p><strong>持久性（Durability）</strong>– 事务提交</p>
<p>事务一旦提交则不可逆，被持久化到数据库中</p>
<p><strong>隔离性（Isolation）</strong></p>
<p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干预，多个并发事务之间要相互隔离</p>
<blockquote>
<p>隔离所导致的一些问题</p>
</blockquote>
<p><strong>脏读：</strong></p>
<p>指一个事务读取了另外一个事务未提交的数据</p>
<p><strong>不可重复读：</strong></p>
<p>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</p>
<p><strong>虚读（幻读）</strong></p>
<p>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致</p>
<blockquote>
<p>执行事务</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ========= 事务 =========</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mysql 是默认事务自动提交的</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span> <span class="comment">/* 关闭  */</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span> <span class="comment">/* 开启(默认的) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动处理事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span> <span class="comment">-- 关闭自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="comment">-- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> xx</span><br><span class="line"><span class="keyword">INSERT</span> xx</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交：持久化（成功！）</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="comment">-- 回滚：回到原来的样子（失败！）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 事务结束</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span> <span class="comment">-- 开启自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 了解</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名  <span class="comment">-- 设置一个事务的保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">to</span> <span class="keyword">SAVEPOINT</span> 保存点名 <span class="comment">-- 回滚到保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点 <span class="comment">-- 撤销保存点</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>模拟场景</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 转账 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> shop <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci </span><br><span class="line"><span class="keyword">USE</span> shop</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">	<span class="string">`money`</span> <span class="built_in">DECIMAL</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span>(<span class="string">`name`</span>,<span class="string">`money`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'A'</span>,<span class="number">2000.00</span>),(<span class="string">'B'</span>,<span class="number">10000.00</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟转账：事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">0</span> <span class="comment">-- 关闭自动提交</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span> <span class="comment">-- 开启一个事务（一组事务）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> money = money <span class="number">-500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'A'</span> <span class="comment">-- A减500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> money = money +<span class="number">500</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'B'</span> <span class="comment">-- A加500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment">-- 提交事务就被持久化了！</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>； <span class="comment">-- 回滚</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> autocommit = <span class="number">1</span>; <span class="comment">-- 恢复默认值</span></span><br></pre></td></tr></table></figure>

<h2 id="7、索引"><a href="#7、索引" class="headerlink" title="7、索引"></a>7、索引</h2><blockquote>
<p>MySQL官方对索引的定义为：<strong>索引(Index)是帮助MySQL高效获取数据的数据结构。</strong>   0.5s       0.00001s</p>
<p>提取句子主干，就可以得到索引的本质：索引是数据结构</p>
</blockquote>
<h3 id="7-1、索引的分类"><a href="#7-1、索引的分类" class="headerlink" title="7.1、索引的分类"></a>7.1、索引的分类</h3><ul>
<li>主键索引 (PRIMARY KEY)<ul>
<li>唯一的标识，主键不可重复，只能有一个列作为主键</li>
</ul>
</li>
<li>唯一索引(UNIQUE KEY)<ul>
<li>避免重复的列出现，唯一索引可以重复，多个列都可以标识位 唯一索引</li>
</ul>
</li>
<li>常规索引(KEY / INDEX)<ul>
<li>默认的，index。key关键字来设置</li>
</ul>
</li>
<li>全文索引(FullText)<ul>
<li>在特定的数据库引擎下才有，MylSAM</li>
<li>快速定位数据</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 索引的使用</span></span><br><span class="line"><span class="comment">-- 1、在创建表的时候给字段增加索引</span></span><br><span class="line"><span class="comment">-- 2、创建完毕后，增加索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示所有的索引信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一个全文索引     （索引名） 列名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> school.student <span class="keyword">ADD</span> FULLTEXT <span class="keyword">INDEX</span> <span class="string">`StudentName`</span>(<span class="string">`StudentName`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- EXPLAIN 分析sql执行的状况</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student; <span class="comment">-- 非全文索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(StudentName) AGAINST(<span class="string">'刘'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-2、测试索引"><a href="#7-2、测试索引" class="headerlink" title="7.2、测试索引"></a>7.2、测试索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`app_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户昵称'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户邮箱'</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line">  <span class="string">`gender`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'性别（0:男；1：女）'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'app用户表'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入100万数据</span></span><br><span class="line">DELIMITER $$ <span class="comment">-- 写函数之前必须要写，标志</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mock_data ()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">WHILE i&lt;num DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`app_user`</span>(<span class="string">`name`</span>,<span class="string">`email`</span>,<span class="string">`phone`</span>,<span class="string">`gender`</span>,<span class="string">`password`</span>,age)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">CONCAT</span>(<span class="string">'用户'</span>,i),</span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*(<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">10000000</span>),<span class="string">'@qq.com'</span>),</span><br><span class="line"><span class="keyword">CONCAT</span>(<span class="string">'18'</span>,<span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*(<span class="number">999999999</span><span class="number">-100000000</span>)+<span class="number">100000000</span>)),</span><br><span class="line"><span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">2</span>),</span><br><span class="line"><span class="keyword">UUID</span>(),</span><br><span class="line"><span class="keyword">FLOOR</span>(<span class="keyword">RAND</span>()*<span class="number">100</span>));</span><br><span class="line"><span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">RETURN i;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SELECT</span> mock_data(); <span class="comment">-- 插入100万条数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;   <span class="comment">-- 1.141s</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;   <span class="comment">-- 1.395s</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;   <span class="comment">-- 1.476s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">-- id_ 表名 _ 字段名</span></span><br><span class="line"><span class="comment">-- CREATE INDEX 索引名 on 表（字段）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> id_app_user_name <span class="keyword">ON</span> app_user(<span class="string">`name`</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;   <span class="comment">-- 0.012s</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;   <span class="comment">-- 0.001s</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> app_user <span class="keyword">WHERE</span> <span class="string">`name`</span> = <span class="string">'用户9999'</span>;</span><br></pre></td></tr></table></figure>

<p>==索引在小数据量的时候，区别不大，但是在大数据的时候，区别十分明显~==</p>
<h3 id="7-3、索引原则"><a href="#7-3、索引原则" class="headerlink" title="7.3、索引原则"></a>7.3、索引原则</h3><ul>
<li>索引不是越多越好</li>
<li>不要对进程变动数据加索引</li>
<li>小数据量的表不需要加索引</li>
<li>索引一般加在常用来查询的字段上！</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<p>Hash类型的索引</p>
<p>Btree：InnoDB的默认数据结构~</p>
<p>阅读：<a href="https://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">https://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>
<h2 id="8、权限管理和备份"><a href="#8、权限管理和备份" class="headerlink" title="8、权限管理和备份"></a>8、权限管理和备份</h2><h3 id="8-1、用户管理"><a href="#8-1、用户管理" class="headerlink" title="8.1、用户管理"></a>8.1、用户管理</h3><blockquote>
<p>SQL yog 可视化管理</p>
</blockquote>
<p><img src="/blog/2020/05/09/mysql-study/%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7,png" alt="img"></p>
<blockquote>
<p>SQL 命令操作</p>
</blockquote>
<p>用户表： mysql.user</p>
<p>本质：读这张表进行增删改查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户	CREATE USER 用户名 IDENTIFIED BY '密码'</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> Carey <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（修改当前用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改密码（修改指定用户密码）</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> Carey = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 重命名   RENAME USER 原来名字 TO 新的名字</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> Carey <span class="keyword">TO</span> Carey2</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户授权   ALL PRIVILEGES 全部的权限，  库.表</span></span><br><span class="line"><span class="comment">-- ALL PRIVILEGES 除了给别人授权，其他都能干</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> Carey2</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> Carey2   <span class="comment">-- 查看指定用户的权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> root@localhost</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ROOT用户权限：GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限 REVOKE  哪些权限，  在哪个库撤销，给谁撤销</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">FROM</span> Carey2</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> Carey2</span><br></pre></td></tr></table></figure>

<h3 id="8-2、MySQL备份"><a href="#8-2、MySQL备份" class="headerlink" title="8.2、MySQL备份"></a>8.2、MySQL备份</h3><p>为什么要备份：</p>
<ul>
<li><p>保证重要的数据不丢失</p>
</li>
<li><p>数据转移</p>
</li>
</ul>
<p>MySQL数据库备份的方式</p>
<ul>
<li>直接拷贝物理文件</li>
<li>在可视化工具中手动导出</li>
<li>使用命令行导出mysqldump     命令行使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表名 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school student &gt;D:/a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 表1 表2 表3 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school student result &gt;D:/b.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -h 主机 -u 用户名 -p 密码 数据库 &gt; 物理磁盘位置/文件名</span></span><br><span class="line">mysqldump -hlocalhost -uroot -p123456 school &gt;D:/c.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line"><span class="comment"># 登录的情况下，切换到指定的数据库</span></span><br><span class="line"><span class="comment"># source 备份文件</span></span><br><span class="line"><span class="built_in">source</span> d:/a.sql</span><br><span class="line"></span><br><span class="line">mysql -u用户名 -p密码 库名&lt; 备份文件</span><br></pre></td></tr></table></figure>

<p>假设你要备份数据库，防止数据丢失</p>
<p>把数据库给朋友！sql文件给别人即可！</p>
<h2 id="9、规范数据库设计"><a href="#9、规范数据库设计" class="headerlink" title="9、规范数据库设计"></a>9、规范数据库设计</h2><h3 id="9-1、为什么需要设计"><a href="#9-1、为什么需要设计" class="headerlink" title="9.1、为什么需要设计"></a>9.1、为什么需要设计</h3><p>==当数据库比较复杂的时候，我们就需要设计了==</p>
<p>糟糕数据库设计：</p>
<ul>
<li>数据冗余，浪费空间</li>
<li>数据库插入和删除都会麻烦，通常【屏蔽使用物理外键】</li>
<li>程序的性能差</li>
</ul>
<p>良好的数据库设计：</p>
<ul>
<li>节省内存空间</li>
<li>保证数据库的完整性</li>
<li>方便我们开发系统</li>
</ul>
<p><strong>软件开发中，关于数据库的设计</strong></p>
<ul>
<li>分析需要：分析业务和需要处理的数据库的需求</li>
<li>概要设计：设计关系图E-R 图</li>
</ul>
<p><strong>设计数据库的步骤：（个人博客）</strong></p>
<ul>
<li>收集信息，分析需求<ul>
<li>用户表（用户登录注销，用户的个人信息，写博客，创建分类）</li>
<li>分类表（文章分类，谁创建的）</li>
<li>文章表（文章的信息）</li>
<li>友链表（友链信息）</li>
<li>自定义表（系统信息，某个关键的字，或者一些主字段） key：value</li>
<li>说说表（发表心情.. id..  ）</li>
</ul>
</li>
<li>标识实体（把需求落地到每个字段）</li>
<li>标识实体之间的关系<ul>
<li>写博客：user –&gt; blog</li>
<li>创建分类：user –&gt; category</li>
<li>关注：user –&gt; user</li>
<li>友链：links</li>
<li>评论：user-user-blog</li>
</ul>
</li>
</ul>
<h3 id="9-2、三大范式"><a href="#9-2、三大范式" class="headerlink" title="9.2、三大范式"></a>9.2、三大范式</h3><p><strong>为什么需要数据规范化？</strong></p>
<ul>
<li>信息重复</li>
<li>更新异常</li>
<li>插入异常<ul>
<li>无法正常显示信息</li>
</ul>
</li>
<li>删除异常<ul>
<li>丢失有效的信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>三大范式   （了解）</p>
</blockquote>
<p><strong>第一范式（1NF）</strong></p>
<p>原子性：保证每一列不可再分</p>
<p><strong>第二范式（2NF）</strong></p>
<p>前提：满足第一范式</p>
<p>每张表只描述一件事情</p>
<p><strong>第三范式（3NF）</strong></p>
<p>前提：满足第一范式和第二范式</p>
<p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>
<p>（规范数据库的设计）</p>
<p><strong>规范性和性能的问题</strong></p>
<p>关联查询的表不得超过三张表</p>
<ul>
<li>考虑商业化的需求和目标，（成本，用户体验） 数据库的性能更加重要</li>
<li>在规范性能的问题的时候，需要适当的考虑一下规范性</li>
<li>故意给某些表增加一些冗余的字段。（从多表查询中变为单表查询）</li>
<li>故意增加一些计算列（从大数据量降低为小数据量的查询：索引）</li>
</ul>
<h2 id="10、JDBC（重点）"><a href="#10、JDBC（重点）" class="headerlink" title="10、JDBC（重点）"></a>10、JDBC（重点）</h2><h3 id="10-1、数据库驱动"><a href="#10-1、数据库驱动" class="headerlink" title="10.1、数据库驱动"></a>10.1、数据库驱动</h3><p>驱动：声卡、显卡、数据库</p>
<p><img src="/blog/2020/05/09/mysql-study/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8.png" alt="image-20200520221856503"></p>
<p>我们的程序会通过数据库驱动，和数据库打交道！</p>
<h3 id="10-2、JDBC"><a href="#10-2、JDBC" class="headerlink" title="10.2、JDBC"></a>10.2、JDBC</h3><p>SUN公司为了简化开发人员的（对数据库的统一）操作，提供了一个（java操作数据库的）规范，俗称JDBC</p>
<p>这些规范的实现由具体的厂商去做~</p>
<p>对于开发人员，我们只需要掌握JDBC接口的操作即可！</p>
<p><img src="/blog/2020/05/09/mysql-study/JDBC.png" alt="image-20200520222216809"></p>
<p>java.sql</p>
<p>javax.sql</p>
<p>还需要导入一个数据库驱动包  mysql-connector-java-5.1.49.jar</p>
<h3 id="10-3、第一个JDBC程序"><a href="#10-3、第一个JDBC程序" class="headerlink" title="10.3、第一个JDBC程序"></a>10.3、第一个JDBC程序</h3><blockquote>
<p>创建测试数据库</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`jdbcStudy`</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`jdbcStudy`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`NAME`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"><span class="string">`PASSWORD`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line"><span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">birthday <span class="built_in">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span>(<span class="string">`id`</span>,<span class="string">`NAME`</span>,<span class="string">`PASSWORD`</span>,<span class="string">`email`</span>,<span class="string">`birthday`</span>)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'zhangsan'</span>,<span class="string">'123456'</span>,<span class="string">'zs@sina.com'</span>,<span class="string">'1980-12-04'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'lisi'</span>,<span class="string">'123456'</span>,<span class="string">'lisi@sina.com'</span>,<span class="string">'1981-12-04'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'wangwu'</span>,<span class="string">'123456'</span>,<span class="string">'wangwu@sina.com'</span>,<span class="string">'1979-12-04'</span>)</span><br></pre></td></tr></table></figure>

<p>1、创建一个普通项目</p>
<p>2、导入数据库驱动</p>
<p><img src="/blog/2020/05/09/mysql-study/%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A9%B1%E5%8A%A8.png" alt="image-20200520224048106"></p>
<p>3、编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我的第一个JDBC程序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcFirstDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">// 固定写法，加载驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 用户信息和url</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true           useSSL=true本机电脑用true抛出异常，用false没问题，未知原因</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line">        <span class="comment">//3. 连接成功，数据库对象    Connection代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 执行SQL的对象       Statement 执行SQL的对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 执行SQL的对象 去 执行SQL，可能存在结果，查看返回结果</span></span><br><span class="line">        String sql = <span class="string">"SELECT * FROM users"</span>;</span><br><span class="line"></span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql); <span class="comment">//返回的结果集,结果集中封装了我们全部的查询出来的结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">"id="</span> + resultSet.getObject(<span class="string">"id"</span>));</span><br><span class="line">            System.out.println(<span class="string">"name="</span> + resultSet.getObject(<span class="string">"NAME"</span>));</span><br><span class="line">            System.out.println(<span class="string">"pwd="</span> + resultSet.getObject(<span class="string">"PASSWORD"</span>));</span><br><span class="line">            System.out.println(<span class="string">"email="</span> + resultSet.getObject(<span class="string">"email"</span>));</span><br><span class="line">            System.out.println(<span class="string">"birth="</span> + resultSet.getObject(<span class="string">"birthday"</span>));</span><br><span class="line">            System.out.println(<span class="string">"======================================"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 释放连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤总结：</p>
<p>1、加载驱动</p>
<p>2、连接数据库DriverManager</p>
<p>3、获得执行sql的对象 Statement</p>
<p>4、获得返回的结果集</p>
<p>5、释放链接</p>
<blockquote>
<p>DriverManager</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">// 固定写法，加载驱动</span></span><br><span class="line">Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// connection  代表数据库</span></span><br><span class="line"><span class="comment">// 数据库设置自动提交</span></span><br><span class="line"><span class="comment">// 事务提交</span></span><br><span class="line"><span class="comment">// 事务回滚</span></span><br><span class="line"></span><br><span class="line">connection.rollback();</span><br><span class="line">connection.commit();</span><br><span class="line">connection.setAutoCommit();</span><br></pre></td></tr></table></figure>



<blockquote>
<p>URL</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mysql  -- 3306</span></span><br><span class="line"><span class="comment">// 协议://主机地址:端口号/数据库名?参数1&amp;参数2&amp;参数3</span></span><br><span class="line"><span class="comment">// oracle  -- 1521</span></span><br><span class="line"><span class="comment">// jdbc:oracle:thin:@localhost:1521:sid</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>Statement执行SQL的对象        PrepareStatement执行SQL的对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT * FROM users"</span>;   <span class="comment">// 编写SQL</span></span><br><span class="line"></span><br><span class="line">statement.executeQuery();   <span class="comment">//查询操作返回  ResultSet</span></span><br><span class="line">statement.execute();    <span class="comment">//执行任何SQL</span></span><br><span class="line">statement.executeUpdate();  <span class="comment">// 更新、插入、删除。都是用这个，返回一个受影响的行数</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>ResultSet 查询的结果集：封装了所有的查询结果</p>
</blockquote>
<p>获得指定的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.getObject(); <span class="comment">//在不知道列类型的情况下使用</span></span><br><span class="line"><span class="comment">//如果知道列的类型就使用指定的类型</span></span><br><span class="line">resultSet.getString();</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getFloat();</span><br><span class="line">resultSet.getDate();</span><br><span class="line">resultSet.getObject();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>遍历，指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.beforeFirst();    <span class="comment">//移动到最前面</span></span><br><span class="line">resultSet.afterLast();    <span class="comment">//移动到最后面</span></span><br><span class="line">resultSet.next();       <span class="comment">//移动到下一个数据</span></span><br><span class="line">resultSet.previous();   <span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute(row);    <span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>释放资源</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//释放连接</span></span><br><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();  <span class="comment">//耗资源，用完关掉！</span></span><br></pre></td></tr></table></figure>

<h3 id="10-4、statement对象"><a href="#10-4、statement对象" class="headerlink" title="10.4、statement对象"></a>10.4、statement对象</h3><p>==jdbc中的statement对象用于向数据库发送SQL语句，想完成对数据库的增删改查，只需要通过这个对象向数据库发送增删改查语句即可。==</p>
<p>Statement对象的executeUpdate方法，用于向数据库发送增、删、改的sql语句，execteUpdate执行完后，将会返回一个整数（即增删改语句导致了数据库几行数据发生了变化）。</p>
<p>Statement.executeQuery方法用于向数据库发送查询语句，executeQuery方法返回代表查询结果的ResultSet对象。</p>
<blockquote>
<p>CRUD操作-create</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据添加操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">"insert into user(...) values(...)"</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"插入成功！！！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>CRUD操作-delete</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据删除操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">"delete from user where id=1"</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"删除成功！！！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>CRUD操作-update</p>
</blockquote>
<p>使用executeUpdate(String sql)方法完成数据修改操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">"update user set name='' where name=''"</span>;</span><br><span class="line"><span class="keyword">int</span> num = st.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"修改成功！！！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>CRUD操作-read</p>
</blockquote>
<p>使用executeQuery(String sql)方法完成数据查询操作，示例操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">String sql = <span class="string">"select * from user where id=1"</span>;</span><br><span class="line">ResultSet rs = st.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="comment">//根据获取列的数据类型，分别调用rs的相应方法映射到java对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>代码实现</p>
</blockquote>
<p>1、提取工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String driver = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String url = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String username = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String password = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream("db.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            driver = properties.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            username = properties.getProperty(<span class="string">"username"</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1. 驱动只用加载一次</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放连接资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2、编写增删改的方法，<code>executeUpdate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();   <span class="comment">//获取数据库连接</span></span><br><span class="line">            st = conn.createStatement();    <span class="comment">//获得SQL的执行对象</span></span><br><span class="line">            String sql = <span class="string">"INSERT INTO users(id,`NAME`,`PASSWORD`,`email`,`birthday`)"</span> +</span><br><span class="line">                    <span class="string">"VALUES(4,'carey','123456','2474673@qq.com','2020-01-01')"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功！ "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();   <span class="comment">//获取数据库连接</span></span><br><span class="line">            st = conn.createStatement();    <span class="comment">//获得SQL的执行对象</span></span><br><span class="line">            String sql = <span class="string">"DELETE FROM users WHERE id = 4"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"删除成功！ "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();   <span class="comment">//获取数据库连接</span></span><br><span class="line">            st = conn.createStatement();    <span class="comment">//获得SQL的执行对象</span></span><br><span class="line">            String sql = <span class="string">"UPDATE users SET `NAME` = 'carey',`email`='2473672@qq.com' WHERE id=1"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate(sql);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"更新成功！ "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、查询 <code>executeQuery</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//SQL</span></span><br><span class="line">            String sql = <span class="string">"select * from users where id = 1"</span>;</span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery(sql); <span class="comment">//查询完毕会返回一个结果集</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"Name"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>SQL注入问题</p>
</blockquote>
<p>sql存在漏洞，会被攻击导致数据泄露，==SQL会被拼接 or==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test02.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQL</span>注入 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//login("carey", "123456");</span></span><br><span class="line">        login(<span class="string">" 'or '1=1"</span>, <span class="string">" 'or '1=1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//SELECT * FROM users WHERE `NAME` = 'carey' AND `PASSWORD` = '123456'</span></span><br><span class="line">            <span class="comment">//SELECT * FROM users WHERE `NAME` = ' 'or '1=1' AND `PASSWORD` = ' 'or '1=1'</span></span><br><span class="line">            String sql = <span class="string">"select * from users where `NAME`='"</span>+username+<span class="string">"' AND `PASSWORD`='"</span>+password+<span class="string">"'"</span>;</span><br><span class="line">		<span class="comment">// '"+username+"'   把双引号内容写成单引号形式内容 </span></span><br><span class="line">            </span><br><span class="line">            rs = st.executeQuery(sql); <span class="comment">//查询完毕会返回一个结果集</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"Name"</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"PASSWORD"</span>));</span><br><span class="line">                System.out.println(<span class="string">"========================="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-5、PreparedStatement对象"><a href="#10-5、PreparedStatement对象" class="headerlink" title="10.5、PreparedStatement对象"></a>10.5、PreparedStatement对象</h3><p>PreparedStatement 可以防止SQL注入。效率更好！</p>
<p>1、新增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.carey.test02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">"insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`) values(?,?,?,?,?)"</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql);   <span class="comment">//预编译SQL，先写sql，然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>,<span class="number">4</span>); <span class="comment">//id</span></span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">"cxxqing"</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">"1232112"</span>);</span><br><span class="line">            st.setString(<span class="number">4</span>, <span class="string">"2473673@qq.com"</span>);</span><br><span class="line">            <span class="comment">//注意点： sql.Date    数据库      java.sql.Date()</span></span><br><span class="line">            <span class="comment">//        util.Date   Java      new Date().getTime()  获取时间戳</span></span><br><span class="line">            st.setDate(<span class="number">5</span>, <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"插入成功！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2、删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.carey.test02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">"delete from users where id=?"</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql);   <span class="comment">//预编译SQL，先写sql，然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3、更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.carey.test02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUpdate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//区别</span></span><br><span class="line">            <span class="comment">//使用？占位符代替参数</span></span><br><span class="line">            String sql = <span class="string">"UPDATE users set `NAME`=? WHERE id=?"</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql);   <span class="comment">//预编译SQL，先写sql，然后不执行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动给参数赋值</span></span><br><span class="line">            st.setString(<span class="number">1</span>, <span class="string">"川建国"</span>);</span><br><span class="line">            st.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            <span class="keyword">int</span> i = st.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"更新成功！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4、查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.carey.test02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSelect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            String sql = <span class="string">"select * from users where id = ?"</span>;  <span class="comment">//编写SQL</span></span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql);  <span class="comment">// 预编译</span></span><br><span class="line"></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">1</span>);  <span class="comment">//传递参数</span></span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery(); <span class="comment">//执行</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"NAME"</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5、防止SQL注入</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.carey.test02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQL</span>注入 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//login("lisi", "123456");</span></span><br><span class="line">        login(<span class="string">"'' or 1=1"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录业务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//PrepareStatement 防止SQL注入的本质，把传递进来的参数当作字符</span></span><br><span class="line">            <span class="comment">//假设其中存在转义字符，比如说 ' 会被直接转义</span></span><br><span class="line">            String sql = <span class="string">"select * from users where `NAME`=? and `PASSWORD`=?"</span>;</span><br><span class="line"></span><br><span class="line">            st = conn.prepareStatement(sql);</span><br><span class="line">            st.setString(<span class="number">1</span>, username);</span><br><span class="line">            st.setString(<span class="number">2</span>, password);</span><br><span class="line"></span><br><span class="line">            rs = st.executeQuery(); <span class="comment">//查询完毕会返回一个结果集</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"Name"</span>));</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"PASSWORD"</span>));</span><br><span class="line">                System.out.println(<span class="string">"========================="</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-6、使用IDEA连接数据库"><a href="#10-6、使用IDEA连接数据库" class="headerlink" title="10.6、使用IDEA连接数据库"></a>10.6、使用IDEA连接数据库</h3><p><img src="/blog/2020/05/09/mysql-study/%E4%BD%BF%E7%94%A8IDEA%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20200521185058906"></p>
<p>连接成功后可以选择数据库</p>
<p><img src="/blog/2020/05/09/mysql-study/%E9%80%89%E6%8B%A9%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20200521202619971"></p>
<p>双击数据库</p>
<p><img src="/blog/2020/05/09/mysql-study/%E5%8F%8C%E5%87%BB%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="image-20200521202929715"></p>
<p>更新数据</p>
<p><img src="/blog/2020/05/09/mysql-study/%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE.png" alt="image-20200521205744248"></p>
<p><img src="/blog/2020/05/09/mysql-study/%E7%BC%96%E5%86%99SQL.png" alt="image-20200521210052593"></p>
<p>连接失败，查看原因</p>
<p><img src="/blog/2020/05/09/mysql-study/%E8%BF%9E%E6%8E%A5MySQL%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8A%9E%E6%B3%95.png" alt="image-20200521211106613"></p>
<h3 id="10-7、事务"><a href="#10-7、事务" class="headerlink" title="10.7、事务"></a>10.7、事务</h3><p>==要么都成功，要么都失败==</p>
<blockquote>
<p>ACID原则</p>
</blockquote>
<p>原子性：要么全部完成，要么都不完成</p>
<p>一致性：总数不变</p>
<p><strong>隔离性：多个进程互不干扰</strong></p>
<p>持久性：一旦提交不可逆，持久化到数据库了</p>
<p>隔离性的问题：</p>
<p>脏读：一个事务读取了另一个没有提交的事务</p>
<p>不可重复读：在同一个事务内，重复读取了表中的数据，表数据发生了变化</p>
<p>虚读（幻读）：在一个事务内，读取到了别人插入的数据，导致前后读出来结果不一样</p>
<blockquote>
<p>代码实现</p>
</blockquote>
<p>1、开启事务 <code>conn.setAutoCommit(false);</code></p>
<p>2、一组业务执行完毕，提交事务</p>
<p>3、可以在catch语句中显示的定义 回滚语句，但默认失败就会回滚</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.test04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.carey.test02.utils.JdbcUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransaction2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭数据库的自动提交,自动会开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);  <span class="comment">//开启事务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String sql1 = <span class="string">"update account set money = money-100 where name = 'A'"</span>;</span><br><span class="line">            st = conn.prepareStatement(sql1);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">1</span>/<span class="number">0</span>;    <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">            String sql2 = <span class="string">"update account set money = money+100 where name = 'B'"</span>;</span><br><span class="line">            st = conn.prepareStatement(sql2);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//业务完毕，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">"成功！"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            <span class="comment">//如果失败，则默认回滚</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                conn.rollback();       //如果失败则回滚事务</span></span><br><span class="line"><span class="comment">//            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(conn, st, rs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-8、数据库连接池"><a href="#10-8、数据库连接池" class="headerlink" title="10.8、数据库连接池"></a>10.8、数据库连接池</h3><p>数据库连接 — 执行完毕 —释放</p>
<p>连接 — 释放    十分浪费系统资源</p>
<p><strong>池化技术：准备一些预先的资源，过来就连接预先准备好的</strong></p>
<p>最小连接数：</p>
<p>最大连接数：</p>
<p>等待超时：</p>
<p>==编写连接池，实现一个接口  DataSource==</p>
<blockquote>
<p>开源数据源实现（拿来即用）</p>
</blockquote>
<p>DBCP</p>
<p>C3P0</p>
<p>Druid：阿里巴巴</p>
<p>使用了这些数据库连接池之后，我们在项目开发中就不需要编写连接数据库的代码了！</p>
<blockquote>
<p>DBCP</p>
</blockquote>
<p>需要用到的 jar 包</p>
<p>commons-dbcp-1.4、commons-pool-1.6</p>
<blockquote>
<p>C3P0</p>
</blockquote>
<p>需要用到的 jar 包</p>
<p>c3p0-0.9.5.5、mchange-commons-java-0.2.19</p>
<blockquote>
<p>结论</p>
</blockquote>
<p>无论使用什么数据源，本质还是一样的，DataSource接口不会变，方法就不会变</p>
]]></content>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/blog/2020/05/24/thread-study/</url>
    <content><![CDATA[<h4 id="1、线程实现"><a href="#1、线程实现" class="headerlink" title="1、线程实现"></a>1、线程实现</h4><h5 id="1-1、继承Thread类"><a href="#1-1、继承Thread类" class="headerlink" title="1.1、继承Thread类"></a>1.1、继承Thread类</h5><ul>
<li>子类继承Thread类具备多线程能力</li>
<li>启动线程：子类对象.start()</li>
<li>==不建议使用：避免OOP单继承局限性==</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建线程方式一:继承Thread类，重写run()方法，调用start开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//总结：注意，线程开启不一定立即执行，由CPU调度执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我在看代码---"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//main线程，主线程</span></span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        TestThread1 testThread1 = <span class="keyword">new</span> TestThread1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用start()方法开启线程</span></span><br><span class="line">        testThread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我在学习多线程---"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2、实现Runnable接口"><a href="#1-2、实现Runnable接口" class="headerlink" title="1.2、实现Runnable接口"></a>1.2、实现Runnable接口</h5><ul>
<li>实现接口Runnable具有多线程能力</li>
<li>启动线程：传入目标对象+Thread对象.start()</li>
<li>==推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用==</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建线程方式2：实现runnable接口，重写run方法，执行线程需要丢入runnable接口的实现类，调用start方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread3</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我在看代码---"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建runnable接口的实现类对象</span></span><br><span class="line">        TestThread3 testThread3 = <span class="keyword">new</span> TestThread3();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象，通过线程对象来开启我们的线程</span></span><br><span class="line"><span class="comment">//        Thread thread = new Thread(testThread3);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        thread.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(testThread3).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我在学习多线程---"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="案例：龟兔赛跑-Race"><a href="#案例：龟兔赛跑-Race" class="headerlink" title="案例：龟兔赛跑-Race"></a>案例：龟兔赛跑-Race</h6><p>1.首先来个赛道距离，然后要离终点越来越近</p>
<p>2.判断比赛是否结束</p>
<p>3.打印出胜利者</p>
<p>4.龟兔赛跑开始</p>
<p>5.故事中是乌龟赢的，兔子需要睡觉，所以我们来模拟兔子睡觉</p>
<p>6.终于，乌龟赢得比赛</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">"兔子"</span>) &amp;&amp; i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断比赛是否结束</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = gameOver(i);</span><br><span class="line">            <span class="comment">//如果比赛结束了，就停止程序</span></span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"--》跑了"</span>+i+<span class="string">"步"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否完成比赛</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span>(winner!=<span class="keyword">null</span>)&#123;   <span class="comment">//已经存在胜利者了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (steps &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(<span class="string">"Winner is"</span> + winner);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">"兔子"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">"乌龟"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3、实现Callable接口-了解即可"><a href="#1-3、实现Callable接口-了解即可" class="headerlink" title="1.3、实现Callable接口(了解即可)"></a>1.3、实现Callable接口(了解即可)</h5><p>演示：利用callable改造下载图片案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建线程方式三：实现callable接口</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">callable的好处：</span></span><br><span class="line"><span class="comment">1.可以定义返回值</span></span><br><span class="line"><span class="comment">2.可以抛出异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;    <span class="comment">//网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;    <span class="comment">//保存的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载图片线程的执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件名为："</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3809381459,3903924594&amp;fm=26&amp;gp=0.jpg"</span>, <span class="string">"1.jpg"</span>);</span><br><span class="line">        TestCallable t2 = <span class="keyword">new</span> TestCallable(<span class="string">"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3809381459,3903924594&amp;fm=26&amp;gp=0.jpg"</span>, <span class="string">"2.jpg"</span>);</span><br><span class="line">        TestCallable t3 = <span class="keyword">new</span> TestCallable(<span class="string">"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3809381459,3903924594&amp;fm=26&amp;gp=0.jpg"</span>, <span class="string">"3.jpg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行服务：</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交执行</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        Future&lt;Boolean&gt; r2 = ser.submit(t2);</span><br><span class="line">        Future&lt;Boolean&gt; r3 = ser.submit(t3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        <span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs2 = r2.get();</span><br><span class="line">        <span class="keyword">boolean</span> rs3 = r3.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(rs1);</span><br><span class="line">        System.out.println(rs2);</span><br><span class="line">        System.out.println(rs3);</span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，downloader方法出现问题"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4、Lamdba表达式"><a href="#1-4、Lamdba表达式" class="headerlink" title="1.4、Lamdba表达式"></a>1.4、Lamdba表达式</h5><h6 id="推导过程："><a href="#推导过程：" class="headerlink" title="推导过程："></a>推导过程：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">推导lambda表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"i like lambda2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ILike like = <span class="keyword">new</span> Like();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like2();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"i like lambda3"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> Like3();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.匿名内部类，没有类的名称，必须借助接口或者父类</span></span><br><span class="line">        like = <span class="keyword">new</span> ILike() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"i like lambda4"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = ()-&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"i like lambda5"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"i like lambda"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="书写过程："><a href="#书写过程：" class="headerlink" title="书写过程："></a>书写过程：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.carey.lambda;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Carey</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ilove love = <span class="keyword">null</span>;</span><br><span class="line">          <span class="comment">//1.lambda表达简化</span></span><br><span class="line"><span class="comment">//        Ilove love = (int a)-&gt; &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println("i love you--&gt;"+a);</span></span><br><span class="line"><span class="comment">//            &#125;;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//简化1.参数类型</span></span><br><span class="line"><span class="comment">//        love = (a)-&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("i love you--&gt;"+a);</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化2.简化括号</span></span><br><span class="line"><span class="comment">//        love = a-&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("i love you--&gt;"+a);</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化3.去掉花括号</span></span><br><span class="line">        love = a-&gt;System.out.println(<span class="string">"i love you--&gt;"</span>+a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*总结：</span></span><br><span class="line"><span class="comment">            lambda表达式只能有一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹。</span></span><br><span class="line"><span class="comment">            前提是接口为函数式表达式</span></span><br><span class="line"><span class="comment">            多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        love.love(<span class="number">521</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ilove</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">love</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、线程状态"><a href="#2、线程状态" class="headerlink" title="2、线程状态"></a>2、线程状态</h4><p><img src="/blog/2020/05/24/thread-study/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%811.png" alt="image-20200525114927889"></p>
<p><img src="/blog/2020/05/24/thread-study/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%812.png" alt="image-20200525115124257"></p>
<h5 id="2-1、线程停止"><a href="#2-1、线程停止" class="headerlink" title="2.1、线程停止"></a>2.1、线程停止</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试stop</span></span><br><span class="line"><span class="comment">//1.建议线程正常停止--&gt;利用次数，不建议死循环。</span></span><br><span class="line"><span class="comment">//2.建议使用标志位--&gt;设置一个标志位</span></span><br><span class="line"><span class="comment">//3.不要使用stop或者destroy等过时或者JDK不建议使用的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.设置一个标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"run...Thread"</span>+i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestStop testStop = <span class="keyword">new</span> TestStop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"main"</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">900</span>)&#123;</span><br><span class="line">                <span class="comment">//调用stop方法切换标志位，让线程停止</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">"线程该停止了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2、线程休眠-sleep："><a href="#2-2、线程休眠-sleep：" class="headerlink" title="2.2、线程休眠_sleep："></a>2.2、线程休眠_sleep：</h5><ul>
<li>sleep(时间)指定当前线程阻塞的毫秒数；</li>
<li>sleep存在异常InterruptedException；</li>
<li>sleep时间达到后线程进入就绪状态；</li>
<li>sleep可以模拟网络延时，倒计时等。</li>
<li>每一个对象都有一个锁，sleep不会释放锁</li>
</ul>
<p>模拟网络延时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟网络延时：放大问题的发生性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;拿到了第"</span>+ticketNums--+<span class="string">"票"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestSleep ticket = <span class="keyword">new</span> TestSleep();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"小明"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"老师"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"黄牛党"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模拟倒计时以及打印系统时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印当前系统时间</span></span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//获取系统当前时间</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(startTime));</span><br><span class="line">                startTime = <span class="keyword">new</span> Date(System.currentTimeMillis());<span class="comment">//更新当前时间</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟倒计时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3、线程礼让-yield"><a href="#2-3、线程礼让-yield" class="headerlink" title="2.3、线程礼让_yield"></a>2.3、线程礼让_yield</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试礼让线程</span></span><br><span class="line"><span class="comment">//礼让不一定成功，看线程心情</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程开始执行"</span>);</span><br><span class="line">        Thread.yield();<span class="comment">//礼让</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程停止执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4、线程强制执行-join"><a href="#2-4、线程强制执行-join" class="headerlink" title="2.4、线程强制执行_join"></a>2.4、线程强制执行_join</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试join方法//想象为插队</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程vip来了"</span>+i);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//启动我们的线程</span></span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();<span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"main"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-5、观测线程状态"><a href="#2-5、观测线程状态" class="headerlink" title="2.5、观测线程状态"></a>2.5、观测线程状态</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//观察测试线程的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"/////"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">//NEW</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();<span class="comment">//启动线程</span></span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state); <span class="comment">//Run</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state!=Thread.State.TERMINATED)&#123;  <span class="comment">//只要线程不终止，就一直输出状态</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-6、线程优先级"><a href="#2-6、线程优先级" class="headerlink" title="2.6、线程优先级"></a>2.6、线程优先级</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试线程的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//主线程默认优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;"</span>+Thread.currentThread().getPriority());</span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t6 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先设置优先级，再启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        t4.setPriority(Thread.MAX_PRIORITY); <span class="comment">//MAX_PRIORITY=10</span></span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;"</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-7、守护线程"><a href="#2-7、守护线程" class="headerlink" title="2.7、守护线程"></a>2.7、守护线程</h5><ul>
<li>线程分为==用户线程==和==守护线程==</li>
<li>虚拟机必须确认用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>如，后台记录操作日志，监控内存，垃圾回收等待</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试守护线程</span></span><br><span class="line"><span class="comment">//上帝守护你</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeamon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        God god = <span class="keyword">new</span> God();</span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);<span class="comment">//默认是false表示用户线程，正常的线程都是用户线程...</span></span><br><span class="line"></span><br><span class="line">        thread.start(); <span class="comment">//上帝守护线程启动</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(you).start();  <span class="comment">//你 用户线程启动...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"上帝保佑着你"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你一生都开心的活着"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==========goodbye! world!==========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、线程同步"><a href="#3、线程同步" class="headerlink" title="3、线程同步"></a>3、线程同步</h4><p>多个线程操作同一个资源</p>
<p>并发：==同一个对象==被==多个线程==同时操作</p>
<ul>
<li>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入==锁机制synchronized==，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：<ul>
<li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li>
<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li>
<li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题.</li>
</ul>
</li>
</ul>
<h5 id="3-1、线程不安全示例"><a href="#3-1、线程不安全示例" class="headerlink" title="3.1、线程不安全示例"></a>3.1、线程不安全示例</h5><p>买票：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的买票</span></span><br><span class="line"><span class="comment">//线程不安全，有负数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket station = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"苦逼的我"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"牛逼的你们"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"可恶的黄牛党"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">//外部停止方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"拿到"</span>+ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取款：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的取钱</span></span><br><span class="line"><span class="comment">// 两个人去银行取钱，账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//账户</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>, <span class="string">"结婚基金"</span>);</span><br><span class="line"></span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account, <span class="number">50</span>, <span class="string">"你"</span>);</span><br><span class="line">        Drawing girlFriend = <span class="keyword">new</span> Drawing(account, <span class="number">100</span>, <span class="string">"girlFriend"</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        girlFriend.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money; <span class="comment">//余额</span></span><br><span class="line">    String name; <span class="comment">//卡名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//银行：模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Account account;<span class="comment">//账户</span></span><br><span class="line">    <span class="comment">//取了多少钱</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney;</span><br><span class="line">    <span class="comment">//现在手里有多少钱</span></span><br><span class="line">    <span class="keyword">int</span> nowMoney;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawingMoney,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断有没有钱</span></span><br><span class="line">        <span class="keyword">if</span>(account.money-drawingMoney&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"钱不够，取不了"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sleep可以放大问题的发生性</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//卡内余额= 余额 - 你取的钱</span></span><br><span class="line">        account.money = account.money - drawingMoney;</span><br><span class="line">        <span class="comment">//你手里的钱</span></span><br><span class="line">        nowMoney = nowMoney + drawingMoney;</span><br><span class="line"></span><br><span class="line">        System.out.println(account.name+<span class="string">"余额为："</span>+account.money);</span><br><span class="line">        <span class="comment">//Thread.currentThread().getName() = this.getName()</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"手里的钱："</span>+nowMoney);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加数据到集合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程不安全的集合,可能达不到要求的大小，比如本题的10000</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2、同步方法和同步块–synchronized解决上述案例"><a href="#3-2、同步方法和同步块–synchronized解决上述案例" class="headerlink" title="3.2、同步方法和同步块–synchronized解决上述案例"></a>3.2、同步方法和同步块–<em>synchronized</em>解决上述案例</h5><p>买票：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的买票</span></span><br><span class="line"><span class="comment">//线程不安全，有负数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyTicket station = <span class="keyword">new</span> BuyTicket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"苦逼的我"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"牛逼的你们"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"可恶的黄牛党"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>; <span class="comment">//外部停止方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized 同步方法，默认锁的是this，这里也就是BuyTicket</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"拿到"</span>+ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取款：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的取钱</span></span><br><span class="line"><span class="comment">// 两个人去银行取钱，账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//账户</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>, <span class="string">"结婚基金"</span>);</span><br><span class="line"></span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account, <span class="number">50</span>, <span class="string">"你"</span>);</span><br><span class="line">        Drawing girlFriend = <span class="keyword">new</span> Drawing(account, <span class="number">100</span>, <span class="string">"girlFriend"</span>);</span><br><span class="line"></span><br><span class="line">        you.start();</span><br><span class="line">        girlFriend.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money; <span class="comment">//余额</span></span><br><span class="line">    String name; <span class="comment">//卡名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//银行：模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Account account;<span class="comment">//账户</span></span><br><span class="line">    <span class="comment">//取了多少钱</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney;</span><br><span class="line">    <span class="comment">//现在手里有多少钱</span></span><br><span class="line">    <span class="keyword">int</span> nowMoney;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawingMoney,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMoney;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="comment">//synchronized 默认锁的是this</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//锁的对象就是变化的量，需要增删改的对象，这里改变的是account要锁account，不是锁默认的this，即Drawing</span></span><br><span class="line">        <span class="keyword">synchronized</span> (account)&#123;</span><br><span class="line">            <span class="comment">//判断有没有钱</span></span><br><span class="line">            <span class="keyword">if</span>(account.money-drawingMoney&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"钱不够，取不了"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//sleep可以放大问题的发生性</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//卡内余额= 余额 - 你取的钱</span></span><br><span class="line">            account.money = account.money - drawingMoney;</span><br><span class="line">            <span class="comment">//你手里的钱</span></span><br><span class="line">            nowMoney = nowMoney + drawingMoney;</span><br><span class="line"></span><br><span class="line">            System.out.println(account.name+<span class="string">"余额为："</span>+account.money);</span><br><span class="line">            <span class="comment">//Thread.currentThread().getName() = this.getName()</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"手里的钱："</span>+nowMoney);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加数据到集合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程不安全的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;       <span class="comment">//这里改变的是list，因此要锁list</span></span><br><span class="line">                <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拓展–CopyOnWriteArrayList：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">               list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3、死锁"><a href="#3-3、死锁" class="headerlink" title="3.3、死锁"></a>3.3、死锁</h5><p>产生死锁的四个必要条件：</p>
<p>1.互斥条件：一个资源每次只能被一个进程使用。</p>
<p>2.请求与保持条件：一个进程因请求资源二阻塞时，对已获得的资源保持不放。</p>
<p>3.不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。</p>
<p>4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup g1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>, <span class="string">"好一个清秀的菇凉"</span>);</span><br><span class="line">        Makeup g2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>, <span class="string">"刘亦菲"</span>);</span><br><span class="line"></span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice;<span class="comment">//选择</span></span><br><span class="line">    String girlName; <span class="comment">//使用化妆品的人</span></span><br><span class="line"></span><br><span class="line">    Makeup(<span class="keyword">int</span> choice,String girlName)&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得口红的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (mirror)&#123;  <span class="comment">//一秒钟后获得镜子的锁</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123; <span class="comment">//获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick)&#123;  <span class="comment">//一秒钟后获得口红的锁</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得口红的锁"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决上述死锁的方法是把两个对象的synchronized代码块移出来，两个人就不会同时去抱一把锁了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Makeup g1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>, <span class="string">"好一个清秀的菇凉"</span>);</span><br><span class="line">        Makeup g2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>, <span class="string">"刘亦菲"</span>);</span><br><span class="line"></span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> choice;<span class="comment">//选择</span></span><br><span class="line">    String girlName; <span class="comment">//使用化妆品的人</span></span><br><span class="line"></span><br><span class="line">    Makeup(<span class="keyword">int</span> choice,String girlName)&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123; <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得口红的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;  <span class="comment">//一秒钟后获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得镜子的锁"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123; <span class="comment">//获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;  <span class="comment">//一秒钟后获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得口红的锁"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-4、Lock锁"><a href="#3-4、Lock锁" class="headerlink" title="3.4、Lock锁"></a>3.4、Lock锁</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试lock锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestLock2 testLock2 = <span class="keyword">new</span> TestLock2();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tickNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            lock.lock();<span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(tickNums&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(tickNums--);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、线程协作"><a href="#4、线程协作" class="headerlink" title="4、线程协作"></a>4、线程协作</h4><ul>
<li>Java提供了几个方法解决线程之间的通信问题</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>wait()</td>
<td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>
</tr>
<tr>
<td>wait(long timeout)</td>
<td>指定等待的毫秒数</td>
</tr>
<tr>
<td>notify()</td>
<td>唤醒一个处于等待状态的线程</td>
</tr>
<tr>
<td>notifyAll()</td>
<td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>
</tr>
</tbody></table>
<p>==注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常IIIegalMonitorStateException==</p>
<h5 id="4-1、生产者消费者问题"><a href="#4-1、生产者消费者问题" class="headerlink" title="4.1、生产者消费者问题"></a>4.1、生产者消费者问题</h5><h6 id="4-1-1、管程法"><a href="#4-1-1、管程法" class="headerlink" title="4.1.1、管程法"></a>4.1.1、管程法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试：生产者消费者模型--&gt;利用缓冲区解决：管程法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者， 消费者， 产品， 缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Productor(container).start();</span><br><span class="line">        <span class="keyword">new</span> Consumer(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">            System.out.println(<span class="string">"生产了"</span>+i+<span class="string">"只鸡"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"消费了--&gt;"</span>+container.pop().id+<span class="string">"只鸡"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">//产品编号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span>(count == chickens.length)&#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有满，我们就需要丢入产品</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费了</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断能否消费</span></span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待生产者生产，消费者等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果可以消费，我们就需要取出产品</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//吃完了，通知生产者生产</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-1-2、信号灯法"><a href="#4-1-2、信号灯法" class="headerlink" title="4.1.2、信号灯法"></a>4.1.2、信号灯法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试生产者消费者问题2：信号灯法，标志位解决</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">        <span class="keyword">new</span> Player(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Watcher(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者--&gt;演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"快乐大本营播放中"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"抖音：记录美好生活"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者--&gt;观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"快乐大本营播放中"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"抖音：记录美好生活"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品--&gt;节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    <span class="comment">//演员表演，观众等待     T</span></span><br><span class="line">    <span class="comment">//观众观看，演员等待     F</span></span><br><span class="line">    String voice; <span class="comment">// 表演的节目</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String voice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag!=<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"演员表演了"</span>+voice);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll(); <span class="comment">//通知唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"观看了："</span>+voice);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2、线程池"><a href="#4-2、线程池" class="headerlink" title="4.2、线程池"></a>4.2、线程池</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建服务，创建线程池</span></span><br><span class="line">        <span class="comment">//newFixedThreadPool   参数为：线程池大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//回顾总结线程的创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread1().start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread2()).start();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> MyThread3());</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer integer = futureTask.get();</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyThread1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现Runnable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyThread2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.实现Callable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyThread3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
